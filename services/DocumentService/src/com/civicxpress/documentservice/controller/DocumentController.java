/**This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
package com.civicxpress.documentservice.controller;

import com.civicxpress.documentservice.DocumentService;
import java.lang.Exception;
import java.lang.String;
import java.lang.Long;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.civicxpress.documentservice.DocumentService.PingResponse;
import java.net.URI;
import org.apache.http.HttpResponse;
import org.springframework.web.bind.annotation.*;
import org.springframework.http.MediaType;
import org.springframework.beans.factory.annotation.Autowired;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

@RestController
@RequestMapping(value = "/document")
public class DocumentController {

    @Autowired
    private DocumentService documentService;

    // @RequestMapping(value = "*", method = RequestMethod.POST)
    // public Object forwardPost() {
    //     return documentService.forwardPost();
    // }
    @RequestMapping(value = "/beginUpload", produces = "application/json", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = " }")
    public String beginUpload() throws Exception {
        // HttpServletRequest req = sra.getRequest();
        return documentService.beginUpload();
    }

    @RequestMapping(value = "/document", produces = "application/octet-stream", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public DownloadResponse editDocument(@RequestParam(value = "documentId", required = false) Long documentId) throws Exception {
        return documentService.editDocument(documentId);
    }

    @RequestMapping(value = "/Test/Ping", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public PingResponse ping() {
        return documentService.ping();
    }

    @RequestMapping(value = "/uploadDocument", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public HttpResponse uploadDocument(@RequestBody URI uri, @RequestParam(value = "data", required = false) String data) throws Exception {
        return documentService.uploadDocument(uri, data);
    }
}
