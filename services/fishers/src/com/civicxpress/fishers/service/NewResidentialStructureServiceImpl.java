/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.fishers.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.civicxpress.fishers.NewResidentialStructure;


/**
 * ServiceImpl object for domain model class NewResidentialStructure.
 *
 * @see NewResidentialStructure
 */
@Service("fishers.NewResidentialStructureService")
public class NewResidentialStructureServiceImpl implements NewResidentialStructureService {

    private static final Logger LOGGER = LoggerFactory.getLogger(NewResidentialStructureServiceImpl.class);


    @Autowired
    @Qualifier("fishers.NewResidentialStructureDao")
    private WMGenericDao<NewResidentialStructure, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<NewResidentialStructure, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "fishersTransactionManager")
    @Override
	public NewResidentialStructure create(NewResidentialStructure newResidentialStructure) {
        LOGGER.debug("Creating a new NewResidentialStructure with information: {}", newResidentialStructure);
        NewResidentialStructure newResidentialStructureCreated = this.wmGenericDao.create(newResidentialStructure);
        return newResidentialStructureCreated;
    }

	@Transactional(readOnly = true, value = "fishersTransactionManager")
	@Override
	public NewResidentialStructure getById(Integer newresidentialstructureId) throws EntityNotFoundException {
        LOGGER.debug("Finding NewResidentialStructure by id: {}", newresidentialstructureId);
        NewResidentialStructure newResidentialStructure = this.wmGenericDao.findById(newresidentialstructureId);
        if (newResidentialStructure == null){
            LOGGER.debug("No NewResidentialStructure found with id: {}", newresidentialstructureId);
            throw new EntityNotFoundException(String.valueOf(newresidentialstructureId));
        }
        return newResidentialStructure;
    }

    @Transactional(readOnly = true, value = "fishersTransactionManager")
	@Override
	public NewResidentialStructure findById(Integer newresidentialstructureId) {
        LOGGER.debug("Finding NewResidentialStructure by id: {}", newresidentialstructureId);
        return this.wmGenericDao.findById(newresidentialstructureId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "fishersTransactionManager")
	@Override
	public NewResidentialStructure update(NewResidentialStructure newResidentialStructure) throws EntityNotFoundException {
        LOGGER.debug("Updating NewResidentialStructure with information: {}", newResidentialStructure);
        this.wmGenericDao.update(newResidentialStructure);

        Integer newresidentialstructureId = newResidentialStructure.getId();

        return this.wmGenericDao.findById(newresidentialstructureId);
    }

    @Transactional(value = "fishersTransactionManager")
	@Override
	public NewResidentialStructure delete(Integer newresidentialstructureId) throws EntityNotFoundException {
        LOGGER.debug("Deleting NewResidentialStructure with id: {}", newresidentialstructureId);
        NewResidentialStructure deleted = this.wmGenericDao.findById(newresidentialstructureId);
        if (deleted == null) {
            LOGGER.debug("No NewResidentialStructure found with id: {}", newresidentialstructureId);
            throw new EntityNotFoundException(String.valueOf(newresidentialstructureId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "fishersTransactionManager")
	@Override
	public Page<NewResidentialStructure> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all NewResidentialStructures");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "fishersTransactionManager")
    @Override
    public Page<NewResidentialStructure> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all NewResidentialStructures");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "fishersTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service fishers for table NewResidentialStructure to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "fishersTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }



}

