/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.civicxpress.cx2.Fees;
import com.civicxpress.cx2.MyCart;


/**
 * ServiceImpl object for domain model class Fees.
 *
 * @see Fees
 */
@Service("cx2.FeesService")
public class FeesServiceImpl implements FeesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(FeesServiceImpl.class);

    @Autowired
	@Qualifier("cx2.MyCartService")
	private MyCartService myCartService;

    @Autowired
    @Qualifier("cx2.FeesDao")
    private WMGenericDao<Fees, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Fees, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
	public Fees create(Fees fees) {
        LOGGER.debug("Creating a new Fees with information: {}", fees);
        Fees feesCreated = this.wmGenericDao.create(fees);
        if(feesCreated.getMyCarts() != null) {
            for(MyCart myCart : feesCreated.getMyCarts()) {
                myCart.setFees(feesCreated);
                LOGGER.debug("Creating a new child MyCart with information: {}", myCart);
                myCartService.create(myCart);
            }
        }
        return feesCreated;
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public Fees getById(Integer feesId) throws EntityNotFoundException {
        LOGGER.debug("Finding Fees by id: {}", feesId);
        Fees fees = this.wmGenericDao.findById(feesId);
        if (fees == null){
            LOGGER.debug("No Fees found with id: {}", feesId);
            throw new EntityNotFoundException(String.valueOf(feesId));
        }
        return fees;
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public Fees findById(Integer feesId) {
        LOGGER.debug("Finding Fees by id: {}", feesId);
        return this.wmGenericDao.findById(feesId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "cx2TransactionManager")
	@Override
	public Fees update(Fees fees) throws EntityNotFoundException {
        LOGGER.debug("Updating Fees with information: {}", fees);
        this.wmGenericDao.update(fees);

        Integer feesId = fees.getId();

        return this.wmGenericDao.findById(feesId);
    }

    @Transactional(value = "cx2TransactionManager")
	@Override
	public Fees delete(Integer feesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Fees with id: {}", feesId);
        Fees deleted = this.wmGenericDao.findById(feesId);
        if (deleted == null) {
            LOGGER.debug("No Fees found with id: {}", feesId);
            throw new EntityNotFoundException(String.valueOf(feesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public Page<Fees> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Fees");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Fees> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Fees");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service cx2 for table Fees to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<MyCart> findAssociatedMyCarts(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated myCarts");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("fees.id = '" + id + "'");

        return myCartService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service MyCartService instance
	 */
	protected void setMyCartService(MyCartService service) {
        this.myCartService = service;
    }

}

