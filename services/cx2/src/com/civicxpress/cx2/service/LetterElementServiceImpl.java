/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.civicxpress.cx2.LetterElement;
import com.civicxpress.cx2.LetterElementId;


/**
 * ServiceImpl object for domain model class LetterElement.
 *
 * @see LetterElement
 */
@Service("cx2.LetterElementService")
public class LetterElementServiceImpl implements LetterElementService {

    private static final Logger LOGGER = LoggerFactory.getLogger(LetterElementServiceImpl.class);


    @Autowired
    @Qualifier("cx2.LetterElementDao")
    private WMGenericDao<LetterElement, LetterElementId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<LetterElement, LetterElementId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
	public LetterElement create(LetterElement letterElement) {
        LOGGER.debug("Creating a new LetterElement with information: {}", letterElement);
        LetterElement letterElementCreated = this.wmGenericDao.create(letterElement);
        return letterElementCreated;
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public LetterElement getById(LetterElementId letterelementId) throws EntityNotFoundException {
        LOGGER.debug("Finding LetterElement by id: {}", letterelementId);
        LetterElement letterElement = this.wmGenericDao.findById(letterelementId);
        if (letterElement == null){
            LOGGER.debug("No LetterElement found with id: {}", letterelementId);
            throw new EntityNotFoundException(String.valueOf(letterelementId));
        }
        return letterElement;
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public LetterElement findById(LetterElementId letterelementId) {
        LOGGER.debug("Finding LetterElement by id: {}", letterelementId);
        return this.wmGenericDao.findById(letterelementId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "cx2TransactionManager")
	@Override
	public LetterElement update(LetterElement letterElement) throws EntityNotFoundException {
        LOGGER.debug("Updating LetterElement with information: {}", letterElement);
        this.wmGenericDao.update(letterElement);

        LetterElementId letterelementId = new LetterElementId();
        letterelementId.setId(letterElement.getId());
        letterelementId.setLetterSectionId(letterElement.getLetterSectionId());
        letterelementId.setFontSize(letterElement.getFontSize());
        letterelementId.setLineHeight(letterElement.getLineHeight());
        letterelementId.setJustification(letterElement.getJustification());
        letterelementId.setIsBold(letterElement.getIsBold());
        letterelementId.setText(letterElement.getText());

        return this.wmGenericDao.findById(letterelementId);
    }

    @Transactional(value = "cx2TransactionManager")
	@Override
	public LetterElement delete(LetterElementId letterelementId) throws EntityNotFoundException {
        LOGGER.debug("Deleting LetterElement with id: {}", letterelementId);
        LetterElement deleted = this.wmGenericDao.findById(letterelementId);
        if (deleted == null) {
            LOGGER.debug("No LetterElement found with id: {}", letterelementId);
            throw new EntityNotFoundException(String.valueOf(letterelementId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public Page<LetterElement> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all LetterElements");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<LetterElement> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all LetterElements");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service cx2 for table LetterElement to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

