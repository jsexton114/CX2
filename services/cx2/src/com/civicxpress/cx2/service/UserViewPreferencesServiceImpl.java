/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.civicxpress.cx2.UserViewPreferences;


/**
 * ServiceImpl object for domain model class UserViewPreferences.
 *
 * @see UserViewPreferences
 */
@Service("cx2.UserViewPreferencesService")
public class UserViewPreferencesServiceImpl implements UserViewPreferencesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(UserViewPreferencesServiceImpl.class);


    @Autowired
    @Qualifier("cx2.UserViewPreferencesDao")
    private WMGenericDao<UserViewPreferences, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<UserViewPreferences, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
	public UserViewPreferences create(UserViewPreferences userViewPreferences) {
        LOGGER.debug("Creating a new UserViewPreferences with information: {}", userViewPreferences);
        UserViewPreferences userViewPreferencesCreated = this.wmGenericDao.create(userViewPreferences);
        return userViewPreferencesCreated;
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public UserViewPreferences getById(Integer userviewpreferencesId) throws EntityNotFoundException {
        LOGGER.debug("Finding UserViewPreferences by id: {}", userviewpreferencesId);
        UserViewPreferences userViewPreferences = this.wmGenericDao.findById(userviewpreferencesId);
        if (userViewPreferences == null){
            LOGGER.debug("No UserViewPreferences found with id: {}", userviewpreferencesId);
            throw new EntityNotFoundException(String.valueOf(userviewpreferencesId));
        }
        return userViewPreferences;
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public UserViewPreferences findById(Integer userviewpreferencesId) {
        LOGGER.debug("Finding UserViewPreferences by id: {}", userviewpreferencesId);
        return this.wmGenericDao.findById(userviewpreferencesId);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public UserViewPreferences getByUserIdAndPreferenceId(Integer userId, Integer preferenceId) {
        Map<String, Object> userIdAndPreferenceIdMap = new HashMap<>();
        userIdAndPreferenceIdMap.put("userId", userId);
        userIdAndPreferenceIdMap.put("preferenceId", preferenceId);

        LOGGER.debug("Finding UserViewPreferences by unique keys: {}", userIdAndPreferenceIdMap);
        UserViewPreferences userViewPreferences = this.wmGenericDao.findByUniqueKey(userIdAndPreferenceIdMap);

        if (userViewPreferences == null){
            LOGGER.debug("No UserViewPreferences found with given unique key values: {}", userIdAndPreferenceIdMap);
            throw new EntityNotFoundException(String.valueOf(userIdAndPreferenceIdMap));
        }

        return userViewPreferences;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "cx2TransactionManager")
	@Override
	public UserViewPreferences update(UserViewPreferences userViewPreferences) throws EntityNotFoundException {
        LOGGER.debug("Updating UserViewPreferences with information: {}", userViewPreferences);
        this.wmGenericDao.update(userViewPreferences);

        Integer userviewpreferencesId = userViewPreferences.getId();

        return this.wmGenericDao.findById(userviewpreferencesId);
    }

    @Transactional(value = "cx2TransactionManager")
	@Override
	public UserViewPreferences delete(Integer userviewpreferencesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting UserViewPreferences with id: {}", userviewpreferencesId);
        UserViewPreferences deleted = this.wmGenericDao.findById(userviewpreferencesId);
        if (deleted == null) {
            LOGGER.debug("No UserViewPreferences found with id: {}", userviewpreferencesId);
            throw new EntityNotFoundException(String.valueOf(userviewpreferencesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public Page<UserViewPreferences> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all UserViewPreferences");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<UserViewPreferences> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all UserViewPreferences");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service cx2 for table UserViewPreferences to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

