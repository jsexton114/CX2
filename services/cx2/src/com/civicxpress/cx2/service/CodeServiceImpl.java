/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.civicxpress.cx2.Code;
import com.civicxpress.cx2.Violations;


/**
 * ServiceImpl object for domain model class Code.
 *
 * @see Code
 */
@Service("cx2.CodeService")
public class CodeServiceImpl implements CodeService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CodeServiceImpl.class);

    @Autowired
	@Qualifier("cx2.ViolationsService")
	private ViolationsService violationsService;

    @Autowired
    @Qualifier("cx2.CodeDao")
    private WMGenericDao<Code, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Code, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
	public Code create(Code codeInstance) {
        LOGGER.debug("Creating a new Code with information: {}", codeInstance);
        Code codeInstanceCreated = this.wmGenericDao.create(codeInstance);
        if(codeInstanceCreated.getViolationses() != null) {
            for(Violations violationse : codeInstanceCreated.getViolationses()) {
                violationse.setCode(codeInstanceCreated);
                LOGGER.debug("Creating a new child Violations with information: {}", violationse);
                violationsService.create(violationse);
            }
        }
        return codeInstanceCreated;
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public Code getById(Integer codeId) throws EntityNotFoundException {
        LOGGER.debug("Finding Code by id: {}", codeId);
        Code codeInstance = this.wmGenericDao.findById(codeId);
        if (codeInstance == null){
            LOGGER.debug("No Code found with id: {}", codeId);
            throw new EntityNotFoundException(String.valueOf(codeId));
        }
        return codeInstance;
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public Code findById(Integer codeId) {
        LOGGER.debug("Finding Code by id: {}", codeId);
        return this.wmGenericDao.findById(codeId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "cx2TransactionManager")
	@Override
	public Code update(Code codeInstance) throws EntityNotFoundException {
        LOGGER.debug("Updating Code with information: {}", codeInstance);
        this.wmGenericDao.update(codeInstance);

        Integer codeId = codeInstance.getId();

        return this.wmGenericDao.findById(codeId);
    }

    @Transactional(value = "cx2TransactionManager")
	@Override
	public Code delete(Integer codeId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Code with id: {}", codeId);
        Code deleted = this.wmGenericDao.findById(codeId);
        if (deleted == null) {
            LOGGER.debug("No Code found with id: {}", codeId);
            throw new EntityNotFoundException(String.valueOf(codeId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public Page<Code> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Codes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Code> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Codes");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service cx2 for table Code to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Violations> findAssociatedViolationses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated violationses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("code.id = '" + id + "'");

        return violationsService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ViolationsService instance
	 */
	protected void setViolationsService(ViolationsService service) {
        this.violationsService = service;
    }

}

