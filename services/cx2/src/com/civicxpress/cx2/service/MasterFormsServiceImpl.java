/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.civicxpress.cx2.MasterForms;
import com.civicxpress.cx2.SharedWith;


/**
 * ServiceImpl object for domain model class MasterForms.
 *
 * @see MasterForms
 */
@Service("cx2.MasterFormsService")
public class MasterFormsServiceImpl implements MasterFormsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(MasterFormsServiceImpl.class);

    @Autowired
	@Qualifier("cx2.SharedWithService")
	private SharedWithService sharedWithService;

    @Autowired
    @Qualifier("cx2.MasterFormsDao")
    private WMGenericDao<MasterForms, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<MasterForms, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
	public MasterForms create(MasterForms masterForms) {
        LOGGER.debug("Creating a new MasterForms with information: {}", masterForms);
        MasterForms masterFormsCreated = this.wmGenericDao.create(masterForms);
        if(masterFormsCreated.getSharedWiths() != null) {
            for(SharedWith sharedWith : masterFormsCreated.getSharedWiths()) {
                sharedWith.setMasterForms(masterFormsCreated);
                LOGGER.debug("Creating a new child SharedWith with information: {}", sharedWith);
                sharedWithService.create(sharedWith);
            }
        }
        return masterFormsCreated;
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public MasterForms getById(String masterformsId) throws EntityNotFoundException {
        LOGGER.debug("Finding MasterForms by id: {}", masterformsId);
        MasterForms masterForms = this.wmGenericDao.findById(masterformsId);
        if (masterForms == null){
            LOGGER.debug("No MasterForms found with id: {}", masterformsId);
            throw new EntityNotFoundException(String.valueOf(masterformsId));
        }
        return masterForms;
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public MasterForms findById(String masterformsId) {
        LOGGER.debug("Finding MasterForms by id: {}", masterformsId);
        return this.wmGenericDao.findById(masterformsId);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public MasterForms getByFormGuid(String formGuid) {
        Map<String, Object> formGuidMap = new HashMap<>();
        formGuidMap.put("formGuid", formGuid);

        LOGGER.debug("Finding MasterForms by unique keys: {}", formGuidMap);
        MasterForms masterForms = this.wmGenericDao.findByUniqueKey(formGuidMap);

        if (masterForms == null){
            LOGGER.debug("No MasterForms found with given unique key values: {}", formGuidMap);
            throw new EntityNotFoundException(String.valueOf(formGuidMap));
        }

        return masterForms;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "cx2TransactionManager")
	@Override
	public MasterForms update(MasterForms masterForms) throws EntityNotFoundException {
        LOGGER.debug("Updating MasterForms with information: {}", masterForms);
        this.wmGenericDao.update(masterForms);

        String masterformsId = masterForms.getFormGuid();

        return this.wmGenericDao.findById(masterformsId);
    }

    @Transactional(value = "cx2TransactionManager")
	@Override
	public MasterForms delete(String masterformsId) throws EntityNotFoundException {
        LOGGER.debug("Deleting MasterForms with id: {}", masterformsId);
        MasterForms deleted = this.wmGenericDao.findById(masterformsId);
        if (deleted == null) {
            LOGGER.debug("No MasterForms found with id: {}", masterformsId);
            throw new EntityNotFoundException(String.valueOf(masterformsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public Page<MasterForms> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all MasterForms");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<MasterForms> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all MasterForms");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service cx2 for table MasterForms to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<SharedWith> findAssociatedSharedWiths(String formGuid, Pageable pageable) {
        LOGGER.debug("Fetching all associated sharedWiths");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("masterForms.formGuid = '" + formGuid + "'");

        return sharedWithService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service SharedWithService instance
	 */
	protected void setSharedWithService(SharedWithService service) {
        this.sharedWithService = service;
    }

}

