/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.civicxpress.cx2.UserDeviceDetails;


/**
 * ServiceImpl object for domain model class UserDeviceDetails.
 *
 * @see UserDeviceDetails
 */
@Service("cx2.UserDeviceDetailsService")
public class UserDeviceDetailsServiceImpl implements UserDeviceDetailsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(UserDeviceDetailsServiceImpl.class);


    @Autowired
    @Qualifier("cx2.UserDeviceDetailsDao")
    private WMGenericDao<UserDeviceDetails, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<UserDeviceDetails, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
	public UserDeviceDetails create(UserDeviceDetails userDeviceDetails) {
        LOGGER.debug("Creating a new UserDeviceDetails with information: {}", userDeviceDetails);
        UserDeviceDetails userDeviceDetailsCreated = this.wmGenericDao.create(userDeviceDetails);
        return userDeviceDetailsCreated;
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public UserDeviceDetails getById(Integer userdevicedetailsId) throws EntityNotFoundException {
        LOGGER.debug("Finding UserDeviceDetails by id: {}", userdevicedetailsId);
        UserDeviceDetails userDeviceDetails = this.wmGenericDao.findById(userdevicedetailsId);
        if (userDeviceDetails == null){
            LOGGER.debug("No UserDeviceDetails found with id: {}", userdevicedetailsId);
            throw new EntityNotFoundException(String.valueOf(userdevicedetailsId));
        }
        return userDeviceDetails;
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public UserDeviceDetails findById(Integer userdevicedetailsId) {
        LOGGER.debug("Finding UserDeviceDetails by id: {}", userdevicedetailsId);
        return this.wmGenericDao.findById(userdevicedetailsId);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public UserDeviceDetails getByDeviceIdAndUserIdAndDeviceOs(String deviceId, Integer userId, String deviceOs) {
        Map<String, Object> deviceIdAndUserIdAndDeviceOsMap = new HashMap<>();
        deviceIdAndUserIdAndDeviceOsMap.put("deviceId", deviceId);
        deviceIdAndUserIdAndDeviceOsMap.put("userId", userId);
        deviceIdAndUserIdAndDeviceOsMap.put("deviceOs", deviceOs);

        LOGGER.debug("Finding UserDeviceDetails by unique keys: {}", deviceIdAndUserIdAndDeviceOsMap);
        UserDeviceDetails userDeviceDetails = this.wmGenericDao.findByUniqueKey(deviceIdAndUserIdAndDeviceOsMap);

        if (userDeviceDetails == null){
            LOGGER.debug("No UserDeviceDetails found with given unique key values: {}", deviceIdAndUserIdAndDeviceOsMap);
            throw new EntityNotFoundException(String.valueOf(deviceIdAndUserIdAndDeviceOsMap));
        }

        return userDeviceDetails;
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public UserDeviceDetails getByDeviceUuidAndUserId(String deviceUuid, Integer userId) {
        Map<String, Object> deviceUuidAndUserIdMap = new HashMap<>();
        deviceUuidAndUserIdMap.put("deviceUuid", deviceUuid);
        deviceUuidAndUserIdMap.put("userId", userId);

        LOGGER.debug("Finding UserDeviceDetails by unique keys: {}", deviceUuidAndUserIdMap);
        UserDeviceDetails userDeviceDetails = this.wmGenericDao.findByUniqueKey(deviceUuidAndUserIdMap);

        if (userDeviceDetails == null){
            LOGGER.debug("No UserDeviceDetails found with given unique key values: {}", deviceUuidAndUserIdMap);
            throw new EntityNotFoundException(String.valueOf(deviceUuidAndUserIdMap));
        }

        return userDeviceDetails;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "cx2TransactionManager")
	@Override
	public UserDeviceDetails update(UserDeviceDetails userDeviceDetails) throws EntityNotFoundException {
        LOGGER.debug("Updating UserDeviceDetails with information: {}", userDeviceDetails);
        this.wmGenericDao.update(userDeviceDetails);

        Integer userdevicedetailsId = userDeviceDetails.getId();

        return this.wmGenericDao.findById(userdevicedetailsId);
    }

    @Transactional(value = "cx2TransactionManager")
	@Override
	public UserDeviceDetails delete(Integer userdevicedetailsId) throws EntityNotFoundException {
        LOGGER.debug("Deleting UserDeviceDetails with id: {}", userdevicedetailsId);
        UserDeviceDetails deleted = this.wmGenericDao.findById(userdevicedetailsId);
        if (deleted == null) {
            LOGGER.debug("No UserDeviceDetails found with id: {}", userdevicedetailsId);
            throw new EntityNotFoundException(String.valueOf(userdevicedetailsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public Page<UserDeviceDetails> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all UserDeviceDetails");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<UserDeviceDetails> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all UserDeviceDetails");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service cx2 for table UserDeviceDetails to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

