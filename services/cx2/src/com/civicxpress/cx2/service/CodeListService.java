/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.civicxpress.cx2.CodeList;
import com.civicxpress.cx2.Violations;

/**
 * Service object for domain model class {@link CodeList}.
 */
public interface CodeListService {

    /**
     * Creates a new CodeList. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on CodeList if any.
     *
     * @param codeList Details of the CodeList to be created; value cannot be null.
     * @return The newly created CodeList.
     */
	CodeList create(CodeList codeList);


	/**
	 * Returns CodeList by given id if exists.
	 *
	 * @param codelistId The id of the CodeList to get; value cannot be null.
	 * @return CodeList associated with the given codelistId.
     * @throws EntityNotFoundException If no CodeList is found.
	 */
	CodeList getById(Integer codelistId) throws EntityNotFoundException;

    /**
	 * Find and return the CodeList by given id if exists, returns null otherwise.
	 *
	 * @param codelistId The id of the CodeList to get; value cannot be null.
	 * @return CodeList associated with the given codelistId.
	 */
	CodeList findById(Integer codelistId);


	/**
	 * Updates the details of an existing CodeList. It replaces all fields of the existing CodeList with the given codeList.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on CodeList if any.
     *
	 * @param codeList The details of the CodeList to be updated; value cannot be null.
	 * @return The updated CodeList.
	 * @throws EntityNotFoundException if no CodeList is found with given input.
	 */
	CodeList update(CodeList codeList) throws EntityNotFoundException;

    /**
	 * Deletes an existing CodeList with the given id.
	 *
	 * @param codelistId The id of the CodeList to be deleted; value cannot be null.
	 * @return The deleted CodeList.
	 * @throws EntityNotFoundException if no CodeList found with the given id.
	 */
	CodeList delete(Integer codelistId) throws EntityNotFoundException;

	/**
	 * Find all CodeLists matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching CodeLists.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<CodeList> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all CodeLists matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching CodeLists.
     *
     * @see Pageable
     * @see Page
	 */
    Page<CodeList> findAll(String query, Pageable pageable);

    /**
	 * Exports all CodeLists matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the CodeLists in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the CodeList.
	 */
	long count(String query);

    /*
     * Returns the associated violationses for given CodeList id.
     *
     * @param codeId value of codeId; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Violations instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Violations> findAssociatedViolationses(Integer codeId, Pageable pageable);

}

