/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.civicxpress.cx2.Vendor;
import com.civicxpress.cx2.VendorAdmins;
import com.civicxpress.cx2.VendorApprovals;
import com.civicxpress.cx2.VendorUsers;


/**
 * ServiceImpl object for domain model class Vendor.
 *
 * @see Vendor
 */
@Service("cx2.VendorService")
public class VendorServiceImpl implements VendorService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VendorServiceImpl.class);

    @Autowired
	@Qualifier("cx2.VendorUsersService")
	private VendorUsersService vendorUsersService;

    @Autowired
	@Qualifier("cx2.VendorApprovalsService")
	private VendorApprovalsService vendorApprovalsService;

    @Autowired
	@Qualifier("cx2.VendorAdminsService")
	private VendorAdminsService vendorAdminsService;

    @Autowired
    @Qualifier("cx2.VendorDao")
    private WMGenericDao<Vendor, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Vendor, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
	public Vendor create(Vendor vendor) {
        LOGGER.debug("Creating a new Vendor with information: {}", vendor);
        Vendor vendorCreated = this.wmGenericDao.create(vendor);
        if(vendorCreated.getVendorApprovalses() != null) {
            for(VendorApprovals vendorApprovalse : vendorCreated.getVendorApprovalses()) {
                vendorApprovalse.setVendor(vendorCreated);
                LOGGER.debug("Creating a new child VendorApprovals with information: {}", vendorApprovalse);
                vendorApprovalsService.create(vendorApprovalse);
            }
        }

        if(vendorCreated.getVendorUserses() != null) {
            for(VendorUsers vendorUserse : vendorCreated.getVendorUserses()) {
                vendorUserse.setVendor(vendorCreated);
                LOGGER.debug("Creating a new child VendorUsers with information: {}", vendorUserse);
                vendorUsersService.create(vendorUserse);
            }
        }

        if(vendorCreated.getVendorAdminses() != null) {
            for(VendorAdmins vendorAdminse : vendorCreated.getVendorAdminses()) {
                vendorAdminse.setVendor(vendorCreated);
                LOGGER.debug("Creating a new child VendorAdmins with information: {}", vendorAdminse);
                vendorAdminsService.create(vendorAdminse);
            }
        }
        return vendorCreated;
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public Vendor getById(Integer vendorId) throws EntityNotFoundException {
        LOGGER.debug("Finding Vendor by id: {}", vendorId);
        Vendor vendor = this.wmGenericDao.findById(vendorId);
        if (vendor == null){
            LOGGER.debug("No Vendor found with id: {}", vendorId);
            throw new EntityNotFoundException(String.valueOf(vendorId));
        }
        return vendor;
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public Vendor findById(Integer vendorId) {
        LOGGER.debug("Finding Vendor by id: {}", vendorId);
        return this.wmGenericDao.findById(vendorId);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Vendor getByFeinNumber(String feinNumber) {
        Map<String, Object> feinNumberMap = new HashMap<>();
        feinNumberMap.put("feinNumber", feinNumber);

        LOGGER.debug("Finding Vendor by unique keys: {}", feinNumberMap);
        Vendor vendor = this.wmGenericDao.findByUniqueKey(feinNumberMap);

        if (vendor == null){
            LOGGER.debug("No Vendor found with given unique key values: {}", feinNumberMap);
            throw new EntityNotFoundException(String.valueOf(feinNumberMap));
        }

        return vendor;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "cx2TransactionManager")
	@Override
	public Vendor update(Vendor vendor) throws EntityNotFoundException {
        LOGGER.debug("Updating Vendor with information: {}", vendor);
        this.wmGenericDao.update(vendor);

        Integer vendorId = vendor.getId();

        return this.wmGenericDao.findById(vendorId);
    }

    @Transactional(value = "cx2TransactionManager")
	@Override
	public Vendor delete(Integer vendorId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Vendor with id: {}", vendorId);
        Vendor deleted = this.wmGenericDao.findById(vendorId);
        if (deleted == null) {
            LOGGER.debug("No Vendor found with id: {}", vendorId);
            throw new EntityNotFoundException(String.valueOf(vendorId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public Page<Vendor> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Vendors");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Vendor> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Vendors");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service cx2 for table Vendor to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<VendorApprovals> findAssociatedVendorApprovalses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated vendorApprovalses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("vendor.id = '" + id + "'");

        return vendorApprovalsService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<VendorUsers> findAssociatedVendorUserses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated vendorUserses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("vendor.id = '" + id + "'");

        return vendorUsersService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<VendorAdmins> findAssociatedVendorAdminses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated vendorAdminses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("vendor.id = '" + id + "'");

        return vendorAdminsService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VendorUsersService instance
	 */
	protected void setVendorUsersService(VendorUsersService service) {
        this.vendorUsersService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VendorApprovalsService instance
	 */
	protected void setVendorApprovalsService(VendorApprovalsService service) {
        this.vendorApprovalsService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VendorAdminsService instance
	 */
	protected void setVendorAdminsService(VendorAdminsService service) {
        this.vendorAdminsService = service;
    }

}

