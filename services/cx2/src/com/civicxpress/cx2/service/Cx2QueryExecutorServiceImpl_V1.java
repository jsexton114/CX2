/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/

package com.civicxpress.cx2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.joda.time.LocalDateTime;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.query.WMQueryExecutor;
import com.wavemaker.runtime.data.exception.BlobContentNotFoundException;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.file.model.Downloadable;

import com.civicxpress.cx2.FormMessages;
import com.civicxpress.cx2.FormTypeFields;
import com.civicxpress.cx2.FormsToInspections;
import com.civicxpress.cx2.InspectionDesign;
import com.civicxpress.cx2.MasterForms;
import com.civicxpress.cx2.Projects;
import com.civicxpress.cx2.UserDeviceDetails;
import com.civicxpress.cx2.UserSubscriptions;
import com.civicxpress.cx2.Users;
import com.civicxpress.cx2.Vendor;
import com.civicxpress.cx2.models.query.*;

@Service
public class Cx2QueryExecutorServiceImpl_V1 implements Cx2QueryExecutorService_V1 {

    private static final Logger LOGGER = LoggerFactory.getLogger(Cx2QueryExecutorServiceImpl.class);

    @Autowired
    @Qualifier("cx2WMQueryExecutor")
    private WMQueryExecutor queryExecutor;

    @Transactional(value = "cx2TransactionManager")
    @Override
    public int executeProjectSoftDelete(Boolean active, String projectGuid) {
        Map params = new HashMap(2);

        params.put("active", active);
        params.put("ProjectGuid", projectGuid);

        return queryExecutor.executeNamedQueryForUpdate("ProjectSoftDelete", params);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public int executeUpdatePrimaryVendorInMasterForms(Integer vendorId, String formGuid) {
        Map params = new HashMap(2);

        params.put("VendorId", vendorId);
        params.put("FormGUID", formGuid);

        return queryExecutor.executeNamedQueryForUpdate("UpdatePrimaryVendorInMasterForms", params);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public int executeAddUsersToVendor(Integer vendorId, Integer userId, Date joiningDate) {
        Map params = new HashMap(3);

        params.put("VendorId", vendorId);
        params.put("UserId", userId);
        params.put("JoiningDate", joiningDate);

        return queryExecutor.executeNamedQueryForUpdate("AddUsersToVendor", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeGetEmailId(Pageable pageable, Integer userId) {
        Map params = new HashMap(1);

        params.put("userID", userId);

        return queryExecutor.executeNamedQuery("getEmailId", params, Object.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public int executeUpdatePasswordAndCF(String password, String cf, Integer newUser) {
        Map params = new HashMap(3);

        params.put("password", password);
        params.put("cf", cf);
        params.put("newUser", newUser);

        return queryExecutor.executeNamedQueryForUpdate("UpdatePasswordAndCF", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeCheckingUserWithMunicipalityInRoles(Pageable pageable, Integer muncipality, Integer user) {
        Map params = new HashMap(2);

        params.put("muncipality", muncipality);
        params.put("user", user);

        return queryExecutor.executeNamedQuery("CheckingUserWithMunicipalityInRoles", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeMunicipalitiesGroupsCounts(Pageable pageable, Integer municipality) {
        Map params = new HashMap(1);

        params.put("municipality", municipality);

        return queryExecutor.executeNamedQuery("MunicipalitiesGroupsCounts", params, Object.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public int executeUpdateCFInProfile(String cf, Integer user) {
        Map params = new HashMap(2);

        params.put("cf", cf);
        params.put("user", user);

        return queryExecutor.executeNamedQueryForUpdate("UpdateCFInProfile", params);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public int executeInsertCategoryMapping(Integer formTypeId, Integer formCategoryId) {
        Map params = new HashMap(2);

        params.put("FormTypeId", formTypeId);
        params.put("FormCategoryId", formCategoryId);

        return queryExecutor.executeNamedQueryForUpdate("InsertCategoryMapping", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeCountOfMunicipalityProjects(Pageable pageable, Integer municipalityId, Boolean active) {
        Map params = new HashMap(2);

        params.put("municipalityId", municipalityId);
        params.put("Active", active);

        return queryExecutor.executeNamedQuery("CountOfMunicipalityProjects", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeProcessFormsForUserByMunicipality(Pageable pageable, Boolean closed, Long municipalityId, Long userId) {
        Map params = new HashMap(3);

        params.put("closed", closed);
        params.put("MunicipalityId", municipalityId);
        params.put("UserId", userId);

        return queryExecutor.executeNamedQuery("ProcessFormsForUserByMunicipality", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeVendorCount(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("VendorCount", params, Object.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public int executeUpdateWorkMunicipality(Boolean monday, Boolean tuesday, Boolean wednesday, Boolean thursday, Boolean friday, Boolean saturday, Boolean sunday, String timezone, Time openTime, Time closeTime, Integer municipalityId) {
        Map params = new HashMap(11);

        params.put("monday", monday);
        params.put("tuesday", tuesday);
        params.put("wednesday", wednesday);
        params.put("thursday", thursday);
        params.put("friday", friday);
        params.put("saturday", saturday);
        params.put("sunday", sunday);
        params.put("timezone", timezone);
        params.put("openTime", openTime);
        params.put("closeTime", closeTime);
        params.put("municipalityId", municipalityId);

        return queryExecutor.executeNamedQueryForUpdate("UpdateWorkMunicipality", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeSearchUsersByEmailOrName(Pageable pageable, String searchString) {
        Map params = new HashMap(1);

        params.put("searchString", searchString);

        return queryExecutor.executeNamedQuery("searchUsersByEmailOrName", params, Object.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public int executeUpdateGlobalEmailSig(String gs, Integer municipality) {
        Map params = new HashMap(2);

        params.put("gs", gs);
        params.put("municipality", municipality);

        return queryExecutor.executeNamedQueryForUpdate("UpdateGlobalEmailSig", params);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public int executeDeleteFromVendorAdmins(Integer user, Integer vendor) {
        Map params = new HashMap(2);

        params.put("user", user);
        params.put("vendor", vendor);

        return queryExecutor.executeNamedQueryForUpdate("DeleteFromVendorAdmins", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeGetUserIdFromPasswordResetToken(Pageable pageable, String token) {
        Map params = new HashMap(1);

        params.put("token", token);

        return queryExecutor.executeNamedQuery("getUserIdFromPasswordResetToken", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeCountOfProcessFormsByMuncipality(Pageable pageable, Integer municipalityId, Boolean closed, Integer userId) {
        Map params = new HashMap(3);

        params.put("MunicipalityId", municipalityId);
        params.put("closed", closed);
        params.put("UserId", userId);

        return queryExecutor.executeNamedQuery("CountOfProcessFormsByMuncipality", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executePreferenceForUser(Pageable pageable, Integer userId) {
        Map params = new HashMap(1);

        params.put("userId", userId);

        return queryExecutor.executeNamedQuery("PreferenceForUser", params, Object.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public int executeUpdateProjectDetails(String projectName, String projectGoals, Timestamp estStartDate, Timestamp estEndDate, String project) {
        Map params = new HashMap(5);

        params.put("ProjectName", projectName);
        params.put("ProjectGoals", projectGoals);
        params.put("EstStartDate", estStartDate);
        params.put("EstEndDate", estEndDate);
        params.put("project", project);

        return queryExecutor.executeNamedQueryForUpdate("UpdateProjectDetails", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeCountOfMuncipalityApplicationsByVendor(Pageable pageable, Integer vendorId) {
        Map params = new HashMap(1);

        params.put("VendorId", vendorId);

        return queryExecutor.executeNamedQuery("CountOfMuncipalityApplicationsByVendor", params, Object.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public int executeAddGIStoProjects(Integer gisrecordId, String relatedProjectGuid, Integer addedByUser, Timestamp addedAt) {
        Map params = new HashMap(4);

        params.put("GISRecordId", gisrecordId);
        params.put("RelatedProjectGUID", relatedProjectGuid);
        params.put("AddedByUser", addedByUser);
        params.put("AddedAt", addedAt);

        return queryExecutor.executeNamedQueryForUpdate("AddGIStoProjects", params);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public int executeUpdateVendorForMasterForms(Integer cxvendorId, String formGuid) {
        Map params = new HashMap(2);

        params.put("CXVendorId", cxvendorId);
        params.put("FormGUID", formGuid);

        return queryExecutor.executeNamedQueryForUpdate("UpdateVendorForMasterForms", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeEmployeesOrAdminsMunicipalities(Pageable pageable, Integer user, String role) {
        Map params = new HashMap(2);

        params.put("user", user);
        params.put("role", role);

        return queryExecutor.executeNamedQuery("EmployeesOrAdminsMunicipalities", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeCountOfVendors(Pageable pageable, Integer vendor) {
        Map params = new HashMap(1);

        params.put("vendor", vendor);

        return queryExecutor.executeNamedQuery("CountOfVendors", params, Object.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public int executeDeleteToken(String token) {
        Map params = new HashMap(1);

        params.put("token", token);

        return queryExecutor.executeNamedQueryForUpdate("deleteToken", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeGetProcessGroupMemebersByFormGUID(Pageable pageable, String formGuid, Integer userId) {
        Map params = new HashMap(2);

        params.put("FormGUID", formGuid);
        params.put("UserId", userId);

        return queryExecutor.executeNamedQuery("GetProcessGroupMemebersByFormGUID", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeAdminVendorsList(Pageable pageable, Integer user) {
        Map params = new HashMap(1);

        params.put("user", user);

        return queryExecutor.executeNamedQuery("AdminVendorsList", params, Object.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public int executeDeleteRoleForMuncipality(String role, Integer municipality, Integer user) {
        Map params = new HashMap(3);

        params.put("role", role);
        params.put("municipality", municipality);
        params.put("user", user);

        return queryExecutor.executeNamedQueryForUpdate("DeleteRoleForMuncipality", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeGetFormTypesByCategoriesAndMunicipalities(Pageable pageable, Integer formCategory, Integer municipalityId, Boolean isCase, Boolean municipalityInternalForm) {
        Map params = new HashMap(4);

        params.put("formCategory", formCategory);
        params.put("municipalityId", municipalityId);
        params.put("isCase", isCase);
        params.put("municipalityInternalForm", municipalityInternalForm);

        return queryExecutor.executeNamedQuery("GetFormTypesByCategoriesAndMunicipalities", params, Object.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public int executeMapAsAdminForVendor(Integer userId, Integer vendorId) {
        Map params = new HashMap(2);

        params.put("UserId", userId);
        params.put("VendorId", vendorId);

        return queryExecutor.executeNamedQueryForUpdate("MapAsAdminForVendor", params);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public int executeInsertFormsIntoProject(String relatedProjectGuid, String relatedFormGuid, Integer addedByUser, Timestamp addedAt, String comments) {
        Map params = new HashMap(5);

        params.put("RelatedProjectGuid", relatedProjectGuid);
        params.put("RelatedFormGUID", relatedFormGuid);
        params.put("AddedByUser", addedByUser);
        params.put("AddedAt", addedAt);
        params.put("Comments", comments);

        return queryExecutor.executeNamedQueryForUpdate("InsertFormsIntoProject", params);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public int executeRecordFormHistory(String formGuid, Integer formTypeId, Integer newStatusId, Integer oldStatusId, String comments, Integer createdBy) {
        Map params = new HashMap(6);

        params.put("FormGUID", formGuid);
        params.put("FormTypeId", formTypeId);
        params.put("NewStatusId", newStatusId);
        params.put("OldStatusId", oldStatusId);
        params.put("Comments", comments);
        params.put("CreatedBy", createdBy);

        return queryExecutor.executeNamedQueryForUpdate("RecordFormHistory", params);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public int executeUpdateFormStatusInMasterForms(Integer formStatus, Boolean closed, String formGuid) {
        Map params = new HashMap(3);

        params.put("formStatus", formStatus);
        params.put("closed", closed);
        params.put("FormGUID", formGuid);

        return queryExecutor.executeNamedQueryForUpdate("UpdateFormStatusInMasterForms", params);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public int executeUpdatePrimaryVendorStatusInVEndor2Forms(Boolean pv, String form) {
        Map params = new HashMap(2);

        params.put("pv", pv);
        params.put("form", form);

        return queryExecutor.executeNamedQueryForUpdate("UpdatePrimaryVendorStatusInVEndor2Forms", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeGetMunicipalityGroupIdIDs(Pageable pageable, Integer userId) {
        Map params = new HashMap(1);

        params.put("userID", userId);

        return queryExecutor.executeNamedQuery("getMunicipalityGroupIdIDs", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeGetListofUsers(Pageable pageable, Integer municipalityId, String email) {
        Map params = new HashMap(2);

        params.put("municipalityID", municipalityId);
        params.put("Email", email);

        return queryExecutor.executeNamedQuery("getListofUsers", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeGetUserID(Pageable pageable, String email) {
        Map params = new HashMap(1);

        params.put("Email", email);

        return queryExecutor.executeNamedQuery("getUserID", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeGetProjectGisrecords(Pageable pageable, String relatedProjectGuid) {
        Map params = new HashMap(1);

        params.put("relatedProjectGuid", relatedProjectGuid);

        return queryExecutor.executeNamedQuery("GetProjectGisrecords", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeSubDivisonCount(Pageable pageable, Integer municipalityId) {
        Map params = new HashMap(1);

        params.put("municipalityId", municipalityId);

        return queryExecutor.executeNamedQuery("SubDivisonCount", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeGetRolesForMunicipality(Pageable pageable, String role, Integer municipality) {
        Map params = new HashMap(2);

        params.put("role", role);
        params.put("municipality", municipality);

        return queryExecutor.executeNamedQuery("GetRolesForMunicipality", params, Object.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public int executeInsertGroups(String groupName, String groupDescription, Integer municipalityId) {
        Map params = new HashMap(3);

        params.put("GroupName", groupName);
        params.put("GroupDescription", groupDescription);
        params.put("MunicipalityId", municipalityId);

        return queryExecutor.executeNamedQueryForUpdate("InsertGroups", params);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public int executeAddGIStoForms(Integer gisrecordId, String relatedFormGuid, Integer addedBy, Timestamp addedTime) {
        Map params = new HashMap(4);

        params.put("GISRecordId", gisrecordId);
        params.put("RelatedFormGUID", relatedFormGuid);
        params.put("AddedBy", addedBy);
        params.put("AddedTime", addedTime);

        return queryExecutor.executeNamedQueryForUpdate("AddGIStoForms", params);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public int executeAddMemeberToProject(String relatedProjectGuid, Timestamp projectSharedOn, Integer projectSharedWith, Integer projectSharedBy) {
        Map params = new HashMap(4);

        params.put("RelatedProjectGUID", relatedProjectGuid);
        params.put("ProjectSharedOn", projectSharedOn);
        params.put("ProjectSharedWith", projectSharedWith);
        params.put("ProjectSharedBy", projectSharedBy);

        return queryExecutor.executeNamedQueryForUpdate("AddMemeberToProject", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeVendorsLinkedWithForm(Pageable pageable, String relatedFormGuid) {
        Map params = new HashMap(1);

        params.put("RelatedFormGUID", relatedFormGuid);

        return queryExecutor.executeNamedQuery("VendorsLinkedWithForm", params, Object.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public int executeResetPasswordWithTokenForUser(Integer userid, String token) {
        Map params = new HashMap(2);

        params.put("userid", userid);
        params.put("token", token);

        return queryExecutor.executeNamedQueryForUpdate("resetPasswordWithTokenForUser", params);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public int executeUpdateRoleForMunicipality(String role, Integer municipality, Integer user) {
        Map params = new HashMap(3);

        params.put("role", role);
        params.put("municipality", municipality);
        params.put("user", user);

        return queryExecutor.executeNamedQueryForUpdate("UpdateRoleForMunicipality", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeGetFormsForMunicpality(Pageable pageable, Integer municipalityId) {
        Map params = new HashMap(1);

        params.put("MunicipalityId", municipalityId);

        return queryExecutor.executeNamedQuery("GetFormsForMunicpality", params, Object.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public int executeUpdateProcessOwnersForGUID(Integer assignedToGroupId, String guid) {
        Map params = new HashMap(2);

        params.put("AssignedToGroupId", assignedToGroupId);
        params.put("GUID", guid);

        return queryExecutor.executeNamedQueryForUpdate("UpdateProcessOwnersForGUID", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeSearchFormByVendor(Pageable pageable, Timestamp startd, Timestamp endd, Integer formTypeId, Integer municipalityId, Boolean closed, Integer vendorId) {
        Map params = new HashMap(6);

        params.put("startd", startd);
        params.put("endd", endd);
        params.put("FormTypeId", formTypeId);
        params.put("municipalityId", municipalityId);
        params.put("closed", closed);
        params.put("vendorId", vendorId);

        return queryExecutor.executeNamedQuery("SearchFormByVendor", params, Object.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public int executeUpdateProjectDescription(String projectDescription, String project) {
        Map params = new HashMap(2);

        params.put("ProjectDescription", projectDescription);
        params.put("project", project);

        return queryExecutor.executeNamedQueryForUpdate("UpdateProjectDescription", params);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public int executeDeleteFromVendorUsers(Integer user, Integer vendor) {
        Map params = new HashMap(2);

        params.put("user", user);
        params.put("vendor", vendor);

        return queryExecutor.executeNamedQueryForUpdate("DeleteFromVendorUsers", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeCheckingUserWithInVendorUsers(Pageable pageable, Integer user, Integer vendor) {
        Map params = new HashMap(2);

        params.put("user", user);
        params.put("vendor", vendor);

        return queryExecutor.executeNamedQuery("CheckingUserWithInVendorUsers", params, Object.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public int executeUpdateVendorStatus(Timestamp dateApproved, String approvedBy, Timestamp expiresDate, String approvalStatus, String reviewer, Integer municipality, Integer vendor) {
        Map params = new HashMap(7);

        params.put("DateApproved", dateApproved);
        params.put("ApprovedBy", approvedBy);
        params.put("ExpiresDate", expiresDate);
        params.put("ApprovalStatus", approvalStatus);
        params.put("Reviewer", reviewer);
        params.put("municipality", municipality);
        params.put("vendor", vendor);

        return queryExecutor.executeNamedQueryForUpdate("UpdateVendorStatus", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeUserSubscriptionsCount(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("userSubscriptionsCount", params, Object.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public int executeInsertFormMessage(Integer userId, String relatedFormGuid, String message, Boolean municipalityMessage) {
        Map params = new HashMap(4);

        params.put("UserId", userId);
        params.put("RelatedFormGUID", relatedFormGuid);
        params.put("Message", message);
        params.put("MunicipalityMessage", municipalityMessage);

        return queryExecutor.executeNamedQueryForUpdate("InsertFormMessage", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeProjectsForUsersAndSharedWith(Pageable pageable, Boolean active, Integer creatorUser, Integer sharedWithUser, Long municipalityId) {
        Map params = new HashMap(4);

        params.put("Active", active);
        params.put("creatorUser", creatorUser);
        params.put("sharedWithUser", sharedWithUser);
        params.put("municipalityId", municipalityId);

        return queryExecutor.executeNamedQuery("ProjectsForUsersAndSharedWith", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeFormsTaggedWithGISRecords(Pageable pageable, Boolean codeEnforcement, Integer gisrecordId) {
        Map params = new HashMap(2);

        params.put("codeEnforcement", codeEnforcement);
        params.put("GISRecordId", gisrecordId);

        return queryExecutor.executeNamedQuery("FormsTaggedWithGISRecords", params, Object.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public int executeUpdateNewPassword(String password, Integer newUser) {
        Map params = new HashMap(2);

        params.put("password", password);
        params.put("newUser", newUser);

        return queryExecutor.executeNamedQueryForUpdate("UpdateNewPassword", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeCountOfVendorUsers(Pageable pageable, Integer vendor) {
        Map params = new HashMap(1);

        params.put("vendor", vendor);

        return queryExecutor.executeNamedQuery("CountOfVendorUsers", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeGetRecentMessageId(Pageable pageable, String form, Timestamp postedAt) {
        Map params = new HashMap(2);

        params.put("form", form);
        params.put("PostedAt", postedAt);

        return queryExecutor.executeNamedQuery("GetRecentMessageId", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeAdminsMunicipalities(Pageable pageable, Integer user) {
        Map params = new HashMap(1);

        params.put("user", user);

        return queryExecutor.executeNamedQuery("AdminsMunicipalities", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeStandardUserMunicipalites(Pageable pageable, Integer user) {
        Map params = new HashMap(1);

        params.put("USER", user);

        return queryExecutor.executeNamedQuery("StandardUserMunicipalites", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeFormsCountForMunicipalities(Pageable pageable, Integer municipalityId) {
        Map params = new HashMap(1);

        params.put("MunicipalityId", municipalityId);

        return queryExecutor.executeNamedQuery("FormsCountForMunicipalities", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeGetFormTypeFieldsByTypeId(Pageable pageable, Long formTypeId) {
        Map params = new HashMap(1);

        params.put("formTypeId", formTypeId);

        return queryExecutor.executeNamedQuery("getFormTypeFieldsByTypeId", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeCountOfProjectsForUsersAndSharedWithByMunicipality(Pageable pageable, Integer municipalityId, Boolean active, Integer creatorUser, Integer sharedWithUser) {
        Map params = new HashMap(4);

        params.put("municipalityId", municipalityId);
        params.put("Active", active);
        params.put("creatorUser", creatorUser);
        params.put("sharedWithUser", sharedWithUser);

        return queryExecutor.executeNamedQuery("CountOfProjectsForUsersAndSharedWithByMunicipality", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeFormsByCategory(Pageable pageable, Integer formCategory, Boolean isActive, Boolean municipalityInternalForm) {
        Map params = new HashMap(3);

        params.put("formCategory", formCategory);
        params.put("isActive", isActive);
        params.put("municipalityInternalForm", municipalityInternalForm);

        return queryExecutor.executeNamedQuery("FormsByCategory", params, Object.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public int executeUpdateAsCXVendorAdmin(String role, Integer municipality, Integer user) {
        Map params = new HashMap(3);

        params.put("role", role);
        params.put("municipality", municipality);
        params.put("user", user);

        return queryExecutor.executeNamedQueryForUpdate("UpdateAsCXVendorAdmin", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeCountOfCompnayFormsByVendorId(Pageable pageable, Boolean closed, Integer vendorId) {
        Map params = new HashMap(2);

        params.put("closed", closed);
        params.put("vendorId", vendorId);

        return queryExecutor.executeNamedQuery("CountOfCompnayFormsByVendorId", params, Object.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public int executeSetPrimaryVendorStatusForFormandVendor(Boolean pv, String form, Integer vendor) {
        Map params = new HashMap(3);

        params.put("pv", pv);
        params.put("form", form);
        params.put("vendor", vendor);

        return queryExecutor.executeNamedQueryForUpdate("SetPrimaryVendorStatusForFormandVendor", params);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public int executeDeleteCategoryMapping(Integer form) {
        Map params = new HashMap(1);

        params.put("form", form);

        return queryExecutor.executeNamedQueryForUpdate("DeleteCategoryMapping", params);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public int executeAddingVendorsToForm(String relatedFormGuid, Timestamp sharedOn, Integer vendorId) {
        Map params = new HashMap(3);

        params.put("RelatedFormGUID", relatedFormGuid);
        params.put("SharedOn", sharedOn);
        params.put("VendorId", vendorId);

        return queryExecutor.executeNamedQueryForUpdate("AddingVendorsToForm", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeUserCount(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("UserCount", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeCheckIfCompanyUserIsVendorAdmin(Pageable pageable, Integer user, Integer vendor) {
        Map params = new HashMap(2);

        params.put("user", user);
        params.put("vendor", vendor);

        return queryExecutor.executeNamedQuery("CheckIfCompanyUserIsVendorAdmin", params, Object.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public int executeInsertUserPreference(Integer userId, Integer preferenceId) {
        Map params = new HashMap(2);

        params.put("UserId", userId);
        params.put("PreferenceId", preferenceId);

        return queryExecutor.executeNamedQueryForUpdate("InsertUserPreference", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeUserSubscriptionsCountForMunicipality(Pageable pageable, Integer municipalityId) {
        Map params = new HashMap(1);

        params.put("municipalityId", municipalityId);

        return queryExecutor.executeNamedQuery("userSubscriptionsCountForMunicipality", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeCountOfFormsForMunicipality(Pageable pageable, Integer municipalityId) {
        Map params = new HashMap(1);

        params.put("MunicipalityId", municipalityId);

        return queryExecutor.executeNamedQuery("CountOfFormsForMunicipality", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeCountOfUserForms(Pageable pageable, Boolean codeEnforcement, Boolean closed, Integer creatorUser, Integer sharedWithUser, Integer municipalityId) {
        Map params = new HashMap(5);

        params.put("codeEnforcement", codeEnforcement);
        params.put("closed", closed);
        params.put("creatorUser", creatorUser);
        params.put("sharedWithUser", sharedWithUser);
        params.put("municipalityId", municipalityId);

        return queryExecutor.executeNamedQuery("CountOfUserForms", params, Object.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public int executeUpdateDevFormDetailsForCXAdmin(String report, String formTableName, Integer form) {
        Map params = new HashMap(3);

        params.put("Report", report);
        params.put("FormTableName", formTableName);
        params.put("form", form);

        return queryExecutor.executeNamedQueryForUpdate("UpdateDevFormDetailsForCXAdmin", params);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public int executeUpdateMunicipalityInfo(String mn, String em, String ph, String ad1, String ad2, Integer st, String ct, String pc, Integer municipality) {
        Map params = new HashMap(9);

        params.put("mn", mn);
        params.put("em", em);
        params.put("ph", ph);
        params.put("ad1", ad1);
        params.put("ad2", ad2);
        params.put("st", st);
        params.put("ct", ct);
        params.put("pc", pc);
        params.put("municipality", municipality);

        return queryExecutor.executeNamedQueryForUpdate("UpdateMunicipalityInfo", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeCountOfUserFormsForMunicipality(Pageable pageable, Integer municipalityId, Boolean closed, Integer creatorUser, Integer sharedWithUser) {
        Map params = new HashMap(4);

        params.put("MunicipalityId", municipalityId);
        params.put("closed", closed);
        params.put("creatorUser", creatorUser);
        params.put("sharedWithUser", sharedWithUser);

        return queryExecutor.executeNamedQuery("CountOfUserFormsForMunicipality", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeCountOfAllProjectsForUsersAndSharedWith(Pageable pageable, Boolean active, Integer municipalityId, Integer creatorUser, Integer sharedWithUser) {
        Map params = new HashMap(4);

        params.put("Active", active);
        params.put("municipalityId", municipalityId);
        params.put("creatorUser", creatorUser);
        params.put("sharedWithUser", sharedWithUser);

        return queryExecutor.executeNamedQuery("CountOfAllProjectsForUsersAndSharedWith", params, Object.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public int executeInsertTagForMessage(Integer formMessageId, Integer taggedPersonId) {
        Map params = new HashMap(2);

        params.put("FormMessageId", formMessageId);
        params.put("TaggedPersonId", taggedPersonId);

        return queryExecutor.executeNamedQueryForUpdate("InsertTagForMessage", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeManualFeeTypeCountForMunicipality(Pageable pageable, Integer municipalityId) {
        Map params = new HashMap(1);

        params.put("MunicipalityId", municipalityId);

        return queryExecutor.executeNamedQuery("ManualFeeTypeCountForMunicipality", params, Object.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public int executeInsertSubscription(Integer userId, Integer municipalityId, String dateSubscribed) {
        Map params = new HashMap(3);

        params.put("UserId", userId);
        params.put("MunicipalityId", municipalityId);
        params.put("DateSubscribed", dateSubscribed);

        return queryExecutor.executeNamedQueryForUpdate("InsertSubscription", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeEmployeesMunicipalities(Pageable pageable, Integer user) {
        Map params = new HashMap(1);

        params.put("user", user);

        return queryExecutor.executeNamedQuery("EmployeesMunicipalities", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeGetWriteAccessGroupMembersByFormGUID(Pageable pageable, String formGuid) {
        Map params = new HashMap(1);

        params.put("FormGUID", formGuid);

        return queryExecutor.executeNamedQuery("GetWriteAccessGroupMembersByFormGUID", params, Object.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public int executeRemoveVendorFromMasterForms(String hb) {
        Map params = new HashMap(1);

        params.put("hb", hb);

        return queryExecutor.executeNamedQueryForUpdate("RemoveVendorFromMasterForms", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeProjectForms(Pageable pageable, String project) {
        Map params = new HashMap(1);

        params.put("project", project);

        return queryExecutor.executeNamedQuery("ProjectForms", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeMunicipalityProjects(Pageable pageable, Boolean active, Integer municipalityId) {
        Map params = new HashMap(2);

        params.put("Active", active);
        params.put("MunicipalityId", municipalityId);

        return queryExecutor.executeNamedQuery("MunicipalityProjects", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeFormsForUsersAndShared(Pageable pageable, Boolean codeEnforcement, Boolean closed, Integer creatorUser, Integer sharedWithUser, Long municipalityId) {
        Map params = new HashMap(5);

        params.put("codeEnforcement", codeEnforcement);
        params.put("closed", closed);
        params.put("creatorUser", creatorUser);
        params.put("sharedWithUser", sharedWithUser);
        params.put("municipalityId", municipalityId);

        return queryExecutor.executeNamedQuery("FormsForUsersAndShared", params, Object.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public int executeInsertNewRole(String roleName, Integer municipalityId, String description, Integer userId) {
        Map params = new HashMap(4);

        params.put("RoleName", roleName);
        params.put("MunicipalityId", municipalityId);
        params.put("Description", description);
        params.put("UserId", userId);

        return queryExecutor.executeNamedQueryForUpdate("InsertNewRole", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeBannedDetails(Pageable pageable, String emailid) {
        Map params = new HashMap(1);

        params.put("emailid", emailid);

        return queryExecutor.executeNamedQuery("bannedDetails", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeGetVendorApprovalListByMunicipality(Pageable pageable, String approvalStatus, Integer municipalityId, Boolean a) {
        Map params = new HashMap(3);

        params.put("ApprovalStatus", approvalStatus);
        params.put("MunicipalityId", municipalityId);
        params.put("a", a);

        return queryExecutor.executeNamedQuery("GetVendorApprovalListByMunicipality", params, Object.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public int executeDeleteMunicipalityGroup(Integer municipalityGroupId, Integer userId) {
        Map params = new HashMap(2);

        params.put("MunicipalityGroupId", municipalityGroupId);
        params.put("UserId", userId);

        return queryExecutor.executeNamedQueryForUpdate("deleteMunicipalityGroup", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeVerifyPasswordResetToken(Pageable pageable, String token) {
        Map params = new HashMap(1);

        params.put("token", token);

        return queryExecutor.executeNamedQuery("verifyPasswordResetToken", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeGetListofGroupName(Pageable pageable, List<Integer> municipalityGroupId, Integer municipalityId) {
        Map params = new HashMap(2);

        params.put("MunicipalityGroupID", municipalityGroupId);
        params.put("MunicipalityID", municipalityId);

        return queryExecutor.executeNamedQuery("getListofGroupName", params, Object.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public int executeResetPasswordForUser(String newPassword, String token) {
        Map params = new HashMap(2);

        params.put("newPassword", newPassword);
        params.put("token", token);

        return queryExecutor.executeNamedQueryForUpdate("resetPasswordForUser", params);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public int executeUpdateUserPreferences(Integer preferenceId, Integer user) {
        Map params = new HashMap(2);

        params.put("PreferenceId", preferenceId);
        params.put("user", user);

        return queryExecutor.executeNamedQueryForUpdate("UpdateUserPreferences", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeGetOwnersForGisRecords(Pageable pageable, List<Integer> gisRecordIds) {
        Map params = new HashMap(1);

        params.put("gisRecordIds", gisRecordIds);

        return queryExecutor.executeNamedQuery("getOwnersForGisRecords", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeFetchRolesForUserWithMunicipality(Pageable pageable, Integer user, Integer municipality) {
        Map params = new HashMap(2);

        params.put("user", user);
        params.put("municipality", municipality);

        return queryExecutor.executeNamedQuery("FetchRolesForUserWithMunicipality", params, Object.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public int executeSetModifiedDateForProject(Timestamp dateModified, String project) {
        Map params = new HashMap(2);

        params.put("DateModified", dateModified);
        params.put("project", project);

        return queryExecutor.executeNamedQueryForUpdate("SetModifiedDateForProject", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeCompanyFormsByVendorId(Pageable pageable, Boolean closed, Integer vendorId) {
        Map params = new HashMap(2);

        params.put("closed", closed);
        params.put("vendorId", vendorId);

        return queryExecutor.executeNamedQuery("CompanyFormsByVendorId", params, Object.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public int executeUpdateInfoFromMyProfile(String fn, String ln, String em, String ph, String ad1, String ad2, Integer st, String ct, String ctry, String pc, Integer user) {
        Map params = new HashMap(11);

        params.put("fn", fn);
        params.put("ln", ln);
        params.put("em", em);
        params.put("ph", ph);
        params.put("ad1", ad1);
        params.put("ad2", ad2);
        params.put("st", st);
        params.put("ct", ct);
        params.put("ctry", ctry);
        params.put("pc", pc);
        params.put("user", user);

        return queryExecutor.executeNamedQueryForUpdate("UpdateInfoFromMyProfile", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeVendorsCountForMunicipalities(Pageable pageable, Integer municipalityId) {
        Map params = new HashMap(1);

        params.put("MunicipalityId", municipalityId);

        return queryExecutor.executeNamedQuery("VendorsCountForMunicipalities", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeGetRolesForUser(Pageable pageable, Integer userId) {
        Map params = new HashMap(1);

        params.put("userId", userId);

        return queryExecutor.executeNamedQuery("getRolesForUser", params, Object.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeGetGis2formsByForm(Pageable pageable, String relatedFormGuid) {
        Map params = new HashMap(1);

        params.put("relatedFormGuid", relatedFormGuid);

        return queryExecutor.executeNamedQuery("GetGis2formsByForm", params, Object.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public int executeDeleteExistingSubscriptionsForUser(Integer user) {
        Map params = new HashMap(1);

        params.put("user", user);

        return queryExecutor.executeNamedQueryForUpdate("DeleteExistingSubscriptionsForUser", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Object> executeMunicipalityCount(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("MunicipalityCount", params, Object.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public int executeInsertProjectMessage(Integer userId, String relatedProjectGuid, String message, Timestamp postedAt, Boolean municipalityMessage) {
        Map params = new HashMap(5);

        params.put("UserId", userId);
        params.put("RelatedProjectGUID", relatedProjectGuid);
        params.put("Message", message);
        params.put("PostedAt", postedAt);
        params.put("MunicipalityMessage", municipalityMessage);

        return queryExecutor.executeNamedQueryForUpdate("InsertProjectMessage", params);
    }

}


