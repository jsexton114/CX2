/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.civicxpress.cx2.CaseTypes;
import com.civicxpress.cx2.MasterCases;


/**
 * ServiceImpl object for domain model class CaseTypes.
 *
 * @see CaseTypes
 */
@Service("cx2.CaseTypesService")
public class CaseTypesServiceImpl implements CaseTypesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CaseTypesServiceImpl.class);

    @Autowired
	@Qualifier("cx2.MasterCasesService")
	private MasterCasesService masterCasesService;

    @Autowired
    @Qualifier("cx2.CaseTypesDao")
    private WMGenericDao<CaseTypes, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<CaseTypes, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
	public CaseTypes create(CaseTypes caseTypes) {
        LOGGER.debug("Creating a new CaseTypes with information: {}", caseTypes);
        CaseTypes caseTypesCreated = this.wmGenericDao.create(caseTypes);
        if(caseTypesCreated.getMasterCaseses() != null) {
            for(MasterCases masterCasese : caseTypesCreated.getMasterCaseses()) {
                masterCasese.setCaseTypes(caseTypesCreated);
                LOGGER.debug("Creating a new child MasterCases with information: {}", masterCasese);
                masterCasesService.create(masterCasese);
            }
        }
        return caseTypesCreated;
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public CaseTypes getById(Integer casetypesId) throws EntityNotFoundException {
        LOGGER.debug("Finding CaseTypes by id: {}", casetypesId);
        CaseTypes caseTypes = this.wmGenericDao.findById(casetypesId);
        if (caseTypes == null){
            LOGGER.debug("No CaseTypes found with id: {}", casetypesId);
            throw new EntityNotFoundException(String.valueOf(casetypesId));
        }
        return caseTypes;
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public CaseTypes findById(Integer casetypesId) {
        LOGGER.debug("Finding CaseTypes by id: {}", casetypesId);
        return this.wmGenericDao.findById(casetypesId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "cx2TransactionManager")
	@Override
	public CaseTypes update(CaseTypes caseTypes) throws EntityNotFoundException {
        LOGGER.debug("Updating CaseTypes with information: {}", caseTypes);
        this.wmGenericDao.update(caseTypes);

        Integer casetypesId = caseTypes.getId();

        return this.wmGenericDao.findById(casetypesId);
    }

    @Transactional(value = "cx2TransactionManager")
	@Override
	public CaseTypes delete(Integer casetypesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting CaseTypes with id: {}", casetypesId);
        CaseTypes deleted = this.wmGenericDao.findById(casetypesId);
        if (deleted == null) {
            LOGGER.debug("No CaseTypes found with id: {}", casetypesId);
            throw new EntityNotFoundException(String.valueOf(casetypesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public Page<CaseTypes> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all CaseTypes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<CaseTypes> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all CaseTypes");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service cx2 for table CaseTypes to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<MasterCases> findAssociatedMasterCaseses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated masterCaseses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("caseTypes.id = '" + id + "'");

        return masterCasesService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service MasterCasesService instance
	 */
	protected void setMasterCasesService(MasterCasesService service) {
        this.masterCasesService = service;
    }

}

