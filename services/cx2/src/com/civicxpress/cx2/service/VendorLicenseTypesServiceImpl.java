/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.civicxpress.cx2.VendorLicenseTypes;
import com.civicxpress.cx2.VendorLicenses;


/**
 * ServiceImpl object for domain model class VendorLicenseTypes.
 *
 * @see VendorLicenseTypes
 */
@Service("cx2.VendorLicenseTypesService")
public class VendorLicenseTypesServiceImpl implements VendorLicenseTypesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VendorLicenseTypesServiceImpl.class);

    @Autowired
	@Qualifier("cx2.VendorLicensesService")
	private VendorLicensesService vendorLicensesService;

    @Autowired
    @Qualifier("cx2.VendorLicenseTypesDao")
    private WMGenericDao<VendorLicenseTypes, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<VendorLicenseTypes, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
	public VendorLicenseTypes create(VendorLicenseTypes vendorLicenseTypes) {
        LOGGER.debug("Creating a new VendorLicenseTypes with information: {}", vendorLicenseTypes);
        VendorLicenseTypes vendorLicenseTypesCreated = this.wmGenericDao.create(vendorLicenseTypes);
        if(vendorLicenseTypesCreated.getVendorLicenseses() != null) {
            for(VendorLicenses vendorLicensese : vendorLicenseTypesCreated.getVendorLicenseses()) {
                vendorLicensese.setVendorLicenseTypes(vendorLicenseTypesCreated);
                LOGGER.debug("Creating a new child VendorLicenses with information: {}", vendorLicensese);
                vendorLicensesService.create(vendorLicensese);
            }
        }
        return vendorLicenseTypesCreated;
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public VendorLicenseTypes getById(Integer vendorlicensetypesId) throws EntityNotFoundException {
        LOGGER.debug("Finding VendorLicenseTypes by id: {}", vendorlicensetypesId);
        VendorLicenseTypes vendorLicenseTypes = this.wmGenericDao.findById(vendorlicensetypesId);
        if (vendorLicenseTypes == null){
            LOGGER.debug("No VendorLicenseTypes found with id: {}", vendorlicensetypesId);
            throw new EntityNotFoundException(String.valueOf(vendorlicensetypesId));
        }
        return vendorLicenseTypes;
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public VendorLicenseTypes findById(Integer vendorlicensetypesId) {
        LOGGER.debug("Finding VendorLicenseTypes by id: {}", vendorlicensetypesId);
        return this.wmGenericDao.findById(vendorlicensetypesId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "cx2TransactionManager")
	@Override
	public VendorLicenseTypes update(VendorLicenseTypes vendorLicenseTypes) throws EntityNotFoundException {
        LOGGER.debug("Updating VendorLicenseTypes with information: {}", vendorLicenseTypes);
        this.wmGenericDao.update(vendorLicenseTypes);

        Integer vendorlicensetypesId = vendorLicenseTypes.getId();

        return this.wmGenericDao.findById(vendorlicensetypesId);
    }

    @Transactional(value = "cx2TransactionManager")
	@Override
	public VendorLicenseTypes delete(Integer vendorlicensetypesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting VendorLicenseTypes with id: {}", vendorlicensetypesId);
        VendorLicenseTypes deleted = this.wmGenericDao.findById(vendorlicensetypesId);
        if (deleted == null) {
            LOGGER.debug("No VendorLicenseTypes found with id: {}", vendorlicensetypesId);
            throw new EntityNotFoundException(String.valueOf(vendorlicensetypesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public Page<VendorLicenseTypes> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VendorLicenseTypes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<VendorLicenseTypes> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VendorLicenseTypes");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service cx2 for table VendorLicenseTypes to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<VendorLicenses> findAssociatedVendorLicenseses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated vendorLicenseses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("vendorLicenseTypes.id = '" + id + "'");

        return vendorLicensesService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VendorLicensesService instance
	 */
	protected void setVendorLicensesService(VendorLicensesService service) {
        this.vendorLicensesService = service;
    }

}

