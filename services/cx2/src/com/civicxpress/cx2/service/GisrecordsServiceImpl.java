/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.civicxpress.cx2.Fees;
import com.civicxpress.cx2.Gis2forms;
import com.civicxpress.cx2.GisTransaction;
import com.civicxpress.cx2.Giscontacts;
import com.civicxpress.cx2.Gisrecords;
import com.civicxpress.cx2.InspectionGis;
import com.civicxpress.cx2.MasterInspections;
import com.civicxpress.cx2.ProjectGisrecords;


/**
 * ServiceImpl object for domain model class Gisrecords.
 *
 * @see Gisrecords
 */
@Service("cx2.GisrecordsService")
public class GisrecordsServiceImpl implements GisrecordsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(GisrecordsServiceImpl.class);

    @Autowired
	@Qualifier("cx2.Gis2formsService")
	private Gis2formsService gis2formsService;

    @Autowired
	@Qualifier("cx2.FeesService")
	private FeesService feesService;

    @Autowired
	@Qualifier("cx2.GisTransactionService")
	private GisTransactionService gisTransactionService;

    @Autowired
	@Qualifier("cx2.InspectionGisService")
	private InspectionGisService inspectionGisService;

    @Autowired
	@Qualifier("cx2.GiscontactsService")
	private GiscontactsService giscontactsService;

    @Autowired
	@Qualifier("cx2.MasterInspectionsService")
	private MasterInspectionsService masterInspectionsService;

    @Autowired
	@Qualifier("cx2.ProjectGisrecordsService")
	private ProjectGisrecordsService projectGisrecordsService;

    @Autowired
    @Qualifier("cx2.GisrecordsDao")
    private WMGenericDao<Gisrecords, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Gisrecords, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
	public Gisrecords create(Gisrecords gisrecords) {
        LOGGER.debug("Creating a new Gisrecords with information: {}", gisrecords);
        Gisrecords gisrecordsCreated = this.wmGenericDao.create(gisrecords);
        if(gisrecordsCreated.getFeeses() != null) {
            for(Fees feese : gisrecordsCreated.getFeeses()) {
                feese.setGisrecords(gisrecordsCreated);
                LOGGER.debug("Creating a new child Fees with information: {}", feese);
                feesService.create(feese);
            }
        }

        if(gisrecordsCreated.getGis2formses() != null) {
            for(Gis2forms gis2formse : gisrecordsCreated.getGis2formses()) {
                gis2formse.setGisrecords(gisrecordsCreated);
                LOGGER.debug("Creating a new child Gis2forms with information: {}", gis2formse);
                gis2formsService.create(gis2formse);
            }
        }

        if(gisrecordsCreated.getGiscontactses() != null) {
            for(Giscontacts giscontactse : gisrecordsCreated.getGiscontactses()) {
                giscontactse.setGisrecords(gisrecordsCreated);
                LOGGER.debug("Creating a new child Giscontacts with information: {}", giscontactse);
                giscontactsService.create(giscontactse);
            }
        }

        if(gisrecordsCreated.getGisTransactions() != null) {
            for(GisTransaction gisTransaction : gisrecordsCreated.getGisTransactions()) {
                gisTransaction.setGisrecords(gisrecordsCreated);
                LOGGER.debug("Creating a new child GisTransaction with information: {}", gisTransaction);
                gisTransactionService.create(gisTransaction);
            }
        }

        if(gisrecordsCreated.getInspectionGises() != null) {
            for(InspectionGis inspectionGise : gisrecordsCreated.getInspectionGises()) {
                inspectionGise.setGisrecords(gisrecordsCreated);
                LOGGER.debug("Creating a new child InspectionGis with information: {}", inspectionGise);
                inspectionGisService.create(inspectionGise);
            }
        }

        if(gisrecordsCreated.getMasterInspectionses() != null) {
            for(MasterInspections masterInspectionse : gisrecordsCreated.getMasterInspectionses()) {
                masterInspectionse.setGisrecords(gisrecordsCreated);
                LOGGER.debug("Creating a new child MasterInspections with information: {}", masterInspectionse);
                masterInspectionsService.create(masterInspectionse);
            }
        }

        if(gisrecordsCreated.getProjectGisrecordses() != null) {
            for(ProjectGisrecords projectGisrecordse : gisrecordsCreated.getProjectGisrecordses()) {
                projectGisrecordse.setGisrecords(gisrecordsCreated);
                LOGGER.debug("Creating a new child ProjectGisrecords with information: {}", projectGisrecordse);
                projectGisrecordsService.create(projectGisrecordse);
            }
        }
        return gisrecordsCreated;
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public Gisrecords getById(Integer gisrecordsId) throws EntityNotFoundException {
        LOGGER.debug("Finding Gisrecords by id: {}", gisrecordsId);
        Gisrecords gisrecords = this.wmGenericDao.findById(gisrecordsId);
        if (gisrecords == null){
            LOGGER.debug("No Gisrecords found with id: {}", gisrecordsId);
            throw new EntityNotFoundException(String.valueOf(gisrecordsId));
        }
        return gisrecords;
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public Gisrecords findById(Integer gisrecordsId) {
        LOGGER.debug("Finding Gisrecords by id: {}", gisrecordsId);
        return this.wmGenericDao.findById(gisrecordsId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "cx2TransactionManager")
	@Override
	public Gisrecords update(Gisrecords gisrecords) throws EntityNotFoundException {
        LOGGER.debug("Updating Gisrecords with information: {}", gisrecords);
        this.wmGenericDao.update(gisrecords);

        Integer gisrecordsId = gisrecords.getId();

        return this.wmGenericDao.findById(gisrecordsId);
    }

    @Transactional(value = "cx2TransactionManager")
	@Override
	public Gisrecords delete(Integer gisrecordsId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Gisrecords with id: {}", gisrecordsId);
        Gisrecords deleted = this.wmGenericDao.findById(gisrecordsId);
        if (deleted == null) {
            LOGGER.debug("No Gisrecords found with id: {}", gisrecordsId);
            throw new EntityNotFoundException(String.valueOf(gisrecordsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public Page<Gisrecords> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Gisrecords");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Gisrecords> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Gisrecords");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service cx2 for table Gisrecords to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Fees> findAssociatedFeeses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated feeses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("gisrecords.id = '" + id + "'");

        return feesService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Gis2forms> findAssociatedGis2formses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated gis2formses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("gisrecords.id = '" + id + "'");

        return gis2formsService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Giscontacts> findAssociatedGiscontactses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated giscontactses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("gisrecords.id = '" + id + "'");

        return giscontactsService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<GisTransaction> findAssociatedGisTransactions(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated gisTransactions");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("gisrecords.id = '" + id + "'");

        return gisTransactionService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<InspectionGis> findAssociatedInspectionGises(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated inspectionGises");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("gisrecords.id = '" + id + "'");

        return inspectionGisService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<MasterInspections> findAssociatedMasterInspectionses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated masterInspectionses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("gisrecords.id = '" + id + "'");

        return masterInspectionsService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<ProjectGisrecords> findAssociatedProjectGisrecordses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated projectGisrecordses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("gisrecords.id = '" + id + "'");

        return projectGisrecordsService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Gis2formsService instance
	 */
	protected void setGis2formsService(Gis2formsService service) {
        this.gis2formsService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service FeesService instance
	 */
	protected void setFeesService(FeesService service) {
        this.feesService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service GisTransactionService instance
	 */
	protected void setGisTransactionService(GisTransactionService service) {
        this.gisTransactionService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service InspectionGisService instance
	 */
	protected void setInspectionGisService(InspectionGisService service) {
        this.inspectionGisService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service GiscontactsService instance
	 */
	protected void setGiscontactsService(GiscontactsService service) {
        this.giscontactsService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service MasterInspectionsService instance
	 */
	protected void setMasterInspectionsService(MasterInspectionsService service) {
        this.masterInspectionsService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ProjectGisrecordsService instance
	 */
	protected void setProjectGisrecordsService(ProjectGisrecordsService service) {
        this.projectGisrecordsService = service;
    }

}

