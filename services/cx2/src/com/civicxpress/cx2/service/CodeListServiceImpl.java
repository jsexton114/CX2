/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.civicxpress.cx2.CodeList;


/**
 * ServiceImpl object for domain model class CodeList.
 *
 * @see CodeList
 */
@Service("cx2.CodeListService")
public class CodeListServiceImpl implements CodeListService {

    private static final Logger LOGGER = LoggerFactory.getLogger(CodeListServiceImpl.class);


    @Autowired
    @Qualifier("cx2.CodeListDao")
    private WMGenericDao<CodeList, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<CodeList, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
	public CodeList create(CodeList codeList) {
        LOGGER.debug("Creating a new CodeList with information: {}", codeList);
        CodeList codeListCreated = this.wmGenericDao.create(codeList);
        return codeListCreated;
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public CodeList getById(Integer codelistId) throws EntityNotFoundException {
        LOGGER.debug("Finding CodeList by id: {}", codelistId);
        CodeList codeList = this.wmGenericDao.findById(codelistId);
        if (codeList == null){
            LOGGER.debug("No CodeList found with id: {}", codelistId);
            throw new EntityNotFoundException(String.valueOf(codelistId));
        }
        return codeList;
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public CodeList findById(Integer codelistId) {
        LOGGER.debug("Finding CodeList by id: {}", codelistId);
        return this.wmGenericDao.findById(codelistId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "cx2TransactionManager")
	@Override
	public CodeList update(CodeList codeList) throws EntityNotFoundException {
        LOGGER.debug("Updating CodeList with information: {}", codeList);
        this.wmGenericDao.update(codeList);

        Integer codelistId = codeList.getCodeId();

        return this.wmGenericDao.findById(codelistId);
    }

    @Transactional(value = "cx2TransactionManager")
	@Override
	public CodeList delete(Integer codelistId) throws EntityNotFoundException {
        LOGGER.debug("Deleting CodeList with id: {}", codelistId);
        CodeList deleted = this.wmGenericDao.findById(codelistId);
        if (deleted == null) {
            LOGGER.debug("No CodeList found with id: {}", codelistId);
            throw new EntityNotFoundException(String.valueOf(codelistId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public Page<CodeList> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all CodeLists");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<CodeList> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all CodeLists");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service cx2 for table CodeList to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }



}

