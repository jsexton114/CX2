/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.civicxpress.cx2.InspectionGis;
import com.civicxpress.cx2.MasterInspections;


/**
 * ServiceImpl object for domain model class MasterInspections.
 *
 * @see MasterInspections
 */
@Service("cx2.MasterInspectionsService")
public class MasterInspectionsServiceImpl implements MasterInspectionsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(MasterInspectionsServiceImpl.class);

    @Autowired
	@Qualifier("cx2.InspectionGisService")
	private InspectionGisService inspectionGisService;

    @Autowired
    @Qualifier("cx2.MasterInspectionsDao")
    private WMGenericDao<MasterInspections, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<MasterInspections, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
	public MasterInspections create(MasterInspections masterInspections) {
        LOGGER.debug("Creating a new MasterInspections with information: {}", masterInspections);
        MasterInspections masterInspectionsCreated = this.wmGenericDao.create(masterInspections);
        if(masterInspectionsCreated.getInspectionGises() != null) {
            for(InspectionGis inspectionGise : masterInspectionsCreated.getInspectionGises()) {
                inspectionGise.setMasterInspections(masterInspectionsCreated);
                LOGGER.debug("Creating a new child InspectionGis with information: {}", inspectionGise);
                inspectionGisService.create(inspectionGise);
            }
        }
        return masterInspectionsCreated;
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public MasterInspections getById(String masterinspectionsId) throws EntityNotFoundException {
        LOGGER.debug("Finding MasterInspections by id: {}", masterinspectionsId);
        MasterInspections masterInspections = this.wmGenericDao.findById(masterinspectionsId);
        if (masterInspections == null){
            LOGGER.debug("No MasterInspections found with id: {}", masterinspectionsId);
            throw new EntityNotFoundException(String.valueOf(masterinspectionsId));
        }
        return masterInspections;
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public MasterInspections findById(String masterinspectionsId) {
        LOGGER.debug("Finding MasterInspections by id: {}", masterinspectionsId);
        return this.wmGenericDao.findById(masterinspectionsId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "cx2TransactionManager")
	@Override
	public MasterInspections update(MasterInspections masterInspections) throws EntityNotFoundException {
        LOGGER.debug("Updating MasterInspections with information: {}", masterInspections);
        this.wmGenericDao.update(masterInspections);

        String masterinspectionsId = masterInspections.getInspectionGuid();

        return this.wmGenericDao.findById(masterinspectionsId);
    }

    @Transactional(value = "cx2TransactionManager")
	@Override
	public MasterInspections delete(String masterinspectionsId) throws EntityNotFoundException {
        LOGGER.debug("Deleting MasterInspections with id: {}", masterinspectionsId);
        MasterInspections deleted = this.wmGenericDao.findById(masterinspectionsId);
        if (deleted == null) {
            LOGGER.debug("No MasterInspections found with id: {}", masterinspectionsId);
            throw new EntityNotFoundException(String.valueOf(masterinspectionsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public Page<MasterInspections> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all MasterInspections");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<MasterInspections> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all MasterInspections");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service cx2 for table MasterInspections to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<InspectionGis> findAssociatedInspectionGises(String inspectionGuid, Pageable pageable) {
        LOGGER.debug("Fetching all associated inspectionGises");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("masterInspections.inspectionGuid = '" + inspectionGuid + "'");

        return inspectionGisService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service InspectionGisService instance
	 */
	protected void setInspectionGisService(InspectionGisService service) {
        this.inspectionGisService = service;
    }

}

