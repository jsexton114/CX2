/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.civicxpress.cx2.MyCart;


/**
 * ServiceImpl object for domain model class MyCart.
 *
 * @see MyCart
 */
@Service("cx2.MyCartService")
public class MyCartServiceImpl implements MyCartService {

    private static final Logger LOGGER = LoggerFactory.getLogger(MyCartServiceImpl.class);


    @Autowired
    @Qualifier("cx2.MyCartDao")
    private WMGenericDao<MyCart, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<MyCart, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
	public MyCart create(MyCart myCart) {
        LOGGER.debug("Creating a new MyCart with information: {}", myCart);
        MyCart myCartCreated = this.wmGenericDao.create(myCart);
        return myCartCreated;
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public MyCart getById(Integer mycartId) throws EntityNotFoundException {
        LOGGER.debug("Finding MyCart by id: {}", mycartId);
        MyCart myCart = this.wmGenericDao.findById(mycartId);
        if (myCart == null){
            LOGGER.debug("No MyCart found with id: {}", mycartId);
            throw new EntityNotFoundException(String.valueOf(mycartId));
        }
        return myCart;
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public MyCart findById(Integer mycartId) {
        LOGGER.debug("Finding MyCart by id: {}", mycartId);
        return this.wmGenericDao.findById(mycartId);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public MyCart getByFeeIdAndUserId(Integer feeId, Integer userId) {
        Map<String, Object> feeIdAndUserIdMap = new HashMap<>();
        feeIdAndUserIdMap.put("feeId", feeId);
        feeIdAndUserIdMap.put("userId", userId);

        LOGGER.debug("Finding MyCart by unique keys: {}", feeIdAndUserIdMap);
        MyCart myCart = this.wmGenericDao.findByUniqueKey(feeIdAndUserIdMap);

        if (myCart == null){
            LOGGER.debug("No MyCart found with given unique key values: {}", feeIdAndUserIdMap);
            throw new EntityNotFoundException(String.valueOf(feeIdAndUserIdMap));
        }

        return myCart;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "cx2TransactionManager")
	@Override
	public MyCart update(MyCart myCart) throws EntityNotFoundException {
        LOGGER.debug("Updating MyCart with information: {}", myCart);
        this.wmGenericDao.update(myCart);

        Integer mycartId = myCart.getId();

        return this.wmGenericDao.findById(mycartId);
    }

    @Transactional(value = "cx2TransactionManager")
	@Override
	public MyCart delete(Integer mycartId) throws EntityNotFoundException {
        LOGGER.debug("Deleting MyCart with id: {}", mycartId);
        MyCart deleted = this.wmGenericDao.findById(mycartId);
        if (deleted == null) {
            LOGGER.debug("No MyCart found with id: {}", mycartId);
            throw new EntityNotFoundException(String.valueOf(mycartId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public Page<MyCart> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all MyCarts");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<MyCart> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all MyCarts");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service cx2 for table MyCart to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }



}

