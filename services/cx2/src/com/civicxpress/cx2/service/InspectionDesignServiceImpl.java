/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.civicxpress.cx2.InspectionCategoryMapping;
import com.civicxpress.cx2.InspectionDesign;
import com.civicxpress.cx2.InspectionOutcome;
import com.civicxpress.cx2.InspectionSequence;
import com.civicxpress.cx2.MasterInspections;


/**
 * ServiceImpl object for domain model class InspectionDesign.
 *
 * @see InspectionDesign
 */
@Service("cx2.InspectionDesignService")
public class InspectionDesignServiceImpl implements InspectionDesignService {

    private static final Logger LOGGER = LoggerFactory.getLogger(InspectionDesignServiceImpl.class);

    @Autowired
	@Qualifier("cx2.InspectionSequenceService")
	private InspectionSequenceService inspectionSequenceService;

    @Autowired
	@Qualifier("cx2.InspectionOutcomeService")
	private InspectionOutcomeService inspectionOutcomeService;

    @Autowired
	@Qualifier("cx2.InspectionCategoryMappingService")
	private InspectionCategoryMappingService inspectionCategoryMappingService;

    @Autowired
	@Qualifier("cx2.MasterInspectionsService")
	private MasterInspectionsService masterInspectionsService;

    @Autowired
    @Qualifier("cx2.InspectionDesignDao")
    private WMGenericDao<InspectionDesign, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<InspectionDesign, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
	public InspectionDesign create(InspectionDesign inspectionDesign) {
        LOGGER.debug("Creating a new InspectionDesign with information: {}", inspectionDesign);
        InspectionDesign inspectionDesignCreated = this.wmGenericDao.create(inspectionDesign);
        if(inspectionDesignCreated.getInspectionOutcomes() != null) {
            for(InspectionOutcome inspectionOutcome : inspectionDesignCreated.getInspectionOutcomes()) {
                inspectionOutcome.setInspectionDesign(inspectionDesignCreated);
                LOGGER.debug("Creating a new child InspectionOutcome with information: {}", inspectionOutcome);
                inspectionOutcomeService.create(inspectionOutcome);
            }
        }

        if(inspectionDesignCreated.getInspectionSequences() != null) {
            for(InspectionSequence inspectionSequence : inspectionDesignCreated.getInspectionSequences()) {
                inspectionSequence.setInspectionDesign(inspectionDesignCreated);
                LOGGER.debug("Creating a new child InspectionSequence with information: {}", inspectionSequence);
                inspectionSequenceService.create(inspectionSequence);
            }
        }

        if(inspectionDesignCreated.getMasterInspectionses() != null) {
            for(MasterInspections masterInspectionse : inspectionDesignCreated.getMasterInspectionses()) {
                masterInspectionse.setInspectionDesign(inspectionDesignCreated);
                LOGGER.debug("Creating a new child MasterInspections with information: {}", masterInspectionse);
                masterInspectionsService.create(masterInspectionse);
            }
        }

        if(inspectionDesignCreated.getInspectionCategoryMappings() != null) {
            for(InspectionCategoryMapping inspectionCategoryMapping : inspectionDesignCreated.getInspectionCategoryMappings()) {
                inspectionCategoryMapping.setInspectionDesign(inspectionDesignCreated);
                LOGGER.debug("Creating a new child InspectionCategoryMapping with information: {}", inspectionCategoryMapping);
                inspectionCategoryMappingService.create(inspectionCategoryMapping);
            }
        }
        return inspectionDesignCreated;
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public InspectionDesign getById(Integer inspectiondesignId) throws EntityNotFoundException {
        LOGGER.debug("Finding InspectionDesign by id: {}", inspectiondesignId);
        InspectionDesign inspectionDesign = this.wmGenericDao.findById(inspectiondesignId);
        if (inspectionDesign == null){
            LOGGER.debug("No InspectionDesign found with id: {}", inspectiondesignId);
            throw new EntityNotFoundException(String.valueOf(inspectiondesignId));
        }
        return inspectionDesign;
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public InspectionDesign findById(Integer inspectiondesignId) {
        LOGGER.debug("Finding InspectionDesign by id: {}", inspectiondesignId);
        return this.wmGenericDao.findById(inspectiondesignId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "cx2TransactionManager")
	@Override
	public InspectionDesign update(InspectionDesign inspectionDesign) throws EntityNotFoundException {
        LOGGER.debug("Updating InspectionDesign with information: {}", inspectionDesign);
        this.wmGenericDao.update(inspectionDesign);

        Integer inspectiondesignId = inspectionDesign.getId();

        return this.wmGenericDao.findById(inspectiondesignId);
    }

    @Transactional(value = "cx2TransactionManager")
	@Override
	public InspectionDesign delete(Integer inspectiondesignId) throws EntityNotFoundException {
        LOGGER.debug("Deleting InspectionDesign with id: {}", inspectiondesignId);
        InspectionDesign deleted = this.wmGenericDao.findById(inspectiondesignId);
        if (deleted == null) {
            LOGGER.debug("No InspectionDesign found with id: {}", inspectiondesignId);
            throw new EntityNotFoundException(String.valueOf(inspectiondesignId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public Page<InspectionDesign> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all InspectionDesigns");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<InspectionDesign> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all InspectionDesigns");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service cx2 for table InspectionDesign to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<InspectionOutcome> findAssociatedInspectionOutcomes(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated inspectionOutcomes");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("inspectionDesign.id = '" + id + "'");

        return inspectionOutcomeService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<InspectionSequence> findAssociatedInspectionSequences(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated inspectionSequences");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("inspectionDesign.id = '" + id + "'");

        return inspectionSequenceService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<MasterInspections> findAssociatedMasterInspectionses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated masterInspectionses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("inspectionDesign.id = '" + id + "'");

        return masterInspectionsService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<InspectionCategoryMapping> findAssociatedInspectionCategoryMappings(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated inspectionCategoryMappings");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("inspectionDesign.id = '" + id + "'");

        return inspectionCategoryMappingService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service InspectionSequenceService instance
	 */
	protected void setInspectionSequenceService(InspectionSequenceService service) {
        this.inspectionSequenceService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service InspectionOutcomeService instance
	 */
	protected void setInspectionOutcomeService(InspectionOutcomeService service) {
        this.inspectionOutcomeService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service InspectionCategoryMappingService instance
	 */
	protected void setInspectionCategoryMappingService(InspectionCategoryMappingService service) {
        this.inspectionCategoryMappingService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service MasterInspectionsService instance
	 */
	protected void setMasterInspectionsService(MasterInspectionsService service) {
        this.masterInspectionsService = service;
    }

}

