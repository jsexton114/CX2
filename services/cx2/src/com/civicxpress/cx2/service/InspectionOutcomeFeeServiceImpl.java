/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.civicxpress.cx2.InspectionOutcomeFee;


/**
 * ServiceImpl object for domain model class InspectionOutcomeFee.
 *
 * @see InspectionOutcomeFee
 */
@Service("cx2.InspectionOutcomeFeeService")
public class InspectionOutcomeFeeServiceImpl implements InspectionOutcomeFeeService {

    private static final Logger LOGGER = LoggerFactory.getLogger(InspectionOutcomeFeeServiceImpl.class);


    @Autowired
    @Qualifier("cx2.InspectionOutcomeFeeDao")
    private WMGenericDao<InspectionOutcomeFee, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<InspectionOutcomeFee, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
	public InspectionOutcomeFee create(InspectionOutcomeFee inspectionOutcomeFee) {
        LOGGER.debug("Creating a new InspectionOutcomeFee with information: {}", inspectionOutcomeFee);
        InspectionOutcomeFee inspectionOutcomeFeeCreated = this.wmGenericDao.create(inspectionOutcomeFee);
        return inspectionOutcomeFeeCreated;
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public InspectionOutcomeFee getById(Integer inspectionoutcomefeeId) throws EntityNotFoundException {
        LOGGER.debug("Finding InspectionOutcomeFee by id: {}", inspectionoutcomefeeId);
        InspectionOutcomeFee inspectionOutcomeFee = this.wmGenericDao.findById(inspectionoutcomefeeId);
        if (inspectionOutcomeFee == null){
            LOGGER.debug("No InspectionOutcomeFee found with id: {}", inspectionoutcomefeeId);
            throw new EntityNotFoundException(String.valueOf(inspectionoutcomefeeId));
        }
        return inspectionOutcomeFee;
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public InspectionOutcomeFee findById(Integer inspectionoutcomefeeId) {
        LOGGER.debug("Finding InspectionOutcomeFee by id: {}", inspectionoutcomefeeId);
        return this.wmGenericDao.findById(inspectionoutcomefeeId);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public InspectionOutcomeFee getByInspectOutcomeIdAndOrderToApply(Integer inspectOutcomeId, Integer orderToApply) {
        Map<String, Object> inspectOutcomeIdAndOrderToApplyMap = new HashMap<>();
        inspectOutcomeIdAndOrderToApplyMap.put("inspectOutcomeId", inspectOutcomeId);
        inspectOutcomeIdAndOrderToApplyMap.put("orderToApply", orderToApply);

        LOGGER.debug("Finding InspectionOutcomeFee by unique keys: {}", inspectOutcomeIdAndOrderToApplyMap);
        InspectionOutcomeFee inspectionOutcomeFee = this.wmGenericDao.findByUniqueKey(inspectOutcomeIdAndOrderToApplyMap);

        if (inspectionOutcomeFee == null){
            LOGGER.debug("No InspectionOutcomeFee found with given unique key values: {}", inspectOutcomeIdAndOrderToApplyMap);
            throw new EntityNotFoundException(String.valueOf(inspectOutcomeIdAndOrderToApplyMap));
        }

        return inspectionOutcomeFee;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "cx2TransactionManager")
	@Override
	public InspectionOutcomeFee update(InspectionOutcomeFee inspectionOutcomeFee) throws EntityNotFoundException {
        LOGGER.debug("Updating InspectionOutcomeFee with information: {}", inspectionOutcomeFee);
        this.wmGenericDao.update(inspectionOutcomeFee);

        Integer inspectionoutcomefeeId = inspectionOutcomeFee.getId();

        return this.wmGenericDao.findById(inspectionoutcomefeeId);
    }

    @Transactional(value = "cx2TransactionManager")
	@Override
	public InspectionOutcomeFee delete(Integer inspectionoutcomefeeId) throws EntityNotFoundException {
        LOGGER.debug("Deleting InspectionOutcomeFee with id: {}", inspectionoutcomefeeId);
        InspectionOutcomeFee deleted = this.wmGenericDao.findById(inspectionoutcomefeeId);
        if (deleted == null) {
            LOGGER.debug("No InspectionOutcomeFee found with id: {}", inspectionoutcomefeeId);
            throw new EntityNotFoundException(String.valueOf(inspectionoutcomefeeId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public Page<InspectionOutcomeFee> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all InspectionOutcomeFees");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<InspectionOutcomeFee> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all InspectionOutcomeFees");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service cx2 for table InspectionOutcomeFee to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }



}

