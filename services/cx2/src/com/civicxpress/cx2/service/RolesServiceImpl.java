/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.civicxpress.cx2.Roles;
import com.civicxpress.cx2.UserRoles;


/**
 * ServiceImpl object for domain model class Roles.
 *
 * @see Roles
 */
@Service("cx2.RolesService")
public class RolesServiceImpl implements RolesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(RolesServiceImpl.class);

    @Autowired
	@Qualifier("cx2.UserRolesService")
	private UserRolesService userRolesService;

    @Autowired
    @Qualifier("cx2.RolesDao")
    private WMGenericDao<Roles, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Roles, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
	public Roles create(Roles roles) {
        LOGGER.debug("Creating a new Roles with information: {}", roles);
        Roles rolesCreated = this.wmGenericDao.create(roles);
        if(rolesCreated.getUserRoleses() != null) {
            for(UserRoles userRolese : rolesCreated.getUserRoleses()) {
                userRolese.setRoles(rolesCreated);
                LOGGER.debug("Creating a new child UserRoles with information: {}", userRolese);
                userRolesService.create(userRolese);
            }
        }
        return rolesCreated;
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public Roles getById(Integer rolesId) throws EntityNotFoundException {
        LOGGER.debug("Finding Roles by id: {}", rolesId);
        Roles roles = this.wmGenericDao.findById(rolesId);
        if (roles == null){
            LOGGER.debug("No Roles found with id: {}", rolesId);
            throw new EntityNotFoundException(String.valueOf(rolesId));
        }
        return roles;
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public Roles findById(Integer rolesId) {
        LOGGER.debug("Finding Roles by id: {}", rolesId);
        return this.wmGenericDao.findById(rolesId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "cx2TransactionManager")
	@Override
	public Roles update(Roles roles) throws EntityNotFoundException {
        LOGGER.debug("Updating Roles with information: {}", roles);
        this.wmGenericDao.update(roles);

        Integer rolesId = roles.getId();

        return this.wmGenericDao.findById(rolesId);
    }

    @Transactional(value = "cx2TransactionManager")
	@Override
	public Roles delete(Integer rolesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Roles with id: {}", rolesId);
        Roles deleted = this.wmGenericDao.findById(rolesId);
        if (deleted == null) {
            LOGGER.debug("No Roles found with id: {}", rolesId);
            throw new EntityNotFoundException(String.valueOf(rolesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public Page<Roles> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Roles");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Roles> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Roles");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service cx2 for table Roles to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<UserRoles> findAssociatedUserRoleses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated userRoleses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("roles.id = '" + id + "'");

        return userRolesService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service UserRolesService instance
	 */
	protected void setUserRolesService(UserRolesService service) {
        this.userRolesService = service;
    }

}

