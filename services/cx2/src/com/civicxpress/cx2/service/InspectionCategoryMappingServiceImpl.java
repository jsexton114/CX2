/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.civicxpress.cx2.InspectionCategoryMapping;


/**
 * ServiceImpl object for domain model class InspectionCategoryMapping.
 *
 * @see InspectionCategoryMapping
 */
@Service("cx2.InspectionCategoryMappingService")
public class InspectionCategoryMappingServiceImpl implements InspectionCategoryMappingService {

    private static final Logger LOGGER = LoggerFactory.getLogger(InspectionCategoryMappingServiceImpl.class);


    @Autowired
    @Qualifier("cx2.InspectionCategoryMappingDao")
    private WMGenericDao<InspectionCategoryMapping, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<InspectionCategoryMapping, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
	public InspectionCategoryMapping create(InspectionCategoryMapping inspectionCategoryMapping) {
        LOGGER.debug("Creating a new InspectionCategoryMapping with information: {}", inspectionCategoryMapping);
        InspectionCategoryMapping inspectionCategoryMappingCreated = this.wmGenericDao.create(inspectionCategoryMapping);
        return inspectionCategoryMappingCreated;
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public InspectionCategoryMapping getById(Integer inspectioncategorymappingId) throws EntityNotFoundException {
        LOGGER.debug("Finding InspectionCategoryMapping by id: {}", inspectioncategorymappingId);
        InspectionCategoryMapping inspectionCategoryMapping = this.wmGenericDao.findById(inspectioncategorymappingId);
        if (inspectionCategoryMapping == null){
            LOGGER.debug("No InspectionCategoryMapping found with id: {}", inspectioncategorymappingId);
            throw new EntityNotFoundException(String.valueOf(inspectioncategorymappingId));
        }
        return inspectionCategoryMapping;
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public InspectionCategoryMapping findById(Integer inspectioncategorymappingId) {
        LOGGER.debug("Finding InspectionCategoryMapping by id: {}", inspectioncategorymappingId);
        return this.wmGenericDao.findById(inspectioncategorymappingId);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public InspectionCategoryMapping getByInspectionCategoryIdAndInspectionDesignId(Integer inspectionCategoryId, Integer inspectionDesignId) {
        Map<String, Object> inspectionCategoryIdAndInspectionDesignIdMap = new HashMap<>();
        inspectionCategoryIdAndInspectionDesignIdMap.put("inspectionCategoryId", inspectionCategoryId);
        inspectionCategoryIdAndInspectionDesignIdMap.put("inspectionDesignId", inspectionDesignId);

        LOGGER.debug("Finding InspectionCategoryMapping by unique keys: {}", inspectionCategoryIdAndInspectionDesignIdMap);
        InspectionCategoryMapping inspectionCategoryMapping = this.wmGenericDao.findByUniqueKey(inspectionCategoryIdAndInspectionDesignIdMap);

        if (inspectionCategoryMapping == null){
            LOGGER.debug("No InspectionCategoryMapping found with given unique key values: {}", inspectionCategoryIdAndInspectionDesignIdMap);
            throw new EntityNotFoundException(String.valueOf(inspectionCategoryIdAndInspectionDesignIdMap));
        }

        return inspectionCategoryMapping;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "cx2TransactionManager")
	@Override
	public InspectionCategoryMapping update(InspectionCategoryMapping inspectionCategoryMapping) throws EntityNotFoundException {
        LOGGER.debug("Updating InspectionCategoryMapping with information: {}", inspectionCategoryMapping);
        this.wmGenericDao.update(inspectionCategoryMapping);

        Integer inspectioncategorymappingId = inspectionCategoryMapping.getId();

        return this.wmGenericDao.findById(inspectioncategorymappingId);
    }

    @Transactional(value = "cx2TransactionManager")
	@Override
	public InspectionCategoryMapping delete(Integer inspectioncategorymappingId) throws EntityNotFoundException {
        LOGGER.debug("Deleting InspectionCategoryMapping with id: {}", inspectioncategorymappingId);
        InspectionCategoryMapping deleted = this.wmGenericDao.findById(inspectioncategorymappingId);
        if (deleted == null) {
            LOGGER.debug("No InspectionCategoryMapping found with id: {}", inspectioncategorymappingId);
            throw new EntityNotFoundException(String.valueOf(inspectioncategorymappingId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public Page<InspectionCategoryMapping> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all InspectionCategoryMappings");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<InspectionCategoryMapping> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all InspectionCategoryMappings");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service cx2 for table InspectionCategoryMapping to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }



}

