/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.civicxpress.cx2.Gisrecords;
import com.civicxpress.cx2.Subdivisions;


/**
 * ServiceImpl object for domain model class Subdivisions.
 *
 * @see Subdivisions
 */
@Service("cx2.SubdivisionsService")
public class SubdivisionsServiceImpl implements SubdivisionsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(SubdivisionsServiceImpl.class);

    @Autowired
	@Qualifier("cx2.GisrecordsService")
	private GisrecordsService gisrecordsService;

    @Autowired
    @Qualifier("cx2.SubdivisionsDao")
    private WMGenericDao<Subdivisions, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Subdivisions, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
	public Subdivisions create(Subdivisions subdivisions) {
        LOGGER.debug("Creating a new Subdivisions with information: {}", subdivisions);
        Subdivisions subdivisionsCreated = this.wmGenericDao.create(subdivisions);
        if(subdivisionsCreated.getGisrecordses() != null) {
            for(Gisrecords gisrecordse : subdivisionsCreated.getGisrecordses()) {
                gisrecordse.setSubdivisions(subdivisionsCreated);
                LOGGER.debug("Creating a new child Gisrecords with information: {}", gisrecordse);
                gisrecordsService.create(gisrecordse);
            }
        }
        return subdivisionsCreated;
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public Subdivisions getById(Integer subdivisionsId) throws EntityNotFoundException {
        LOGGER.debug("Finding Subdivisions by id: {}", subdivisionsId);
        Subdivisions subdivisions = this.wmGenericDao.findById(subdivisionsId);
        if (subdivisions == null){
            LOGGER.debug("No Subdivisions found with id: {}", subdivisionsId);
            throw new EntityNotFoundException(String.valueOf(subdivisionsId));
        }
        return subdivisions;
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public Subdivisions findById(Integer subdivisionsId) {
        LOGGER.debug("Finding Subdivisions by id: {}", subdivisionsId);
        return this.wmGenericDao.findById(subdivisionsId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "cx2TransactionManager")
	@Override
	public Subdivisions update(Subdivisions subdivisions) throws EntityNotFoundException {
        LOGGER.debug("Updating Subdivisions with information: {}", subdivisions);
        this.wmGenericDao.update(subdivisions);

        Integer subdivisionsId = subdivisions.getId();

        return this.wmGenericDao.findById(subdivisionsId);
    }

    @Transactional(value = "cx2TransactionManager")
	@Override
	public Subdivisions delete(Integer subdivisionsId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Subdivisions with id: {}", subdivisionsId);
        Subdivisions deleted = this.wmGenericDao.findById(subdivisionsId);
        if (deleted == null) {
            LOGGER.debug("No Subdivisions found with id: {}", subdivisionsId);
            throw new EntityNotFoundException(String.valueOf(subdivisionsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public Page<Subdivisions> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Subdivisions");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Subdivisions> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Subdivisions");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service cx2 for table Subdivisions to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Gisrecords> findAssociatedGisrecordses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated gisrecordses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("subdivisions.id = '" + id + "'");

        return gisrecordsService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service GisrecordsService instance
	 */
	protected void setGisrecordsService(GisrecordsService service) {
        this.gisrecordsService = service;
    }

}

