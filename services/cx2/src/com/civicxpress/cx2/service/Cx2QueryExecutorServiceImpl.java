/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/

package com.civicxpress.cx2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.query.WMQueryExecutor;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.file.model.Downloadable;

import com.civicxpress.cx2.FormsToInspections;
import com.civicxpress.cx2.InspectionDesign;
import com.civicxpress.cx2.MasterForms;
import com.civicxpress.cx2.MyCart;
import com.civicxpress.cx2.Projects;
import com.civicxpress.cx2.UserSubscriptions;
import com.civicxpress.cx2.VendorApprovals;
import com.civicxpress.cx2.models.query.*;

@Service
public class Cx2QueryExecutorServiceImpl implements Cx2QueryExecutorService {

    private static final Logger LOGGER = LoggerFactory.getLogger(Cx2QueryExecutorServiceImpl.class);

    @Autowired
    @Qualifier("cx2WMQueryExecutor")
    private WMQueryExecutor queryExecutor;

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<GetRecentMessageIdResponse> executeGetRecentMessageId(String form, Timestamp postedAt, Pageable pageable) {
        Map params = new HashMap(2);

        params.put("form", form);
        params.put("PostedAt", postedAt);

        return queryExecutor.executeNamedQuery("GetRecentMessageId", params, GetRecentMessageIdResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportGetRecentMessageId(ExportType exportType, String form, Timestamp postedAt, Pageable pageable) {
        Map params = new HashMap(2);

        params.put("form", form);
        params.put("PostedAt", postedAt);

        return queryExecutor.exportNamedQueryData("GetRecentMessageId", params, exportType, GetRecentMessageIdResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<AdminsMunicipalitiesResponse> executeAdminsMunicipalities(Integer user, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("user", user);

        return queryExecutor.executeNamedQuery("AdminsMunicipalities", params, AdminsMunicipalitiesResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportAdminsMunicipalities(ExportType exportType, Integer user, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("user", user);

        return queryExecutor.exportNamedQueryData("AdminsMunicipalities", params, exportType, AdminsMunicipalitiesResponse.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public Integer executeInsertIntoCart(InsertIntoCartRequest insertIntoCartRequest) {
        Map params = new HashMap(2);

        params.put("FeeId", insertIntoCartRequest.getFeeId());
        params.put("UserId", insertIntoCartRequest.getUserId());

        return queryExecutor.executeNamedQueryForUpdate("InsertIntoCart", params);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public Integer executeProjectSoftDelete(ProjectSoftDeleteRequest projectSoftDeleteRequest) {
        Map params = new HashMap(2);

        params.put("active", projectSoftDeleteRequest.getActive());
        params.put("ProjectGuid", projectSoftDeleteRequest.getProjectGuid());

        return queryExecutor.executeNamedQueryForUpdate("ProjectSoftDelete", params);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public Integer executeUpdatePrimaryVendorInMasterForms(UpdatePrimaryVendorInMasterFormsRequest updatePrimaryVendorInMasterFormsRequest) {
        Map params = new HashMap(2);

        params.put("VendorId", updatePrimaryVendorInMasterFormsRequest.getVendorId());
        params.put("FormGUID", updatePrimaryVendorInMasterFormsRequest.getFormGuid());

        return queryExecutor.executeNamedQueryForUpdate("UpdatePrimaryVendorInMasterForms", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<StandardUserMunicipalitesResponse> executeStandardUserMunicipalites(Integer user, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("USER", user);

        return queryExecutor.executeNamedQuery("StandardUserMunicipalites", params, StandardUserMunicipalitesResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportStandardUserMunicipalites(ExportType exportType, Integer user, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("USER", user);

        return queryExecutor.exportNamedQueryData("StandardUserMunicipalites", params, exportType, StandardUserMunicipalitesResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<GetEmailIdResponse> executeGetEmailId(Integer userId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("userID", userId);

        return queryExecutor.executeNamedQuery("getEmailId", params, GetEmailIdResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportGetEmailId(ExportType exportType, Integer userId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("userID", userId);

        return queryExecutor.exportNamedQueryData("getEmailId", params, exportType, GetEmailIdResponse.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public Integer executeAddUsersToVendor(AddUsersToVendorRequest addUsersToVendorRequest) {
        Map params = new HashMap(3);

        params.put("VendorId", addUsersToVendorRequest.getVendorId());
        params.put("UserId", addUsersToVendorRequest.getUserId());
        params.put("JoiningDate", addUsersToVendorRequest.getJoiningDate());

        return queryExecutor.executeNamedQueryForUpdate("AddUsersToVendor", params);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public Integer executeUpdatePasswordAndCF(UpdatePasswordAndCfRequest updatePasswordAndCfRequest) {
        Map params = new HashMap(3);

        params.put("password", updatePasswordAndCfRequest.getPassword());
        params.put("cf", updatePasswordAndCfRequest.getCf());
        params.put("newUser", updatePasswordAndCfRequest.getNewUser());

        return queryExecutor.executeNamedQueryForUpdate("UpdatePasswordAndCF", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<CheckingUserWithMunicipalityInRolesResponse> executeCheckingUserWithMunicipalityInRoles(Integer muncipality, Integer user, Pageable pageable) {
        Map params = new HashMap(2);

        params.put("muncipality", muncipality);
        params.put("user", user);

        return queryExecutor.executeNamedQuery("CheckingUserWithMunicipalityInRoles", params, CheckingUserWithMunicipalityInRolesResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportCheckingUserWithMunicipalityInRoles(ExportType exportType, Integer muncipality, Integer user, Pageable pageable) {
        Map params = new HashMap(2);

        params.put("muncipality", muncipality);
        params.put("user", user);

        return queryExecutor.exportNamedQueryData("CheckingUserWithMunicipalityInRoles", params, exportType, CheckingUserWithMunicipalityInRolesResponse.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public Integer executeUpdateCFInProfile(UpdateCfinProfileRequest updateCfinProfileRequest) {
        Map params = new HashMap(2);

        params.put("cf", updateCfinProfileRequest.getCf());
        params.put("user", updateCfinProfileRequest.getUser());

        return queryExecutor.executeNamedQueryForUpdate("UpdateCFInProfile", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<MunicipalitiesGroupsCountsResponse> executeMunicipalitiesGroupsCounts(Integer municipality, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("municipality", municipality);

        return queryExecutor.executeNamedQuery("MunicipalitiesGroupsCounts", params, MunicipalitiesGroupsCountsResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportMunicipalitiesGroupsCounts(ExportType exportType, Integer municipality, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("municipality", municipality);

        return queryExecutor.exportNamedQueryData("MunicipalitiesGroupsCounts", params, exportType, MunicipalitiesGroupsCountsResponse.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public Integer executeInsertCategoryMapping(InsertCategoryMappingRequest insertCategoryMappingRequest) {
        Map params = new HashMap(2);

        params.put("FormTypeId", insertCategoryMappingRequest.getFormTypeId());
        params.put("FormCategoryId", insertCategoryMappingRequest.getFormCategoryId());

        return queryExecutor.executeNamedQueryForUpdate("InsertCategoryMapping", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<ProcessFormsForUserByMunicipalityResponse> executeProcessFormsForUserByMunicipality(Boolean closed, Long municipalityId, Long userId, Pageable pageable) {
        Map params = new HashMap(3);

        params.put("closed", closed);
        params.put("MunicipalityId", municipalityId);
        params.put("UserId", userId);

        return queryExecutor.executeNamedQuery("ProcessFormsForUserByMunicipality", params, ProcessFormsForUserByMunicipalityResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportProcessFormsForUserByMunicipality(ExportType exportType, Boolean closed, Long municipalityId, Long userId, Pageable pageable) {
        Map params = new HashMap(3);

        params.put("closed", closed);
        params.put("MunicipalityId", municipalityId);
        params.put("UserId", userId);

        return queryExecutor.exportNamedQueryData("ProcessFormsForUserByMunicipality", params, exportType, ProcessFormsForUserByMunicipalityResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<FormsCountForMunicipalitiesResponse> executeFormsCountForMunicipalities(Integer municipalityId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("MunicipalityId", municipalityId);

        return queryExecutor.executeNamedQuery("FormsCountForMunicipalities", params, FormsCountForMunicipalitiesResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportFormsCountForMunicipalities(ExportType exportType, Integer municipalityId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("MunicipalityId", municipalityId);

        return queryExecutor.exportNamedQueryData("FormsCountForMunicipalities", params, exportType, FormsCountForMunicipalitiesResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<CountOfMunicipalityProjectsResponse> executeCountOfMunicipalityProjects(Integer municipalityId, Boolean active, Pageable pageable) {
        Map params = new HashMap(2);

        params.put("municipalityId", municipalityId);
        params.put("Active", active);

        return queryExecutor.executeNamedQuery("CountOfMunicipalityProjects", params, CountOfMunicipalityProjectsResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportCountOfMunicipalityProjects(ExportType exportType, Integer municipalityId, Boolean active, Pageable pageable) {
        Map params = new HashMap(2);

        params.put("municipalityId", municipalityId);
        params.put("Active", active);

        return queryExecutor.exportNamedQueryData("CountOfMunicipalityProjects", params, exportType, CountOfMunicipalityProjectsResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<VendorCountResponse> executeVendorCount(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("VendorCount", params, VendorCountResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportVendorCount(ExportType exportType, Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.exportNamedQueryData("VendorCount", params, exportType, VendorCountResponse.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public Integer executeUpdateWorkMunicipality(UpdateWorkMunicipalityRequest updateWorkMunicipalityRequest) {
        Map params = new HashMap(11);

        params.put("monday", updateWorkMunicipalityRequest.getMonday());
        params.put("tuesday", updateWorkMunicipalityRequest.getTuesday());
        params.put("wednesday", updateWorkMunicipalityRequest.getWednesday());
        params.put("thursday", updateWorkMunicipalityRequest.getThursday());
        params.put("friday", updateWorkMunicipalityRequest.getFriday());
        params.put("saturday", updateWorkMunicipalityRequest.getSaturday());
        params.put("sunday", updateWorkMunicipalityRequest.getSunday());
        params.put("timezone", updateWorkMunicipalityRequest.getTimezone());
        params.put("openTime", updateWorkMunicipalityRequest.getOpenTime());
        params.put("closeTime", updateWorkMunicipalityRequest.getCloseTime());
        params.put("municipalityId", updateWorkMunicipalityRequest.getMunicipalityId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateWorkMunicipality", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<FeeByFeeTypesToDashboardResponse> executeFeeByFeeTypesToDashboard(Integer municpality, Date startDate, Date endDate, Pageable pageable) {
        Map params = new HashMap(3);

        params.put("municpality", municpality);
        params.put("startDate", startDate);
        params.put("endDate", endDate);

        return queryExecutor.executeNamedQuery("FeeByFeeTypesToDashboard", params, FeeByFeeTypesToDashboardResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportFeeByFeeTypesToDashboard(ExportType exportType, Integer municpality, Date startDate, Date endDate, Pageable pageable) {
        Map params = new HashMap(3);

        params.put("municpality", municpality);
        params.put("startDate", startDate);
        params.put("endDate", endDate);

        return queryExecutor.exportNamedQueryData("FeeByFeeTypesToDashboard", params, exportType, FeeByFeeTypesToDashboardResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<GetFormTypeFieldsByTypeIdResponse> executeGetFormTypeFieldsByTypeId(Long formTypeId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("formTypeId", formTypeId);

        return queryExecutor.executeNamedQuery("getFormTypeFieldsByTypeId", params, GetFormTypeFieldsByTypeIdResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportGetFormTypeFieldsByTypeId(ExportType exportType, Long formTypeId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("formTypeId", formTypeId);

        return queryExecutor.exportNamedQueryData("getFormTypeFieldsByTypeId", params, exportType, GetFormTypeFieldsByTypeIdResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<CountOfProjectsForUsersAndSharedWithByMunicipalityResponse> executeCountOfProjectsForUsersAndSharedWithByMunicipality(Integer municipalityId, Boolean active, Integer creatorUser, Integer sharedWithUser, Pageable pageable) {
        Map params = new HashMap(4);

        params.put("municipalityId", municipalityId);
        params.put("Active", active);
        params.put("creatorUser", creatorUser);
        params.put("sharedWithUser", sharedWithUser);

        return queryExecutor.executeNamedQuery("CountOfProjectsForUsersAndSharedWithByMunicipality", params, CountOfProjectsForUsersAndSharedWithByMunicipalityResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportCountOfProjectsForUsersAndSharedWithByMunicipality(ExportType exportType, Integer municipalityId, Boolean active, Integer creatorUser, Integer sharedWithUser, Pageable pageable) {
        Map params = new HashMap(4);

        params.put("municipalityId", municipalityId);
        params.put("Active", active);
        params.put("creatorUser", creatorUser);
        params.put("sharedWithUser", sharedWithUser);

        return queryExecutor.exportNamedQueryData("CountOfProjectsForUsersAndSharedWithByMunicipality", params, exportType, CountOfProjectsForUsersAndSharedWithByMunicipalityResponse.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public Integer executeUpdateConsiderClosedForInspectionOutcome(UpdateConsiderClosedForInspectionOutcomeRequest updateConsiderClosedForInspectionOutcomeRequest) {
        Map params = new HashMap(2);

        params.put("ConsiderClosed", updateConsiderClosedForInspectionOutcomeRequest.getConsiderClosed());
        params.put("id", updateConsiderClosedForInspectionOutcomeRequest.getId());

        return queryExecutor.executeNamedQueryForUpdate("UpdateConsiderClosedForInspectionOutcome", params);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public Integer executeUpdateAsCXVendorAdmin(UpdateAsCxvendorAdminRequest updateAsCxvendorAdminRequest) {
        Map params = new HashMap(3);

        params.put("role", updateAsCxvendorAdminRequest.getRole());
        params.put("municipality", updateAsCxvendorAdminRequest.getMunicipality());
        params.put("user", updateAsCxvendorAdminRequest.getUser());

        return queryExecutor.executeNamedQueryForUpdate("UpdateAsCXVendorAdmin", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<FormsByCategoryResponse> executeFormsByCategory(Integer formCategory, Boolean isActive, Pageable pageable) {
        Map params = new HashMap(2);

        params.put("formCategory", formCategory);
        params.put("isActive", isActive);

        return queryExecutor.executeNamedQuery("FormsByCategory", params, FormsByCategoryResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportFormsByCategory(ExportType exportType, Integer formCategory, Boolean isActive, Pageable pageable) {
        Map params = new HashMap(2);

        params.put("formCategory", formCategory);
        params.put("isActive", isActive);

        return queryExecutor.exportNamedQueryData("FormsByCategory", params, exportType, FormsByCategoryResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<CountOfCompnayFormsByVendorIdResponse> executeCountOfCompnayFormsByVendorId(Boolean closed, Integer vendorId, Pageable pageable) {
        Map params = new HashMap(2);

        params.put("closed", closed);
        params.put("vendorId", vendorId);

        return queryExecutor.executeNamedQuery("CountOfCompnayFormsByVendorId", params, CountOfCompnayFormsByVendorIdResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportCountOfCompnayFormsByVendorId(ExportType exportType, Boolean closed, Integer vendorId, Pageable pageable) {
        Map params = new HashMap(2);

        params.put("closed", closed);
        params.put("vendorId", vendorId);

        return queryExecutor.exportNamedQueryData("CountOfCompnayFormsByVendorId", params, exportType, CountOfCompnayFormsByVendorIdResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<MasterForms> executeOpenedOrClosedFormsForUserOrSharedWith(Long userId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("userId", userId);

        return queryExecutor.executeNamedQuery("OpenedOrClosedFormsForUserOrSharedWith", params, MasterForms.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportOpenedOrClosedFormsForUserOrSharedWith(ExportType exportType, Long userId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("userId", userId);

        return queryExecutor.exportNamedQueryData("OpenedOrClosedFormsForUserOrSharedWith", params, exportType, MasterForms.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<SearchUsersByEmailOrNameResponse> executeSearchUsersByEmailOrName(String searchString, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("searchString", searchString);

        return queryExecutor.executeNamedQuery("searchUsersByEmailOrName", params, SearchUsersByEmailOrNameResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportSearchUsersByEmailOrName(ExportType exportType, String searchString, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("searchString", searchString);

        return queryExecutor.exportNamedQueryData("searchUsersByEmailOrName", params, exportType, SearchUsersByEmailOrNameResponse.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public Integer executeUpdateGlobalEmailSig(UpdateGlobalEmailSigRequest updateGlobalEmailSigRequest) {
        Map params = new HashMap(2);

        params.put("gs", updateGlobalEmailSigRequest.getGs());
        params.put("municipality", updateGlobalEmailSigRequest.getMunicipality());

        return queryExecutor.executeNamedQueryForUpdate("UpdateGlobalEmailSig", params);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public Integer executeDeleteFromVendorAdmins(Integer user, Integer vendor) {
        Map params = new HashMap(2);

        params.put("user", user);
        params.put("vendor", vendor);

        return queryExecutor.executeNamedQueryForUpdate("DeleteFromVendorAdmins", params);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public Integer executeSetPrimaryVendorStatusForFormandVendor(SetPrimaryVendorStatusForFormandVendorRequest setPrimaryVendorStatusForFormandVendorRequest) {
        Map params = new HashMap(3);

        params.put("pv", setPrimaryVendorStatusForFormandVendorRequest.getPv());
        params.put("form", setPrimaryVendorStatusForFormandVendorRequest.getForm());
        params.put("vendor", setPrimaryVendorStatusForFormandVendorRequest.getVendor());

        return queryExecutor.executeNamedQueryForUpdate("SetPrimaryVendorStatusForFormandVendor", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<AllFeeformCountResponse> executeAllFeeformCount(Boolean allowPayment, String paidStatus, Integer userId, Pageable pageable) {
        Map params = new HashMap(3);

        params.put("allowPayment", allowPayment);
        params.put("paidStatus", paidStatus);
        params.put("userId", userId);

        return queryExecutor.executeNamedQuery("AllFeeformCount", params, AllFeeformCountResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportAllFeeformCount(ExportType exportType, Boolean allowPayment, String paidStatus, Integer userId, Pageable pageable) {
        Map params = new HashMap(3);

        params.put("allowPayment", allowPayment);
        params.put("paidStatus", paidStatus);
        params.put("userId", userId);

        return queryExecutor.exportNamedQueryData("AllFeeformCount", params, exportType, AllFeeformCountResponse.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public Integer executeDeleteCategoryMapping(Integer form) {
        Map params = new HashMap(1);

        params.put("form", form);

        return queryExecutor.executeNamedQueryForUpdate("DeleteCategoryMapping", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<GetUserIdFromPasswordResetTokenResponse> executeGetUserIdFromPasswordResetToken(String token, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("token", token);

        return queryExecutor.executeNamedQuery("getUserIdFromPasswordResetToken", params, GetUserIdFromPasswordResetTokenResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportGetUserIdFromPasswordResetToken(ExportType exportType, String token, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("token", token);

        return queryExecutor.exportNamedQueryData("getUserIdFromPasswordResetToken", params, exportType, GetUserIdFromPasswordResetTokenResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<FormsByVendorsForDashboardResponse> executeFormsByVendorsForDashboard(Integer municipality, Timestamp startDate, Timestamp endDate, Pageable pageable) {
        Map params = new HashMap(3);

        params.put("municipality", municipality);
        params.put("startDate", startDate);
        params.put("endDate", endDate);

        return queryExecutor.executeNamedQuery("FormsByVendorsForDashboard", params, FormsByVendorsForDashboardResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportFormsByVendorsForDashboard(ExportType exportType, Integer municipality, Timestamp startDate, Timestamp endDate, Pageable pageable) {
        Map params = new HashMap(3);

        params.put("municipality", municipality);
        params.put("startDate", startDate);
        params.put("endDate", endDate);

        return queryExecutor.exportNamedQueryData("FormsByVendorsForDashboard", params, exportType, FormsByVendorsForDashboardResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<CountOfProcessFormsByMuncipalityResponse> executeCountOfProcessFormsByMuncipality(Integer municipalityId, Boolean closed, Integer userId, Pageable pageable) {
        Map params = new HashMap(3);

        params.put("MunicipalityId", municipalityId);
        params.put("closed", closed);
        params.put("UserId", userId);

        return queryExecutor.executeNamedQuery("CountOfProcessFormsByMuncipality", params, CountOfProcessFormsByMuncipalityResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportCountOfProcessFormsByMuncipality(ExportType exportType, Integer municipalityId, Boolean closed, Integer userId, Pageable pageable) {
        Map params = new HashMap(3);

        params.put("MunicipalityId", municipalityId);
        params.put("closed", closed);
        params.put("UserId", userId);

        return queryExecutor.exportNamedQueryData("CountOfProcessFormsByMuncipality", params, exportType, CountOfProcessFormsByMuncipalityResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<CountOfCxprojectsActiveResponse> executeCountOfCXProjectsActive(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("CountOfCXProjectsActive", params, CountOfCxprojectsActiveResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportCountOfCXProjectsActive(ExportType exportType, Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.exportNamedQueryData("CountOfCXProjectsActive", params, exportType, CountOfCxprojectsActiveResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<DistinctInspectionDesignsForFormTypeResponse> executeDistinctInspectionDesignsForFormType(Integer form, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("form", form);

        return queryExecutor.executeNamedQuery("distinctInspectionDesignsForFormType", params, DistinctInspectionDesignsForFormTypeResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportDistinctInspectionDesignsForFormType(ExportType exportType, Integer form, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("form", form);

        return queryExecutor.exportNamedQueryData("distinctInspectionDesignsForFormType", params, exportType, DistinctInspectionDesignsForFormTypeResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<FormsToInspections> executeInspectionsOfForm(String form, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("form", form);

        return queryExecutor.executeNamedQuery("InspectionsOfForm", params, FormsToInspections.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportInspectionsOfForm(ExportType exportType, String form, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("form", form);

        return queryExecutor.exportNamedQueryData("InspectionsOfForm", params, exportType, FormsToInspections.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public Integer executeAddingVendorsToForm(AddingVendorsToFormRequest addingVendorsToFormRequest) {
        Map params = new HashMap(3);

        params.put("RelatedFormGUID", addingVendorsToFormRequest.getRelatedFormGuid());
        params.put("SharedOn", addingVendorsToFormRequest.getSharedOn());
        params.put("VendorId", addingVendorsToFormRequest.getVendorId());

        return queryExecutor.executeNamedQueryForUpdate("AddingVendorsToForm", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<GetCartItemIdsResponse> executeGetCartItemIds(Long userId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("userId", userId);

        return queryExecutor.executeNamedQuery("getCartItemIds", params, GetCartItemIdsResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportGetCartItemIds(ExportType exportType, Long userId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("userId", userId);

        return queryExecutor.exportNamedQueryData("getCartItemIds", params, exportType, GetCartItemIdsResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<PreferenceForUserResponse> executePreferenceForUser(Integer userId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("userId", userId);

        return queryExecutor.executeNamedQuery("PreferenceForUser", params, PreferenceForUserResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportPreferenceForUser(ExportType exportType, Integer userId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("userId", userId);

        return queryExecutor.exportNamedQueryData("PreferenceForUser", params, exportType, PreferenceForUserResponse.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public Integer executeInsertMasterInspections(InsertMasterInspectionsRequest insertMasterInspectionsRequest) {
        Map params = new HashMap(7);

        params.put("InspectionGuid", insertMasterInspectionsRequest.getInspectionGuid());
        params.put("InspectionTitle", insertMasterInspectionsRequest.getInspectionTitle());
        params.put("InspectionDesignId", insertMasterInspectionsRequest.getInspectionDesignId());
        params.put("FormGuid", insertMasterInspectionsRequest.getFormGuid());
        params.put("RequestedBy", insertMasterInspectionsRequest.getRequestedBy());
        params.put("DateRequested", insertMasterInspectionsRequest.getDateRequested());
        params.put("RequestedFor", insertMasterInspectionsRequest.getRequestedFor());

        return queryExecutor.executeNamedQueryForUpdate("InsertMasterInspections", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<UserCountResponse> executeUserCount(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("UserCount", params, UserCountResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportUserCount(ExportType exportType, Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.exportNamedQueryData("UserCount", params, exportType, UserCountResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<MyCart> executeFeesInCartByUser(Integer user, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("user", user);

        return queryExecutor.executeNamedQuery("FeesInCartByUser", params, MyCart.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportFeesInCartByUser(ExportType exportType, Integer user, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("user", user);

        return queryExecutor.exportNamedQueryData("FeesInCartByUser", params, exportType, MyCart.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<NoOfItemsInUserCartResponse> executeNoOfItemsInUserCart(Integer user, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("user", user);

        return queryExecutor.executeNamedQuery("NoOfItemsInUserCart", params, NoOfItemsInUserCartResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportNoOfItemsInUserCart(ExportType exportType, Integer user, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("user", user);

        return queryExecutor.exportNamedQueryData("NoOfItemsInUserCart", params, exportType, NoOfItemsInUserCartResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<CheckIfCompanyUserIsVendorAdminResponse> executeCheckIfCompanyUserIsVendorAdmin(Integer user, Integer vendor, Pageable pageable) {
        Map params = new HashMap(2);

        params.put("user", user);
        params.put("vendor", vendor);

        return queryExecutor.executeNamedQuery("CheckIfCompanyUserIsVendorAdmin", params, CheckIfCompanyUserIsVendorAdminResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportCheckIfCompanyUserIsVendorAdmin(ExportType exportType, Integer user, Integer vendor, Pageable pageable) {
        Map params = new HashMap(2);

        params.put("user", user);
        params.put("vendor", vendor);

        return queryExecutor.exportNamedQueryData("CheckIfCompanyUserIsVendorAdmin", params, exportType, CheckIfCompanyUserIsVendorAdminResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<AllFeesOfFormsForCreatedByAndSharedWithByMunicipalityResponse> executeAllFeesOfFormsForCreatedByAndSharedWithByMunicipality(Boolean allowPayment, Integer municipalityId, String paidStatus, Integer userId, Pageable pageable) {
        Map params = new HashMap(4);

        params.put("allowPayment", allowPayment);
        params.put("municipalityId", municipalityId);
        params.put("paidStatus", paidStatus);
        params.put("userId", userId);

        return queryExecutor.executeNamedQuery("AllFeesOfFormsForCreatedByAndSharedWithByMunicipality", params, AllFeesOfFormsForCreatedByAndSharedWithByMunicipalityResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportAllFeesOfFormsForCreatedByAndSharedWithByMunicipality(ExportType exportType, Boolean allowPayment, Integer municipalityId, String paidStatus, Integer userId, Pageable pageable) {
        Map params = new HashMap(4);

        params.put("allowPayment", allowPayment);
        params.put("municipalityId", municipalityId);
        params.put("paidStatus", paidStatus);
        params.put("userId", userId);

        return queryExecutor.exportNamedQueryData("AllFeesOfFormsForCreatedByAndSharedWithByMunicipality", params, exportType, AllFeesOfFormsForCreatedByAndSharedWithByMunicipalityResponse.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public Integer executeUpdateProjectDetails(UpdateProjectDetailsRequest updateProjectDetailsRequest) {
        Map params = new HashMap(5);

        params.put("ProjectName", updateProjectDetailsRequest.getProjectName());
        params.put("ProjectGoals", updateProjectDetailsRequest.getProjectGoals());
        params.put("EstStartDate", updateProjectDetailsRequest.getEstStartDate());
        params.put("EstEndDate", updateProjectDetailsRequest.getEstEndDate());
        params.put("project", updateProjectDetailsRequest.getProject());

        return queryExecutor.executeNamedQueryForUpdate("UpdateProjectDetails", params);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public Integer executeInsertUserPreference(InsertUserPreferenceRequest insertUserPreferenceRequest) {
        Map params = new HashMap(2);

        params.put("UserId", insertUserPreferenceRequest.getUserId());
        params.put("PreferenceId", insertUserPreferenceRequest.getPreferenceId());

        return queryExecutor.executeNamedQueryForUpdate("InsertUserPreference", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<CountOfMuncipalityApplicationsByVendorResponse> executeCountOfMuncipalityApplicationsByVendor(Integer vendorId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("VendorId", vendorId);

        return queryExecutor.executeNamedQuery("CountOfMuncipalityApplicationsByVendor", params, CountOfMuncipalityApplicationsByVendorResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportCountOfMuncipalityApplicationsByVendor(ExportType exportType, Integer vendorId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("VendorId", vendorId);

        return queryExecutor.exportNamedQueryData("CountOfMuncipalityApplicationsByVendor", params, exportType, CountOfMuncipalityApplicationsByVendorResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<AllFeeFormCountByMunicipalityResponse> executeAllFeeFormCountByMunicipality(Boolean allowPayment, String paidStatus, Integer municipalityId, Integer userId, Pageable pageable) {
        Map params = new HashMap(4);

        params.put("allowPayment", allowPayment);
        params.put("paidStatus", paidStatus);
        params.put("municipalityId", municipalityId);
        params.put("userId", userId);

        return queryExecutor.executeNamedQuery("AllFeeFormCountByMunicipality", params, AllFeeFormCountByMunicipalityResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportAllFeeFormCountByMunicipality(ExportType exportType, Boolean allowPayment, String paidStatus, Integer municipalityId, Integer userId, Pageable pageable) {
        Map params = new HashMap(4);

        params.put("allowPayment", allowPayment);
        params.put("paidStatus", paidStatus);
        params.put("municipalityId", municipalityId);
        params.put("userId", userId);

        return queryExecutor.exportNamedQueryData("AllFeeFormCountByMunicipality", params, exportType, AllFeeFormCountByMunicipalityResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<UserSubscriptionsCountForMunicipalityResponse> executeUserSubscriptionsCountForMunicipality(Integer municipalityId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("municipalityId", municipalityId);

        return queryExecutor.executeNamedQuery("userSubscriptionsCountForMunicipality", params, UserSubscriptionsCountForMunicipalityResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportUserSubscriptionsCountForMunicipality(ExportType exportType, Integer municipalityId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("municipalityId", municipalityId);

        return queryExecutor.exportNamedQueryData("userSubscriptionsCountForMunicipality", params, exportType, UserSubscriptionsCountForMunicipalityResponse.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public Integer executeUpdateFeesStatus(UpdateFeesStatusRequest updateFeesStatusRequest) {
        Map params = new HashMap(2);

        params.put("status", updateFeesStatusRequest.getStatus());
        params.put("feeEntry", updateFeesStatusRequest.getFeeEntry());

        return queryExecutor.executeNamedQueryForUpdate("UpdateFeesStatus", params);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public Integer executeAddGIStoProjects(AddGistoProjectsRequest addGistoProjectsRequest) {
        Map params = new HashMap(4);

        params.put("GISRecordId", addGistoProjectsRequest.getGisrecordId());
        params.put("RelatedProjectGUID", addGistoProjectsRequest.getRelatedProjectGuid());
        params.put("AddedByUser", addGistoProjectsRequest.getAddedByUser());
        params.put("AddedAt", addGistoProjectsRequest.getAddedAt());

        return queryExecutor.executeNamedQueryForUpdate("AddGIStoProjects", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<CountOfUserFormsResponse> executeCountOfUserForms(Boolean closed, Integer creatorUser, Integer sharedWithUser, Pageable pageable) {
        Map params = new HashMap(3);

        params.put("closed", closed);
        params.put("creatorUser", creatorUser);
        params.put("sharedWithUser", sharedWithUser);

        return queryExecutor.executeNamedQuery("CountOfUserForms", params, CountOfUserFormsResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportCountOfUserForms(ExportType exportType, Boolean closed, Integer creatorUser, Integer sharedWithUser, Pageable pageable) {
        Map params = new HashMap(3);

        params.put("closed", closed);
        params.put("creatorUser", creatorUser);
        params.put("sharedWithUser", sharedWithUser);

        return queryExecutor.exportNamedQueryData("CountOfUserForms", params, exportType, CountOfUserFormsResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<CountOfFormsForMunicipalityResponse> executeCountOfFormsForMunicipality(Integer municipalityId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("MunicipalityId", municipalityId);

        return queryExecutor.executeNamedQuery("CountOfFormsForMunicipality", params, CountOfFormsForMunicipalityResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportCountOfFormsForMunicipality(ExportType exportType, Integer municipalityId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("MunicipalityId", municipalityId);

        return queryExecutor.exportNamedQueryData("CountOfFormsForMunicipality", params, exportType, CountOfFormsForMunicipalityResponse.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public Integer executeUpdateDevFormDetailsForCXAdmin(UpdateDevFormDetailsForCxadminRequest updateDevFormDetailsForCxadminRequest) {
        Map params = new HashMap(3);

        params.put("Report", updateDevFormDetailsForCxadminRequest.getReport());
        params.put("FormTableName", updateDevFormDetailsForCxadminRequest.getFormTableName());
        params.put("form", updateDevFormDetailsForCxadminRequest.getForm());

        return queryExecutor.executeNamedQueryForUpdate("UpdateDevFormDetailsForCXAdmin", params);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public Integer executeUpdateVendorForMasterForms(UpdateVendorForMasterFormsRequest updateVendorForMasterFormsRequest) {
        Map params = new HashMap(2);

        params.put("CXVendorId", updateVendorForMasterFormsRequest.getCxvendorId());
        params.put("FormGUID", updateVendorForMasterFormsRequest.getFormGuid());

        return queryExecutor.executeNamedQueryForUpdate("UpdateVendorForMasterForms", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<EmployeesOrAdminsMunicipalitiesResponse> executeEmployeesOrAdminsMunicipalities(Integer user, String role, Pageable pageable) {
        Map params = new HashMap(2);

        params.put("user", user);
        params.put("role", role);

        return queryExecutor.executeNamedQuery("EmployeesOrAdminsMunicipalities", params, EmployeesOrAdminsMunicipalitiesResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportEmployeesOrAdminsMunicipalities(ExportType exportType, Integer user, String role, Pageable pageable) {
        Map params = new HashMap(2);

        params.put("user", user);
        params.put("role", role);

        return queryExecutor.exportNamedQueryData("EmployeesOrAdminsMunicipalities", params, exportType, EmployeesOrAdminsMunicipalitiesResponse.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public Integer executeUpdateForceInspectionSequenceForForm(UpdateForceInspectionSequenceForFormRequest updateForceInspectionSequenceForFormRequest) {
        Map params = new HashMap(2);

        params.put("ForceInspectionSequence", updateForceInspectionSequenceForFormRequest.getForceInspectionSequence());
        params.put("form", updateForceInspectionSequenceForFormRequest.getForm());

        return queryExecutor.executeNamedQueryForUpdate("UpdateForceInspectionSequenceForForm", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<CountOfVendorsResponse> executeCountOfVendors(Integer vendor, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("vendor", vendor);

        return queryExecutor.executeNamedQuery("CountOfVendors", params, CountOfVendorsResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportCountOfVendors(ExportType exportType, Integer vendor, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("vendor", vendor);

        return queryExecutor.exportNamedQueryData("CountOfVendors", params, exportType, CountOfVendorsResponse.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public Integer executeUpdateMunicipalityInfo(UpdateMunicipalityInfoRequest updateMunicipalityInfoRequest) {
        Map params = new HashMap(9);

        params.put("mn", updateMunicipalityInfoRequest.getMn());
        params.put("em", updateMunicipalityInfoRequest.getEm());
        params.put("ph", updateMunicipalityInfoRequest.getPh());
        params.put("ad1", updateMunicipalityInfoRequest.getAd1());
        params.put("ad2", updateMunicipalityInfoRequest.getAd2());
        params.put("st", updateMunicipalityInfoRequest.getSt());
        params.put("ct", updateMunicipalityInfoRequest.getCt());
        params.put("pc", updateMunicipalityInfoRequest.getPc());
        params.put("municipality", updateMunicipalityInfoRequest.getMunicipality());

        return queryExecutor.executeNamedQueryForUpdate("UpdateMunicipalityInfo", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<CountOfUserFormsForMunicipalityResponse> executeCountOfUserFormsForMunicipality(Integer municipalityId, Boolean closed, Integer creatorUser, Integer sharedWithUser, Pageable pageable) {
        Map params = new HashMap(4);

        params.put("MunicipalityId", municipalityId);
        params.put("closed", closed);
        params.put("creatorUser", creatorUser);
        params.put("sharedWithUser", sharedWithUser);

        return queryExecutor.executeNamedQuery("CountOfUserFormsForMunicipality", params, CountOfUserFormsForMunicipalityResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportCountOfUserFormsForMunicipality(ExportType exportType, Integer municipalityId, Boolean closed, Integer creatorUser, Integer sharedWithUser, Pageable pageable) {
        Map params = new HashMap(4);

        params.put("MunicipalityId", municipalityId);
        params.put("closed", closed);
        params.put("creatorUser", creatorUser);
        params.put("sharedWithUser", sharedWithUser);

        return queryExecutor.exportNamedQueryData("CountOfUserFormsForMunicipality", params, exportType, CountOfUserFormsForMunicipalityResponse.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public Integer executeDeleteToken(String token) {
        Map params = new HashMap(1);

        params.put("token", token);

        return queryExecutor.executeNamedQueryForUpdate("deleteToken", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<CountOfAllProjectsForUsersAndSharedWithResponse> executeCountOfAllProjectsForUsersAndSharedWith(Boolean active, Integer creatorUser, Integer sharedWithUser, Pageable pageable) {
        Map params = new HashMap(3);

        params.put("Active", active);
        params.put("creatorUser", creatorUser);
        params.put("sharedWithUser", sharedWithUser);

        return queryExecutor.executeNamedQuery("CountOfAllProjectsForUsersAndSharedWith", params, CountOfAllProjectsForUsersAndSharedWithResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportCountOfAllProjectsForUsersAndSharedWith(ExportType exportType, Boolean active, Integer creatorUser, Integer sharedWithUser, Pageable pageable) {
        Map params = new HashMap(3);

        params.put("Active", active);
        params.put("creatorUser", creatorUser);
        params.put("sharedWithUser", sharedWithUser);

        return queryExecutor.exportNamedQueryData("CountOfAllProjectsForUsersAndSharedWith", params, exportType, CountOfAllProjectsForUsersAndSharedWithResponse.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public Integer executeInsertTagForMessage(InsertTagForMessageRequest insertTagForMessageRequest) {
        Map params = new HashMap(2);

        params.put("FormMessageId", insertTagForMessageRequest.getFormMessageId());
        params.put("TaggedPersonId", insertTagForMessageRequest.getTaggedPersonId());

        return queryExecutor.executeNamedQueryForUpdate("InsertTagForMessage", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<ManualFeeTypeCountForMunicipalityResponse> executeManualFeeTypeCountForMunicipality(Integer municipalityId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("MunicipalityId", municipalityId);

        return queryExecutor.executeNamedQuery("ManualFeeTypeCountForMunicipality", params, ManualFeeTypeCountForMunicipalityResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportManualFeeTypeCountForMunicipality(ExportType exportType, Integer municipalityId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("MunicipalityId", municipalityId);

        return queryExecutor.exportNamedQueryData("ManualFeeTypeCountForMunicipality", params, exportType, ManualFeeTypeCountForMunicipalityResponse.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public Integer executeInsertSubscription(InsertSubscriptionRequest insertSubscriptionRequest) {
        Map params = new HashMap(3);

        params.put("UserId", insertSubscriptionRequest.getUserId());
        params.put("MunicipalityId", insertSubscriptionRequest.getMunicipalityId());
        params.put("DateSubscribed", insertSubscriptionRequest.getDateSubscribed());

        return queryExecutor.executeNamedQueryForUpdate("InsertSubscription", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<GetProcessGroupMemebersByFormGuidResponse> executeGetProcessGroupMemebersByFormGUID(String formGuid, Integer userId, Pageable pageable) {
        Map params = new HashMap(2);

        params.put("FormGUID", formGuid);
        params.put("UserId", userId);

        return queryExecutor.executeNamedQuery("GetProcessGroupMemebersByFormGUID", params, GetProcessGroupMemebersByFormGuidResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportGetProcessGroupMemebersByFormGUID(ExportType exportType, String formGuid, Integer userId, Pageable pageable) {
        Map params = new HashMap(2);

        params.put("FormGUID", formGuid);
        params.put("UserId", userId);

        return queryExecutor.exportNamedQueryData("GetProcessGroupMemebersByFormGUID", params, exportType, GetProcessGroupMemebersByFormGuidResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<AdminVendorsListResponse> executeAdminVendorsList(Integer user, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("user", user);

        return queryExecutor.executeNamedQuery("AdminVendorsList", params, AdminVendorsListResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportAdminVendorsList(ExportType exportType, Integer user, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("user", user);

        return queryExecutor.exportNamedQueryData("AdminVendorsList", params, exportType, AdminVendorsListResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<GetFormTypesByCategoriesAndMunicipalitiesResponse> executeGetFormTypesByCategoriesAndMunicipalities(Integer formCategory, Integer municipalityId, Integer userId, Pageable pageable) {
        Map params = new HashMap(3);

        params.put("formCategory", formCategory);
        params.put("municipalityId", municipalityId);
        params.put("userId", userId);

        return queryExecutor.executeNamedQuery("GetFormTypesByCategoriesAndMunicipalities", params, GetFormTypesByCategoriesAndMunicipalitiesResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportGetFormTypesByCategoriesAndMunicipalities(ExportType exportType, Integer formCategory, Integer municipalityId, Integer userId, Pageable pageable) {
        Map params = new HashMap(3);

        params.put("formCategory", formCategory);
        params.put("municipalityId", municipalityId);
        params.put("userId", userId);

        return queryExecutor.exportNamedQueryData("GetFormTypesByCategoriesAndMunicipalities", params, exportType, GetFormTypesByCategoriesAndMunicipalitiesResponse.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public Integer executeDeleteRoleForMuncipality(String role, Integer municipality, Integer user) {
        Map params = new HashMap(3);

        params.put("role", role);
        params.put("municipality", municipality);
        params.put("user", user);

        return queryExecutor.executeNamedQueryForUpdate("DeleteRoleForMuncipality", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<GetMunicipalityEmployeesResponse> executeGetMunicipalityEmployees(String roleName, Integer municipalityId, String email, Pageable pageable) {
        Map params = new HashMap(3);

        params.put("RoleName", roleName);
        params.put("municipalityId", municipalityId);
        params.put("email", email);

        return queryExecutor.executeNamedQuery("GetMunicipalityEmployees", params, GetMunicipalityEmployeesResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportGetMunicipalityEmployees(ExportType exportType, String roleName, Integer municipalityId, String email, Pageable pageable) {
        Map params = new HashMap(3);

        params.put("RoleName", roleName);
        params.put("municipalityId", municipalityId);
        params.put("email", email);

        return queryExecutor.exportNamedQueryData("GetMunicipalityEmployees", params, exportType, GetMunicipalityEmployeesResponse.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public Integer executeMapAsAdminForVendor(MapAsAdminForVendorRequest mapAsAdminForVendorRequest) {
        Map params = new HashMap(2);

        params.put("UserId", mapAsAdminForVendorRequest.getUserId());
        params.put("VendorId", mapAsAdminForVendorRequest.getVendorId());

        return queryExecutor.executeNamedQueryForUpdate("MapAsAdminForVendor", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<CountOfInspectionDesignByMunicipalityResponse> executeCountOfInspectionDesignByMunicipality(Integer municipalityId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("MunicipalityId", municipalityId);

        return queryExecutor.executeNamedQuery("CountOfInspectionDesignByMunicipality", params, CountOfInspectionDesignByMunicipalityResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportCountOfInspectionDesignByMunicipality(ExportType exportType, Integer municipalityId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("MunicipalityId", municipalityId);

        return queryExecutor.exportNamedQueryData("CountOfInspectionDesignByMunicipality", params, exportType, CountOfInspectionDesignByMunicipalityResponse.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public Integer executeInsertFormsIntoProject(InsertFormsIntoProjectRequest insertFormsIntoProjectRequest) {
        Map params = new HashMap(5);

        params.put("RelatedProjectGuid", insertFormsIntoProjectRequest.getRelatedProjectGuid());
        params.put("RelatedFormGUID", insertFormsIntoProjectRequest.getRelatedFormGuid());
        params.put("AddedByUser", insertFormsIntoProjectRequest.getAddedByUser());
        params.put("AddedAt", insertFormsIntoProjectRequest.getAddedAt());
        params.put("Comments", insertFormsIntoProjectRequest.getComments());

        return queryExecutor.executeNamedQueryForUpdate("InsertFormsIntoProject", params);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public Integer executeRecordFormHistory(RecordFormHistoryRequest recordFormHistoryRequest) {
        Map params = new HashMap(6);

        params.put("FormGUID", recordFormHistoryRequest.getFormGuid());
        params.put("FormTypeId", recordFormHistoryRequest.getFormTypeId());
        params.put("NewStatusId", recordFormHistoryRequest.getNewStatusId());
        params.put("OldStatusId", recordFormHistoryRequest.getOldStatusId());
        params.put("Comments", recordFormHistoryRequest.getComments());
        params.put("CreatedBy", recordFormHistoryRequest.getCreatedBy());

        return queryExecutor.executeNamedQueryForUpdate("RecordFormHistory", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<GetWriteAccessGroupMembersByFormGuidResponse> executeGetWriteAccessGroupMembersByFormGUID(String formGuid, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("FormGUID", formGuid);

        return queryExecutor.executeNamedQuery("GetWriteAccessGroupMembersByFormGUID", params, GetWriteAccessGroupMembersByFormGuidResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportGetWriteAccessGroupMembersByFormGUID(ExportType exportType, String formGuid, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("FormGUID", formGuid);

        return queryExecutor.exportNamedQueryData("GetWriteAccessGroupMembersByFormGUID", params, exportType, GetWriteAccessGroupMembersByFormGuidResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<FormsByCategoryForDashBoardResponse> executeFormsByCategoryForDashBoard(Integer municipality, Timestamp startDate, Timestamp endDate, Pageable pageable) {
        Map params = new HashMap(3);

        params.put("municipality", municipality);
        params.put("startDate", startDate);
        params.put("endDate", endDate);

        return queryExecutor.executeNamedQuery("FormsByCategoryForDashBoard", params, FormsByCategoryForDashBoardResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportFormsByCategoryForDashBoard(ExportType exportType, Integer municipality, Timestamp startDate, Timestamp endDate, Pageable pageable) {
        Map params = new HashMap(3);

        params.put("municipality", municipality);
        params.put("startDate", startDate);
        params.put("endDate", endDate);

        return queryExecutor.exportNamedQueryData("FormsByCategoryForDashBoard", params, exportType, FormsByCategoryForDashBoardResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<EmployeesMunicipalitiesResponse> executeEmployeesMunicipalities(Integer user, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("user", user);

        return queryExecutor.executeNamedQuery("EmployeesMunicipalities", params, EmployeesMunicipalitiesResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportEmployeesMunicipalities(ExportType exportType, Integer user, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("user", user);

        return queryExecutor.exportNamedQueryData("EmployeesMunicipalities", params, exportType, EmployeesMunicipalitiesResponse.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public Integer executeRemoveVendorFromMasterForms(RemoveVendorFromMasterFormsRequest removeVendorFromMasterFormsRequest) {
        Map params = new HashMap(1);

        params.put("hb", removeVendorFromMasterFormsRequest.getHb());

        return queryExecutor.executeNamedQueryForUpdate("RemoveVendorFromMasterForms", params);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public Integer executeUpdateFormStatusInMasterForms(UpdateFormStatusInMasterFormsRequest updateFormStatusInMasterFormsRequest) {
        Map params = new HashMap(3);

        params.put("formStatus", updateFormStatusInMasterFormsRequest.getFormStatus());
        params.put("closed", updateFormStatusInMasterFormsRequest.getClosed());
        params.put("FormGUID", updateFormStatusInMasterFormsRequest.getFormGuid());

        return queryExecutor.executeNamedQueryForUpdate("UpdateFormStatusInMasterForms", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<ProjectFormsResponse> executeProjectForms(String project, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("project", project);

        return queryExecutor.executeNamedQuery("ProjectForms", params, ProjectFormsResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportProjectForms(ExportType exportType, String project, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("project", project);

        return queryExecutor.exportNamedQueryData("ProjectForms", params, exportType, ProjectFormsResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<GetFeeIdsOfUserInCartResponse> executeGetFeeIdsOfUserInCart(Integer user, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("user", user);

        return queryExecutor.executeNamedQuery("GetFeeIdsOfUserInCart", params, GetFeeIdsOfUserInCartResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportGetFeeIdsOfUserInCart(ExportType exportType, Integer user, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("user", user);

        return queryExecutor.exportNamedQueryData("GetFeeIdsOfUserInCart", params, exportType, GetFeeIdsOfUserInCartResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<CountOfCasesForMunicipalityResponse> executeCountOfCasesForMunicipality(Integer municipalityId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("MunicipalityId", municipalityId);

        return queryExecutor.executeNamedQuery("CountOfCasesForMunicipality", params, CountOfCasesForMunicipalityResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportCountOfCasesForMunicipality(ExportType exportType, Integer municipalityId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("MunicipalityId", municipalityId);

        return queryExecutor.exportNamedQueryData("CountOfCasesForMunicipality", params, exportType, CountOfCasesForMunicipalityResponse.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public Integer executeUpdatePrimaryVendorStatusInVEndor2Forms(UpdatePrimaryVendorStatusInVendor2formsRequest updatePrimaryVendorStatusInVendor2formsRequest) {
        Map params = new HashMap(2);

        params.put("pv", updatePrimaryVendorStatusInVendor2formsRequest.getPv());
        params.put("form", updatePrimaryVendorStatusInVendor2formsRequest.getForm());

        return queryExecutor.executeNamedQueryForUpdate("UpdatePrimaryVendorStatusInVEndor2Forms", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<MunicipalityProjectsResponse> executeMunicipalityProjects(Boolean active, Integer municipalityId, Pageable pageable) {
        Map params = new HashMap(2);

        params.put("Active", active);
        params.put("MunicipalityId", municipalityId);

        return queryExecutor.executeNamedQuery("MunicipalityProjects", params, MunicipalityProjectsResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportMunicipalityProjects(ExportType exportType, Boolean active, Integer municipalityId, Pageable pageable) {
        Map params = new HashMap(2);

        params.put("Active", active);
        params.put("MunicipalityId", municipalityId);

        return queryExecutor.exportNamedQueryData("MunicipalityProjects", params, exportType, MunicipalityProjectsResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<GetMunicipalityGroupIdIdsResponse> executeGetMunicipalityGroupIdIDs(Integer userId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("userID", userId);

        return queryExecutor.executeNamedQuery("getMunicipalityGroupIdIDs", params, GetMunicipalityGroupIdIdsResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportGetMunicipalityGroupIdIDs(ExportType exportType, Integer userId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("userID", userId);

        return queryExecutor.exportNamedQueryData("getMunicipalityGroupIdIDs", params, exportType, GetMunicipalityGroupIdIdsResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<UserSubscriptions> executeUserSubscriptionsByMunicipality(Integer municipalityId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("municipalityId", municipalityId);

        return queryExecutor.executeNamedQuery("UserSubscriptionsByMunicipality", params, UserSubscriptions.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportUserSubscriptionsByMunicipality(ExportType exportType, Integer municipalityId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("municipalityId", municipalityId);

        return queryExecutor.exportNamedQueryData("UserSubscriptionsByMunicipality", params, exportType, UserSubscriptions.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<FormsForUsersAndSharedResponse> executeFormsForUsersAndShared(Boolean closed, Integer creatorUser, Integer sharedWithUser, Long municipalityId, Pageable pageable) {
        Map params = new HashMap(4);

        params.put("closed", closed);
        params.put("creatorUser", creatorUser);
        params.put("sharedWithUser", sharedWithUser);
        params.put("municipalityId", municipalityId);

        return queryExecutor.executeNamedQuery("FormsForUsersAndShared", params, FormsForUsersAndSharedResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportFormsForUsersAndShared(ExportType exportType, Boolean closed, Integer creatorUser, Integer sharedWithUser, Long municipalityId, Pageable pageable) {
        Map params = new HashMap(4);

        params.put("closed", closed);
        params.put("creatorUser", creatorUser);
        params.put("sharedWithUser", sharedWithUser);
        params.put("municipalityId", municipalityId);

        return queryExecutor.exportNamedQueryData("FormsForUsersAndShared", params, exportType, FormsForUsersAndSharedResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<GetUserIdResponse> executeGetUserID(String email, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("Email", email);

        return queryExecutor.executeNamedQuery("getUserID", params, GetUserIdResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportGetUserID(ExportType exportType, String email, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("Email", email);

        return queryExecutor.exportNamedQueryData("getUserID", params, exportType, GetUserIdResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<GetListofUsersResponse> executeGetListofUsers(Integer municipalityId, String email, Pageable pageable) {
        Map params = new HashMap(2);

        params.put("municipalityID", municipalityId);
        params.put("Email", email);

        return queryExecutor.executeNamedQuery("getListofUsers", params, GetListofUsersResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportGetListofUsers(ExportType exportType, Integer municipalityId, String email, Pageable pageable) {
        Map params = new HashMap(2);

        params.put("municipalityID", municipalityId);
        params.put("Email", email);

        return queryExecutor.exportNamedQueryData("getListofUsers", params, exportType, GetListofUsersResponse.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public Integer executeInsertNewRole(InsertNewRoleRequest insertNewRoleRequest) {
        Map params = new HashMap(4);

        params.put("RoleName", insertNewRoleRequest.getRoleName());
        params.put("MunicipalityId", insertNewRoleRequest.getMunicipalityId());
        params.put("Description", insertNewRoleRequest.getDescription());
        params.put("UserId", insertNewRoleRequest.getUserId());

        return queryExecutor.executeNamedQueryForUpdate("InsertNewRole", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<BannedDetailsResponse> executeBannedDetails(String emailid, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("emailid", emailid);

        return queryExecutor.executeNamedQuery("bannedDetails", params, BannedDetailsResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportBannedDetails(ExportType exportType, String emailid, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("emailid", emailid);

        return queryExecutor.exportNamedQueryData("bannedDetails", params, exportType, BannedDetailsResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<GetVendorApprovalListByMunicipalityResponse> executeGetVendorApprovalListByMunicipality(String approvalStatus, Integer municipalityId, Boolean a, Pageable pageable) {
        Map params = new HashMap(3);

        params.put("ApprovalStatus", approvalStatus);
        params.put("MunicipalityId", municipalityId);
        params.put("a", a);

        return queryExecutor.executeNamedQuery("GetVendorApprovalListByMunicipality", params, GetVendorApprovalListByMunicipalityResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportGetVendorApprovalListByMunicipality(ExportType exportType, String approvalStatus, Integer municipalityId, Boolean a, Pageable pageable) {
        Map params = new HashMap(3);

        params.put("ApprovalStatus", approvalStatus);
        params.put("MunicipalityId", municipalityId);
        params.put("a", a);

        return queryExecutor.exportNamedQueryData("GetVendorApprovalListByMunicipality", params, exportType, GetVendorApprovalListByMunicipalityResponse.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public Integer executeDeleteMunicipalityGroup(Integer municipalityGroupId, Integer userId) {
        Map params = new HashMap(2);

        params.put("MunicipalityGroupId", municipalityGroupId);
        params.put("UserId", userId);

        return queryExecutor.executeNamedQueryForUpdate("deleteMunicipalityGroup", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<VerifyPasswordResetTokenResponse> executeVerifyPasswordResetToken(String token, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("token", token);

        return queryExecutor.executeNamedQuery("verifyPasswordResetToken", params, VerifyPasswordResetTokenResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportVerifyPasswordResetToken(ExportType exportType, String token, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("token", token);

        return queryExecutor.exportNamedQueryData("verifyPasswordResetToken", params, exportType, VerifyPasswordResetTokenResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<GetListofGroupNameResponse> executeGetListofGroupName(List<Integer> municipalityGroupId, Integer municipalityId, Pageable pageable) {
        Map params = new HashMap(2);

        params.put("MunicipalityGroupID", municipalityGroupId);
        params.put("MunicipalityID", municipalityId);

        return queryExecutor.executeNamedQuery("getListofGroupName", params, GetListofGroupNameResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportGetListofGroupName(ExportType exportType, List<Integer> municipalityGroupId, Integer municipalityId, Pageable pageable) {
        Map params = new HashMap(2);

        params.put("MunicipalityGroupID", municipalityGroupId);
        params.put("MunicipalityID", municipalityId);

        return queryExecutor.exportNamedQueryData("getListofGroupName", params, exportType, GetListofGroupNameResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<GetProjectGisrecordsResponse> executeGetProjectGisrecords(String relatedProjectGuid, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("relatedProjectGuid", relatedProjectGuid);

        return queryExecutor.executeNamedQuery("GetProjectGisrecords", params, GetProjectGisrecordsResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportGetProjectGisrecords(ExportType exportType, String relatedProjectGuid, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("relatedProjectGuid", relatedProjectGuid);

        return queryExecutor.exportNamedQueryData("GetProjectGisrecords", params, exportType, GetProjectGisrecordsResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<SubDivisonCountResponse> executeSubDivisonCount(Integer municipalityId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("municipalityId", municipalityId);

        return queryExecutor.executeNamedQuery("SubDivisonCount", params, SubDivisonCountResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportSubDivisonCount(ExportType exportType, Integer municipalityId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("municipalityId", municipalityId);

        return queryExecutor.exportNamedQueryData("SubDivisonCount", params, exportType, SubDivisonCountResponse.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public Integer executeDeleteAllMunicipalityRoles(Integer municipalityId, Integer userId) {
        Map params = new HashMap(2);

        params.put("MunicipalityId", municipalityId);
        params.put("UserId", userId);

        return queryExecutor.executeNamedQueryForUpdate("DeleteAllMunicipalityRoles", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<GetRolesForMunicipalityResponse> executeGetRolesForMunicipality(String role, Integer municipality, Pageable pageable) {
        Map params = new HashMap(2);

        params.put("role", role);
        params.put("municipality", municipality);

        return queryExecutor.executeNamedQuery("GetRolesForMunicipality", params, GetRolesForMunicipalityResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportGetRolesForMunicipality(ExportType exportType, String role, Integer municipality, Pageable pageable) {
        Map params = new HashMap(2);

        params.put("role", role);
        params.put("municipality", municipality);

        return queryExecutor.exportNamedQueryData("GetRolesForMunicipality", params, exportType, GetRolesForMunicipalityResponse.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public Integer executeResetPasswordForUser(ResetPasswordForUserRequest resetPasswordForUserRequest) {
        Map params = new HashMap(2);

        params.put("newPassword", resetPasswordForUserRequest.getNewPassword());
        params.put("token", resetPasswordForUserRequest.getToken());

        return queryExecutor.executeNamedQueryForUpdate("resetPasswordForUser", params);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public Integer executeInsertGroups(InsertGroupsRequest insertGroupsRequest) {
        Map params = new HashMap(3);

        params.put("GroupName", insertGroupsRequest.getGroupName());
        params.put("GroupDescription", insertGroupsRequest.getGroupDescription());
        params.put("MunicipalityId", insertGroupsRequest.getMunicipalityId());

        return queryExecutor.executeNamedQueryForUpdate("InsertGroups", params);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public Integer executeUpdateUserPreferences(UpdateUserPreferencesRequest updateUserPreferencesRequest) {
        Map params = new HashMap(2);

        params.put("PreferenceId", updateUserPreferencesRequest.getPreferenceId());
        params.put("user", updateUserPreferencesRequest.getUser());

        return queryExecutor.executeNamedQueryForUpdate("UpdateUserPreferences", params);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public Integer executeAddGIStoForms(AddGistoFormsRequest addGistoFormsRequest) {
        Map params = new HashMap(4);

        params.put("GISRecordId", addGistoFormsRequest.getGisrecordId());
        params.put("RelatedFormGUID", addGistoFormsRequest.getRelatedFormGuid());
        params.put("AddedBy", addGistoFormsRequest.getAddedBy());
        params.put("AddedTime", addGistoFormsRequest.getAddedTime());

        return queryExecutor.executeNamedQueryForUpdate("AddGIStoForms", params);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public Integer executeAddMemeberToProject(AddMemeberToProjectRequest addMemeberToProjectRequest) {
        Map params = new HashMap(4);

        params.put("RelatedProjectGUID", addMemeberToProjectRequest.getRelatedProjectGuid());
        params.put("ProjectSharedOn", addMemeberToProjectRequest.getProjectSharedOn());
        params.put("ProjectSharedWith", addMemeberToProjectRequest.getProjectSharedWith());
        params.put("ProjectSharedBy", addMemeberToProjectRequest.getProjectSharedBy());

        return queryExecutor.executeNamedQueryForUpdate("AddMemeberToProject", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<GetOwnersForGisRecordsResponse> executeGetOwnersForGisRecords(List<Integer> gisRecordIds, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("gisRecordIds", gisRecordIds);

        return queryExecutor.executeNamedQuery("getOwnersForGisRecords", params, GetOwnersForGisRecordsResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportGetOwnersForGisRecords(ExportType exportType, List<Integer> gisRecordIds, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("gisRecordIds", gisRecordIds);

        return queryExecutor.exportNamedQueryData("getOwnersForGisRecords", params, exportType, GetOwnersForGisRecordsResponse.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public Integer executeInsertFormsToInspectionsMapping(InsertFormsToInspectionsMappingRequest insertFormsToInspectionsMappingRequest) {
        Map params = new HashMap(3);

        params.put("RelatedFormGUID", insertFormsToInspectionsMappingRequest.getRelatedFormGuid());
        params.put("RelatedInspectionGUID", insertFormsToInspectionsMappingRequest.getRelatedInspectionGuid());
        params.put("AddedBy", insertFormsToInspectionsMappingRequest.getAddedBy());

        return queryExecutor.executeNamedQueryForUpdate("InsertFormsToInspectionsMapping", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<FetchRolesForUserWithMunicipalityResponse> executeFetchRolesForUserWithMunicipality(Integer user, Integer municipality, Pageable pageable) {
        Map params = new HashMap(2);

        params.put("user", user);
        params.put("municipality", municipality);

        return queryExecutor.executeNamedQuery("FetchRolesForUserWithMunicipality", params, FetchRolesForUserWithMunicipalityResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportFetchRolesForUserWithMunicipality(ExportType exportType, Integer user, Integer municipality, Pageable pageable) {
        Map params = new HashMap(2);

        params.put("user", user);
        params.put("municipality", municipality);

        return queryExecutor.exportNamedQueryData("FetchRolesForUserWithMunicipality", params, exportType, FetchRolesForUserWithMunicipalityResponse.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public Integer executeUpdateAssessFeeYN(UpdateAssessFeeYnRequest updateAssessFeeYnRequest) {
        Map params = new HashMap(2);

        params.put("AssessFeeYN", updateAssessFeeYnRequest.getAssessFeeYn());
        params.put("id", updateAssessFeeYnRequest.getId());

        return queryExecutor.executeNamedQueryForUpdate("updateAssessFeeYN", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<VendorApprovals> executeVendorsByMunicipalityAndStatus(Integer municipalityId, String approvalStatus, Boolean active, Pageable pageable) {
        Map params = new HashMap(3);

        params.put("municipalityId", municipalityId);
        params.put("approvalStatus", approvalStatus);
        params.put("active", active);

        return queryExecutor.executeNamedQuery("VendorsByMunicipalityAndStatus", params, VendorApprovals.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportVendorsByMunicipalityAndStatus(ExportType exportType, Integer municipalityId, String approvalStatus, Boolean active, Pageable pageable) {
        Map params = new HashMap(3);

        params.put("municipalityId", municipalityId);
        params.put("approvalStatus", approvalStatus);
        params.put("active", active);

        return queryExecutor.exportNamedQueryData("VendorsByMunicipalityAndStatus", params, exportType, VendorApprovals.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public Integer executeSetModifiedDateForProject(SetModifiedDateForProjectRequest setModifiedDateForProjectRequest) {
        Map params = new HashMap(2);

        params.put("DateModified", setModifiedDateForProjectRequest.getDateModified());
        params.put("project", setModifiedDateForProjectRequest.getProject());

        return queryExecutor.executeNamedQueryForUpdate("SetModifiedDateForProject", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<CompanyFormsByVendorIdResponse> executeCompanyFormsByVendorId(Boolean closed, Integer vendorId, Pageable pageable) {
        Map params = new HashMap(2);

        params.put("closed", closed);
        params.put("vendorId", vendorId);

        return queryExecutor.executeNamedQuery("CompanyFormsByVendorId", params, CompanyFormsByVendorIdResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportCompanyFormsByVendorId(ExportType exportType, Boolean closed, Integer vendorId, Pageable pageable) {
        Map params = new HashMap(2);

        params.put("closed", closed);
        params.put("vendorId", vendorId);

        return queryExecutor.exportNamedQueryData("CompanyFormsByVendorId", params, exportType, CompanyFormsByVendorIdResponse.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public Integer executeUpdateInfoFromMyProfile(UpdateInfoFromMyProfileRequest updateInfoFromMyProfileRequest) {
        Map params = new HashMap(11);

        params.put("fn", updateInfoFromMyProfileRequest.getFn());
        params.put("ln", updateInfoFromMyProfileRequest.getLn());
        params.put("em", updateInfoFromMyProfileRequest.getEm());
        params.put("ph", updateInfoFromMyProfileRequest.getPh());
        params.put("ad1", updateInfoFromMyProfileRequest.getAd1());
        params.put("ad2", updateInfoFromMyProfileRequest.getAd2());
        params.put("st", updateInfoFromMyProfileRequest.getSt());
        params.put("ct", updateInfoFromMyProfileRequest.getCt());
        params.put("ctry", updateInfoFromMyProfileRequest.getCtry());
        params.put("pc", updateInfoFromMyProfileRequest.getPc());
        params.put("user", updateInfoFromMyProfileRequest.getUser());

        return queryExecutor.executeNamedQueryForUpdate("UpdateInfoFromMyProfile", params);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public Integer executeResetPasswordWithTokenForUser(Integer userid, String token) {
        Map params = new HashMap(2);

        params.put("userid", userid);
        params.put("token", token);

        return queryExecutor.executeNamedQueryForUpdate("resetPasswordWithTokenForUser", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<VendorsLinkedWithFormResponse> executeVendorsLinkedWithForm(String relatedFormGuid, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("RelatedFormGUID", relatedFormGuid);

        return queryExecutor.executeNamedQuery("VendorsLinkedWithForm", params, VendorsLinkedWithFormResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportVendorsLinkedWithForm(ExportType exportType, String relatedFormGuid, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("RelatedFormGUID", relatedFormGuid);

        return queryExecutor.exportNamedQueryData("VendorsLinkedWithForm", params, exportType, VendorsLinkedWithFormResponse.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public Integer executeUpdateRoleForMunicipality(UpdateRoleForMunicipalityRequest updateRoleForMunicipalityRequest) {
        Map params = new HashMap(3);

        params.put("role", updateRoleForMunicipalityRequest.getRole());
        params.put("municipality", updateRoleForMunicipalityRequest.getMunicipality());
        params.put("user", updateRoleForMunicipalityRequest.getUser());

        return queryExecutor.executeNamedQueryForUpdate("UpdateRoleForMunicipality", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<GetFormsForMunicpalityResponse> executeGetFormsForMunicpality(Integer municipalityId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("MunicipalityId", municipalityId);

        return queryExecutor.executeNamedQuery("GetFormsForMunicpality", params, GetFormsForMunicpalityResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportGetFormsForMunicpality(ExportType exportType, Integer municipalityId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("MunicipalityId", municipalityId);

        return queryExecutor.exportNamedQueryData("GetFormsForMunicpality", params, exportType, GetFormsForMunicpalityResponse.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public Integer executeUpdateProcessOwnersForGUID(UpdateProcessOwnersForGuidRequest updateProcessOwnersForGuidRequest) {
        Map params = new HashMap(2);

        params.put("AssignedToGroupId", updateProcessOwnersForGuidRequest.getAssignedToGroupId());
        params.put("GUID", updateProcessOwnersForGuidRequest.getGuid());

        return queryExecutor.executeNamedQueryForUpdate("UpdateProcessOwnersForGUID", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<MasterForms> executeSearchFormByVendor(Timestamp startd, Timestamp endd, Integer formTypeId, Integer municipalityId, Boolean closed, Integer vendorId, Pageable pageable) {
        Map params = new HashMap(6);

        params.put("startd", startd);
        params.put("endd", endd);
        params.put("FormTypeId", formTypeId);
        params.put("municipalityId", municipalityId);
        params.put("closed", closed);
        params.put("vendorId", vendorId);

        return queryExecutor.executeNamedQuery("SearchFormByVendor", params, MasterForms.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportSearchFormByVendor(ExportType exportType, Timestamp startd, Timestamp endd, Integer formTypeId, Integer municipalityId, Boolean closed, Integer vendorId, Pageable pageable) {
        Map params = new HashMap(6);

        params.put("startd", startd);
        params.put("endd", endd);
        params.put("FormTypeId", formTypeId);
        params.put("municipalityId", municipalityId);
        params.put("closed", closed);
        params.put("vendorId", vendorId);

        return queryExecutor.exportNamedQueryData("SearchFormByVendor", params, exportType, MasterForms.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public Integer executeUpdateProjectDescription(UpdateProjectDescriptionRequest updateProjectDescriptionRequest) {
        Map params = new HashMap(2);

        params.put("ProjectDescription", updateProjectDescriptionRequest.getProjectDescription());
        params.put("project", updateProjectDescriptionRequest.getProject());

        return queryExecutor.executeNamedQueryForUpdate("UpdateProjectDescription", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<AllFeesOfFormsForCreatedByAndSharedWithResponse> executeAllFeesOfFormsForCreatedByAndSharedWith(Boolean allowPayment, String paidStatus, Integer userId, Pageable pageable) {
        Map params = new HashMap(3);

        params.put("allowPayment", allowPayment);
        params.put("paidStatus", paidStatus);
        params.put("userId", userId);

        return queryExecutor.executeNamedQuery("AllFeesOfFormsForCreatedByAndSharedWith", params, AllFeesOfFormsForCreatedByAndSharedWithResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportAllFeesOfFormsForCreatedByAndSharedWith(ExportType exportType, Boolean allowPayment, String paidStatus, Integer userId, Pageable pageable) {
        Map params = new HashMap(3);

        params.put("allowPayment", allowPayment);
        params.put("paidStatus", paidStatus);
        params.put("userId", userId);

        return queryExecutor.exportNamedQueryData("AllFeesOfFormsForCreatedByAndSharedWith", params, exportType, AllFeesOfFormsForCreatedByAndSharedWithResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<VendorsCountForMunicipalitiesResponse> executeVendorsCountForMunicipalities(Integer municipalityId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("MunicipalityId", municipalityId);

        return queryExecutor.executeNamedQuery("VendorsCountForMunicipalities", params, VendorsCountForMunicipalitiesResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportVendorsCountForMunicipalities(ExportType exportType, Integer municipalityId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("MunicipalityId", municipalityId);

        return queryExecutor.exportNamedQueryData("VendorsCountForMunicipalities", params, exportType, VendorsCountForMunicipalitiesResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<GetRolesForUserResponse> executeGetRolesForUser(Integer userId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("userId", userId);

        return queryExecutor.executeNamedQuery("getRolesForUser", params, GetRolesForUserResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportGetRolesForUser(ExportType exportType, Integer userId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("userId", userId);

        return queryExecutor.exportNamedQueryData("getRolesForUser", params, exportType, GetRolesForUserResponse.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public Integer executeDeleteFromVendorUsers(Integer user, Integer vendor) {
        Map params = new HashMap(2);

        params.put("user", user);
        params.put("vendor", vendor);

        return queryExecutor.executeNamedQueryForUpdate("DeleteFromVendorUsers", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<CheckingUserWithInVendorUsersResponse> executeCheckingUserWithInVendorUsers(Integer user, Integer vendor, Pageable pageable) {
        Map params = new HashMap(2);

        params.put("user", user);
        params.put("vendor", vendor);

        return queryExecutor.executeNamedQuery("CheckingUserWithInVendorUsers", params, CheckingUserWithInVendorUsersResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportCheckingUserWithInVendorUsers(ExportType exportType, Integer user, Integer vendor, Pageable pageable) {
        Map params = new HashMap(2);

        params.put("user", user);
        params.put("vendor", vendor);

        return queryExecutor.exportNamedQueryData("CheckingUserWithInVendorUsers", params, exportType, CheckingUserWithInVendorUsersResponse.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public Integer executeUpdateVendorStatus(UpdateVendorStatusRequest updateVendorStatusRequest) {
        Map params = new HashMap(7);

        params.put("DateApproved", updateVendorStatusRequest.getDateApproved());
        params.put("ApprovedBy", updateVendorStatusRequest.getApprovedBy());
        params.put("ExpiresDate", updateVendorStatusRequest.getExpiresDate());
        params.put("ApprovalStatus", updateVendorStatusRequest.getApprovalStatus());
        params.put("Reviewer", updateVendorStatusRequest.getReviewer());
        params.put("municipality", updateVendorStatusRequest.getMunicipality());
        params.put("vendor", updateVendorStatusRequest.getVendor());

        return queryExecutor.executeNamedQueryForUpdate("UpdateVendorStatus", params);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public Integer executeDeleteProjectForms(Integer projectForm) {
        Map params = new HashMap(1);

        params.put("projectForm", projectForm);

        return queryExecutor.executeNamedQueryForUpdate("DeleteProjectForms", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<InspectionDesign> executeInspectionDesignForCategoriesMappedToForms(Integer formTypeId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("formTypeId", formTypeId);

        return queryExecutor.executeNamedQuery("InspectionDesignForCategoriesMappedToForms", params, InspectionDesign.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportInspectionDesignForCategoriesMappedToForms(ExportType exportType, Integer formTypeId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("formTypeId", formTypeId);

        return queryExecutor.exportNamedQueryData("InspectionDesignForCategoriesMappedToForms", params, exportType, InspectionDesign.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<GetGis2formsByFormResponse> executeGetGis2formsByForm(String relatedFormGuid, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("relatedFormGuid", relatedFormGuid);

        return queryExecutor.executeNamedQuery("GetGis2formsByForm", params, GetGis2formsByFormResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportGetGis2formsByForm(ExportType exportType, String relatedFormGuid, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("relatedFormGuid", relatedFormGuid);

        return queryExecutor.exportNamedQueryData("GetGis2formsByForm", params, exportType, GetGis2formsByFormResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<UnpaidFormFeeCountResponse> executeUnpaidFormFeeCount(Boolean allowPayment, String paidStatus, Integer userId, Pageable pageable) {
        Map params = new HashMap(3);

        params.put("allowPayment", allowPayment);
        params.put("paidStatus", paidStatus);
        params.put("userId", userId);

        return queryExecutor.executeNamedQuery("UnpaidFormFeeCount", params, UnpaidFormFeeCountResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportUnpaidFormFeeCount(ExportType exportType, Boolean allowPayment, String paidStatus, Integer userId, Pageable pageable) {
        Map params = new HashMap(3);

        params.put("allowPayment", allowPayment);
        params.put("paidStatus", paidStatus);
        params.put("userId", userId);

        return queryExecutor.exportNamedQueryData("UnpaidFormFeeCount", params, exportType, UnpaidFormFeeCountResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<FormsTypesForDashboardResponse> executeFormsTypesForDashboard(Integer municipality, Timestamp startDate, Timestamp endDate, Pageable pageable) {
        Map params = new HashMap(3);

        params.put("municipality", municipality);
        params.put("startDate", startDate);
        params.put("endDate", endDate);

        return queryExecutor.executeNamedQuery("FormsTypesForDashboard", params, FormsTypesForDashboardResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportFormsTypesForDashboard(ExportType exportType, Integer municipality, Timestamp startDate, Timestamp endDate, Pageable pageable) {
        Map params = new HashMap(3);

        params.put("municipality", municipality);
        params.put("startDate", startDate);
        params.put("endDate", endDate);

        return queryExecutor.exportNamedQueryData("FormsTypesForDashboard", params, exportType, FormsTypesForDashboardResponse.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public Integer executeDeleteExistingSubscriptionsForUser(Integer user) {
        Map params = new HashMap(1);

        params.put("user", user);

        return queryExecutor.executeNamedQueryForUpdate("DeleteExistingSubscriptionsForUser", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<MunicipalityCountResponse> executeMunicipalityCount(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("MunicipalityCount", params, MunicipalityCountResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportMunicipalityCount(ExportType exportType, Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.exportNamedQueryData("MunicipalityCount", params, exportType, MunicipalityCountResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<UserSubscriptionsCountResponse> executeUserSubscriptionsCount(Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.executeNamedQuery("userSubscriptionsCount", params, UserSubscriptionsCountResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportUserSubscriptionsCount(ExportType exportType, Pageable pageable) {
        Map params = new HashMap(0);


        return queryExecutor.exportNamedQueryData("userSubscriptionsCount", params, exportType, UserSubscriptionsCountResponse.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public Integer executeInsertFormMessage(InsertFormMessageRequest insertFormMessageRequest) {
        Map params = new HashMap(5);

        params.put("UserId", insertFormMessageRequest.getUserId());
        params.put("RelatedFormGUID", insertFormMessageRequest.getRelatedFormGuid());
        params.put("Message", insertFormMessageRequest.getMessage());
        params.put("PostedAt", insertFormMessageRequest.getPostedAt());
        params.put("MunicipalityMessage", insertFormMessageRequest.getMunicipalityMessage());

        return queryExecutor.executeNamedQueryForUpdate("InsertFormMessage", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Projects> executeProjectsForUsersAndSharedWith(Boolean active, Integer creatorUser, Integer sharedWithUser, Long municipalityId, Pageable pageable) {
        Map params = new HashMap(4);

        params.put("Active", active);
        params.put("creatorUser", creatorUser);
        params.put("sharedWithUser", sharedWithUser);
        params.put("municipalityId", municipalityId);

        return queryExecutor.executeNamedQuery("ProjectsForUsersAndSharedWith", params, Projects.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportProjectsForUsersAndSharedWith(ExportType exportType, Boolean active, Integer creatorUser, Integer sharedWithUser, Long municipalityId, Pageable pageable) {
        Map params = new HashMap(4);

        params.put("Active", active);
        params.put("creatorUser", creatorUser);
        params.put("sharedWithUser", sharedWithUser);
        params.put("municipalityId", municipalityId);

        return queryExecutor.exportNamedQueryData("ProjectsForUsersAndSharedWith", params, exportType, Projects.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public Integer executeUpdateNewPassword(UpdateNewPasswordRequest updateNewPasswordRequest) {
        Map params = new HashMap(2);

        params.put("password", updateNewPasswordRequest.getPassword());
        params.put("newUser", updateNewPasswordRequest.getNewUser());

        return queryExecutor.executeNamedQueryForUpdate("UpdateNewPassword", params);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<FormsTaggedWithGisrecordsResponse> executeFormsTaggedWithGISRecords(Integer gisrecordId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("gisrecordId", gisrecordId);

        return queryExecutor.executeNamedQuery("FormsTaggedWithGISRecords", params, FormsTaggedWithGisrecordsResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportFormsTaggedWithGISRecords(ExportType exportType, Integer gisrecordId, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("gisrecordId", gisrecordId);

        return queryExecutor.exportNamedQueryData("FormsTaggedWithGISRecords", params, exportType, FormsTaggedWithGisrecordsResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<CountOfVendorUsersResponse> executeCountOfVendorUsers(Integer vendor, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("vendor", vendor);

        return queryExecutor.executeNamedQuery("CountOfVendorUsers", params, CountOfVendorUsersResponse.class, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable exportCountOfVendorUsers(ExportType exportType, Integer vendor, Pageable pageable) {
        Map params = new HashMap(1);

        params.put("vendor", vendor);

        return queryExecutor.exportNamedQueryData("CountOfVendorUsers", params, exportType, CountOfVendorUsersResponse.class, pageable);
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
    public Integer executeInsertProjectMessage(InsertProjectMessageRequest insertProjectMessageRequest) {
        Map params = new HashMap(4);

        params.put("UserId", insertProjectMessageRequest.getUserId());
        params.put("RelatedProjectGUID", insertProjectMessageRequest.getRelatedProjectGuid());
        params.put("Message", insertProjectMessageRequest.getMessage());
        params.put("PostedAt", insertProjectMessageRequest.getPostedAt());

        return queryExecutor.executeNamedQueryForUpdate("InsertProjectMessage", params);
    }

}


