/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.civicxpress.cx2.Gis2forms;


/**
 * ServiceImpl object for domain model class Gis2forms.
 *
 * @see Gis2forms
 */
@Service("cx2.Gis2formsService")
public class Gis2formsServiceImpl implements Gis2formsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(Gis2formsServiceImpl.class);


    @Autowired
    @Qualifier("cx2.Gis2formsDao")
    private WMGenericDao<Gis2forms, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Gis2forms, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
	public Gis2forms create(Gis2forms gis2forms) {
        LOGGER.debug("Creating a new Gis2forms with information: {}", gis2forms);
        Gis2forms gis2formsCreated = this.wmGenericDao.create(gis2forms);
        return gis2formsCreated;
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public Gis2forms getById(Integer gis2formsId) throws EntityNotFoundException {
        LOGGER.debug("Finding Gis2forms by id: {}", gis2formsId);
        Gis2forms gis2forms = this.wmGenericDao.findById(gis2formsId);
        if (gis2forms == null){
            LOGGER.debug("No Gis2forms found with id: {}", gis2formsId);
            throw new EntityNotFoundException(String.valueOf(gis2formsId));
        }
        return gis2forms;
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public Gis2forms findById(Integer gis2formsId) {
        LOGGER.debug("Finding Gis2forms by id: {}", gis2formsId);
        return this.wmGenericDao.findById(gis2formsId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "cx2TransactionManager")
	@Override
	public Gis2forms update(Gis2forms gis2forms) throws EntityNotFoundException {
        LOGGER.debug("Updating Gis2forms with information: {}", gis2forms);
        this.wmGenericDao.update(gis2forms);

        Integer gis2formsId = gis2forms.getId();

        return this.wmGenericDao.findById(gis2formsId);
    }

    @Transactional(value = "cx2TransactionManager")
	@Override
	public Gis2forms delete(Integer gis2formsId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Gis2forms with id: {}", gis2formsId);
        Gis2forms deleted = this.wmGenericDao.findById(gis2formsId);
        if (deleted == null) {
            LOGGER.debug("No Gis2forms found with id: {}", gis2formsId);
            throw new EntityNotFoundException(String.valueOf(gis2formsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public Page<Gis2forms> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Gis2forms");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<Gis2forms> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Gis2forms");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service cx2 for table Gis2forms to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }



}

