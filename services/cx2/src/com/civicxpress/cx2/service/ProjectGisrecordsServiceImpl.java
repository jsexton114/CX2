/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.civicxpress.cx2.ProjectGisrecords;


/**
 * ServiceImpl object for domain model class ProjectGisrecords.
 *
 * @see ProjectGisrecords
 */
@Service("cx2.ProjectGisrecordsService")
public class ProjectGisrecordsServiceImpl implements ProjectGisrecordsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ProjectGisrecordsServiceImpl.class);


    @Autowired
    @Qualifier("cx2.ProjectGisrecordsDao")
    private WMGenericDao<ProjectGisrecords, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ProjectGisrecords, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
	public ProjectGisrecords create(ProjectGisrecords projectGisrecords) {
        LOGGER.debug("Creating a new ProjectGisrecords with information: {}", projectGisrecords);
        ProjectGisrecords projectGisrecordsCreated = this.wmGenericDao.create(projectGisrecords);
        return projectGisrecordsCreated;
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public ProjectGisrecords getById(Integer projectgisrecordsId) throws EntityNotFoundException {
        LOGGER.debug("Finding ProjectGisrecords by id: {}", projectgisrecordsId);
        ProjectGisrecords projectGisrecords = this.wmGenericDao.findById(projectgisrecordsId);
        if (projectGisrecords == null){
            LOGGER.debug("No ProjectGisrecords found with id: {}", projectgisrecordsId);
            throw new EntityNotFoundException(String.valueOf(projectgisrecordsId));
        }
        return projectGisrecords;
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public ProjectGisrecords findById(Integer projectgisrecordsId) {
        LOGGER.debug("Finding ProjectGisrecords by id: {}", projectgisrecordsId);
        return this.wmGenericDao.findById(projectgisrecordsId);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public ProjectGisrecords getByRelatedProjectGuidAndGisrecordId(String relatedProjectGuid, Integer gisrecordId) {
        Map<String, Object> relatedProjectGuidAndGisrecordIdMap = new HashMap<>();
        relatedProjectGuidAndGisrecordIdMap.put("relatedProjectGuid", relatedProjectGuid);
        relatedProjectGuidAndGisrecordIdMap.put("gisrecordId", gisrecordId);

        LOGGER.debug("Finding ProjectGisrecords by unique keys: {}", relatedProjectGuidAndGisrecordIdMap);
        ProjectGisrecords projectGisrecords = this.wmGenericDao.findByUniqueKey(relatedProjectGuidAndGisrecordIdMap);

        if (projectGisrecords == null){
            LOGGER.debug("No ProjectGisrecords found with given unique key values: {}", relatedProjectGuidAndGisrecordIdMap);
            throw new EntityNotFoundException(String.valueOf(relatedProjectGuidAndGisrecordIdMap));
        }

        return projectGisrecords;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "cx2TransactionManager")
	@Override
	public ProjectGisrecords update(ProjectGisrecords projectGisrecords) throws EntityNotFoundException {
        LOGGER.debug("Updating ProjectGisrecords with information: {}", projectGisrecords);
        this.wmGenericDao.update(projectGisrecords);

        Integer projectgisrecordsId = projectGisrecords.getId();

        return this.wmGenericDao.findById(projectgisrecordsId);
    }

    @Transactional(value = "cx2TransactionManager")
	@Override
	public ProjectGisrecords delete(Integer projectgisrecordsId) throws EntityNotFoundException {
        LOGGER.debug("Deleting ProjectGisrecords with id: {}", projectgisrecordsId);
        ProjectGisrecords deleted = this.wmGenericDao.findById(projectgisrecordsId);
        if (deleted == null) {
            LOGGER.debug("No ProjectGisrecords found with id: {}", projectgisrecordsId);
            throw new EntityNotFoundException(String.valueOf(projectgisrecordsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public Page<ProjectGisrecords> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ProjectGisrecords");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<ProjectGisrecords> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ProjectGisrecords");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service cx2 for table ProjectGisrecords to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }



}

