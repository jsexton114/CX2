/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.civicxpress.cx2.FormFieldTypes;
import com.civicxpress.cx2.FormTypeFields;


/**
 * ServiceImpl object for domain model class FormFieldTypes.
 *
 * @see FormFieldTypes
 */
@Service("cx2.FormFieldTypesService")
public class FormFieldTypesServiceImpl implements FormFieldTypesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(FormFieldTypesServiceImpl.class);

    @Autowired
	@Qualifier("cx2.FormTypeFieldsService")
	private FormTypeFieldsService formTypeFieldsService;

    @Autowired
    @Qualifier("cx2.FormFieldTypesDao")
    private WMGenericDao<FormFieldTypes, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<FormFieldTypes, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
	public FormFieldTypes create(FormFieldTypes formFieldTypes) {
        LOGGER.debug("Creating a new FormFieldTypes with information: {}", formFieldTypes);
        FormFieldTypes formFieldTypesCreated = this.wmGenericDao.create(formFieldTypes);
        if(formFieldTypesCreated.getFormTypeFieldses() != null) {
            for(FormTypeFields formTypeFieldse : formFieldTypesCreated.getFormTypeFieldses()) {
                formTypeFieldse.setFormFieldTypes(formFieldTypesCreated);
                LOGGER.debug("Creating a new child FormTypeFields with information: {}", formTypeFieldse);
                formTypeFieldsService.create(formTypeFieldse);
            }
        }
        return formFieldTypesCreated;
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public FormFieldTypes getById(Integer formfieldtypesId) throws EntityNotFoundException {
        LOGGER.debug("Finding FormFieldTypes by id: {}", formfieldtypesId);
        FormFieldTypes formFieldTypes = this.wmGenericDao.findById(formfieldtypesId);
        if (formFieldTypes == null){
            LOGGER.debug("No FormFieldTypes found with id: {}", formfieldtypesId);
            throw new EntityNotFoundException(String.valueOf(formfieldtypesId));
        }
        return formFieldTypes;
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public FormFieldTypes findById(Integer formfieldtypesId) {
        LOGGER.debug("Finding FormFieldTypes by id: {}", formfieldtypesId);
        return this.wmGenericDao.findById(formfieldtypesId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "cx2TransactionManager")
	@Override
	public FormFieldTypes update(FormFieldTypes formFieldTypes) throws EntityNotFoundException {
        LOGGER.debug("Updating FormFieldTypes with information: {}", formFieldTypes);
        this.wmGenericDao.update(formFieldTypes);

        Integer formfieldtypesId = formFieldTypes.getId();

        return this.wmGenericDao.findById(formfieldtypesId);
    }

    @Transactional(value = "cx2TransactionManager")
	@Override
	public FormFieldTypes delete(Integer formfieldtypesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting FormFieldTypes with id: {}", formfieldtypesId);
        FormFieldTypes deleted = this.wmGenericDao.findById(formfieldtypesId);
        if (deleted == null) {
            LOGGER.debug("No FormFieldTypes found with id: {}", formfieldtypesId);
            throw new EntityNotFoundException(String.valueOf(formfieldtypesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public Page<FormFieldTypes> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all FormFieldTypes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<FormFieldTypes> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all FormFieldTypes");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service cx2 for table FormFieldTypes to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<FormTypeFields> findAssociatedFormTypeFieldses(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated formTypeFieldses");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("formFieldTypes.id = '" + id + "'");

        return formTypeFieldsService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service FormTypeFieldsService instance
	 */
	protected void setFormTypeFieldsService(FormTypeFieldsService service) {
        this.formTypeFieldsService = service;
    }

}

