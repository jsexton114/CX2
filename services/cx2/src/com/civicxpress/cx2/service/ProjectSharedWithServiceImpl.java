/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.civicxpress.cx2.ProjectSharedWith;


/**
 * ServiceImpl object for domain model class ProjectSharedWith.
 *
 * @see ProjectSharedWith
 */
@Service("cx2.ProjectSharedWithService")
public class ProjectSharedWithServiceImpl implements ProjectSharedWithService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ProjectSharedWithServiceImpl.class);


    @Autowired
    @Qualifier("cx2.ProjectSharedWithDao")
    private WMGenericDao<ProjectSharedWith, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ProjectSharedWith, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
	public ProjectSharedWith create(ProjectSharedWith projectSharedWith) {
        LOGGER.debug("Creating a new ProjectSharedWith with information: {}", projectSharedWith);
        ProjectSharedWith projectSharedWithCreated = this.wmGenericDao.create(projectSharedWith);
        return projectSharedWithCreated;
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public ProjectSharedWith getById(Integer projectsharedwithId) throws EntityNotFoundException {
        LOGGER.debug("Finding ProjectSharedWith by id: {}", projectsharedwithId);
        ProjectSharedWith projectSharedWith = this.wmGenericDao.findById(projectsharedwithId);
        if (projectSharedWith == null){
            LOGGER.debug("No ProjectSharedWith found with id: {}", projectsharedwithId);
            throw new EntityNotFoundException(String.valueOf(projectsharedwithId));
        }
        return projectSharedWith;
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public ProjectSharedWith findById(Integer projectsharedwithId) {
        LOGGER.debug("Finding ProjectSharedWith by id: {}", projectsharedwithId);
        return this.wmGenericDao.findById(projectsharedwithId);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public ProjectSharedWith getByRelatedProjectGuidAndProjectSharedWithUser(String relatedProjectGuid, Integer projectSharedWithUser) {
        Map<String, Object> relatedProjectGuidAndProjectSharedWithUserMap = new HashMap<>();
        relatedProjectGuidAndProjectSharedWithUserMap.put("relatedProjectGuid", relatedProjectGuid);
        relatedProjectGuidAndProjectSharedWithUserMap.put("projectSharedWithUser", projectSharedWithUser);

        LOGGER.debug("Finding ProjectSharedWith by unique keys: {}", relatedProjectGuidAndProjectSharedWithUserMap);
        ProjectSharedWith projectSharedWith = this.wmGenericDao.findByUniqueKey(relatedProjectGuidAndProjectSharedWithUserMap);

        if (projectSharedWith == null){
            LOGGER.debug("No ProjectSharedWith found with given unique key values: {}", relatedProjectGuidAndProjectSharedWithUserMap);
            throw new EntityNotFoundException(String.valueOf(relatedProjectGuidAndProjectSharedWithUserMap));
        }

        return projectSharedWith;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "cx2TransactionManager")
	@Override
	public ProjectSharedWith update(ProjectSharedWith projectSharedWith) throws EntityNotFoundException {
        LOGGER.debug("Updating ProjectSharedWith with information: {}", projectSharedWith);
        this.wmGenericDao.update(projectSharedWith);

        Integer projectsharedwithId = projectSharedWith.getId();

        return this.wmGenericDao.findById(projectsharedwithId);
    }

    @Transactional(value = "cx2TransactionManager")
	@Override
	public ProjectSharedWith delete(Integer projectsharedwithId) throws EntityNotFoundException {
        LOGGER.debug("Deleting ProjectSharedWith with id: {}", projectsharedwithId);
        ProjectSharedWith deleted = this.wmGenericDao.findById(projectsharedwithId);
        if (deleted == null) {
            LOGGER.debug("No ProjectSharedWith found with id: {}", projectsharedwithId);
            throw new EntityNotFoundException(String.valueOf(projectsharedwithId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public Page<ProjectSharedWith> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ProjectSharedWiths");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<ProjectSharedWith> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ProjectSharedWiths");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service cx2 for table ProjectSharedWith to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

