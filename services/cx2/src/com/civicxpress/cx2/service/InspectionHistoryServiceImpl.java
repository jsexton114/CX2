/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.civicxpress.cx2.InspectionHistory;


/**
 * ServiceImpl object for domain model class InspectionHistory.
 *
 * @see InspectionHistory
 */
@Service("cx2.InspectionHistoryService")
public class InspectionHistoryServiceImpl implements InspectionHistoryService {

    private static final Logger LOGGER = LoggerFactory.getLogger(InspectionHistoryServiceImpl.class);


    @Autowired
    @Qualifier("cx2.InspectionHistoryDao")
    private WMGenericDao<InspectionHistory, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<InspectionHistory, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "cx2TransactionManager")
    @Override
	public InspectionHistory create(InspectionHistory inspectionHistory) {
        LOGGER.debug("Creating a new InspectionHistory with information: {}", inspectionHistory);
        InspectionHistory inspectionHistoryCreated = this.wmGenericDao.create(inspectionHistory);
        return inspectionHistoryCreated;
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public InspectionHistory getById(Integer inspectionhistoryId) throws EntityNotFoundException {
        LOGGER.debug("Finding InspectionHistory by id: {}", inspectionhistoryId);
        InspectionHistory inspectionHistory = this.wmGenericDao.findById(inspectionhistoryId);
        if (inspectionHistory == null){
            LOGGER.debug("No InspectionHistory found with id: {}", inspectionhistoryId);
            throw new EntityNotFoundException(String.valueOf(inspectionhistoryId));
        }
        return inspectionHistory;
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public InspectionHistory findById(Integer inspectionhistoryId) {
        LOGGER.debug("Finding InspectionHistory by id: {}", inspectionhistoryId);
        return this.wmGenericDao.findById(inspectionhistoryId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "cx2TransactionManager")
	@Override
	public InspectionHistory update(InspectionHistory inspectionHistory) throws EntityNotFoundException {
        LOGGER.debug("Updating InspectionHistory with information: {}", inspectionHistory);
        this.wmGenericDao.update(inspectionHistory);

        Integer inspectionhistoryId = inspectionHistory.getId();

        return this.wmGenericDao.findById(inspectionhistoryId);
    }

    @Transactional(value = "cx2TransactionManager")
	@Override
	public InspectionHistory delete(Integer inspectionhistoryId) throws EntityNotFoundException {
        LOGGER.debug("Deleting InspectionHistory with id: {}", inspectionhistoryId);
        InspectionHistory deleted = this.wmGenericDao.findById(inspectionhistoryId);
        if (deleted == null) {
            LOGGER.debug("No InspectionHistory found with id: {}", inspectionhistoryId);
            throw new EntityNotFoundException(String.valueOf(inspectionhistoryId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public Page<InspectionHistory> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all InspectionHistories");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Page<InspectionHistory> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all InspectionHistories");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service cx2 for table InspectionHistory to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "cx2TransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

