/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.List;
import java.util.Objects;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import org.hibernate.annotations.Type;
import org.joda.time.LocalDateTime;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.wavemaker.runtime.data.annotations.ServerDefinedProperty;
import com.wavemaker.runtime.data.replacers.Scope;
import com.wavemaker.runtime.data.replacers.providers.VariableType;

/**
 * LetterTemplates generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`LetterTemplates`")
public class LetterTemplates implements Serializable {

    private Integer id;
    private String letterTitle;
    private String letterBody;
    private Integer formDesignId;
    private Integer inspectionDesignId;
    @ServerDefinedProperty( value = VariableType.USER_ID, scopes = { Scope.INSERT })
    private Integer createdBy;
    @Type(type = "DateTime")
    private LocalDateTime createdDate;
    @ServerDefinedProperty( value = VariableType.USER_ID, scopes = { Scope.UPDATE, Scope.INSERT })
    private Integer modifiedBy;
    @Type(type = "DateTime")
    private LocalDateTime modifiedDate;
    private String letterBodyTopLeftTitle;
    private String letterBodyTopLeftText;
    private String letterBodyTopRightTitle;
    private String letterBodyTopRightText;
    private String letterBodyBottomTitle;
    private String letterBodyBottomText;
    private FormTypes formTypes;
    private InspectionDesign inspectionDesign;
    private Users usersByCreatedBy;
    private Users usersByModifiedBy;
    private List<LetterTemplateToFormStatus> letterTemplateToFormStatuses;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`ID`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`LetterTitle`", nullable = true, length = 255)
    public String getLetterTitle() {
        return this.letterTitle;
    }

    public void setLetterTitle(String letterTitle) {
        this.letterTitle = letterTitle;
    }

    @Column(name = "`LetterBody`", nullable = true, length = 2147483647)
    public String getLetterBody() {
        return this.letterBody;
    }

    public void setLetterBody(String letterBody) {
        this.letterBody = letterBody;
    }

    @Column(name = "`FormDesignId`", nullable = true, scale = 0, precision = 10)
    public Integer getFormDesignId() {
        return this.formDesignId;
    }

    public void setFormDesignId(Integer formDesignId) {
        this.formDesignId = formDesignId;
    }

    @Column(name = "`InspectionDesignId`", nullable = true, scale = 0, precision = 10)
    public Integer getInspectionDesignId() {
        return this.inspectionDesignId;
    }

    public void setInspectionDesignId(Integer inspectionDesignId) {
        this.inspectionDesignId = inspectionDesignId;
    }

    @Column(name = "`CreatedBy`", nullable = true, updatable = false, scale = 0, precision = 10)
    public Integer getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(Integer createdBy) {
        this.createdBy = createdBy;
    }

    @Column(name = "`CreatedDate`", nullable = true, insertable = false, updatable = false)
    public LocalDateTime getCreatedDate() {
        return this.createdDate;
    }

    public void setCreatedDate(LocalDateTime createdDate) {
        this.createdDate = createdDate;
    }

    @Column(name = "`ModifiedBy`", nullable = true, scale = 0, precision = 10)
    public Integer getModifiedBy() {
        return this.modifiedBy;
    }

    public void setModifiedBy(Integer modifiedBy) {
        this.modifiedBy = modifiedBy;
    }

    @Column(name = "`ModifiedDate`", nullable = true, insertable = false, updatable = false)
    public LocalDateTime getModifiedDate() {
        return this.modifiedDate;
    }

    public void setModifiedDate(LocalDateTime modifiedDate) {
        this.modifiedDate = modifiedDate;
    }

    @Column(name = "`LetterBodyTopLeftTitle`", nullable = true, length = 200)
    public String getLetterBodyTopLeftTitle() {
        return this.letterBodyTopLeftTitle;
    }

    public void setLetterBodyTopLeftTitle(String letterBodyTopLeftTitle) {
        this.letterBodyTopLeftTitle = letterBodyTopLeftTitle;
    }

    @Column(name = "`LetterBodyTopLeftText`", nullable = true, length = 500)
    public String getLetterBodyTopLeftText() {
        return this.letterBodyTopLeftText;
    }

    public void setLetterBodyTopLeftText(String letterBodyTopLeftText) {
        this.letterBodyTopLeftText = letterBodyTopLeftText;
    }

    @Column(name = "`LetterBodyTopRightTitle`", nullable = true, length = 200)
    public String getLetterBodyTopRightTitle() {
        return this.letterBodyTopRightTitle;
    }

    public void setLetterBodyTopRightTitle(String letterBodyTopRightTitle) {
        this.letterBodyTopRightTitle = letterBodyTopRightTitle;
    }

    @Column(name = "`LetterBodyTopRightText`", nullable = true, length = 500)
    public String getLetterBodyTopRightText() {
        return this.letterBodyTopRightText;
    }

    public void setLetterBodyTopRightText(String letterBodyTopRightText) {
        this.letterBodyTopRightText = letterBodyTopRightText;
    }

    @Column(name = "`LetterBodyBottomTitle`", nullable = true, length = 200)
    public String getLetterBodyBottomTitle() {
        return this.letterBodyBottomTitle;
    }

    public void setLetterBodyBottomTitle(String letterBodyBottomTitle) {
        this.letterBodyBottomTitle = letterBodyBottomTitle;
    }

    @Column(name = "`LetterBodyBottomText`", nullable = true, length = 500)
    public String getLetterBodyBottomText() {
        return this.letterBodyBottomText;
    }

    public void setLetterBodyBottomText(String letterBodyBottomText) {
        this.letterBodyBottomText = letterBodyBottomText;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`FormDesignId`", referencedColumnName = "`ID`", insertable = false, updatable = false)
    public FormTypes getFormTypes() {
        return this.formTypes;
    }

    public void setFormTypes(FormTypes formTypes) {
        if(formTypes != null) {
            this.formDesignId = formTypes.getId();
        }

        this.formTypes = formTypes;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`InspectionDesignId`", referencedColumnName = "`ID`", insertable = false, updatable = false)
    public InspectionDesign getInspectionDesign() {
        return this.inspectionDesign;
    }

    public void setInspectionDesign(InspectionDesign inspectionDesign) {
        if(inspectionDesign != null) {
            this.inspectionDesignId = inspectionDesign.getId();
        }

        this.inspectionDesign = inspectionDesign;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`CreatedBy`", referencedColumnName = "`ID`", insertable = false, updatable = false)
    public Users getUsersByCreatedBy() {
        return this.usersByCreatedBy;
    }

    public void setUsersByCreatedBy(Users usersByCreatedBy) {
        if(usersByCreatedBy != null) {
            this.createdBy = usersByCreatedBy.getId();
        }

        this.usersByCreatedBy = usersByCreatedBy;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`ModifiedBy`", referencedColumnName = "`ID`", insertable = false, updatable = false)
    public Users getUsersByModifiedBy() {
        return this.usersByModifiedBy;
    }

    public void setUsersByModifiedBy(Users usersByModifiedBy) {
        if(usersByModifiedBy != null) {
            this.modifiedBy = usersByModifiedBy.getId();
        }

        this.usersByModifiedBy = usersByModifiedBy;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.REMOVE, mappedBy = "letterTemplates")
    public List<LetterTemplateToFormStatus> getLetterTemplateToFormStatuses() {
        return this.letterTemplateToFormStatuses;
    }

    public void setLetterTemplateToFormStatuses(List<LetterTemplateToFormStatus> letterTemplateToFormStatuses) {
        this.letterTemplateToFormStatuses = letterTemplateToFormStatuses;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof LetterTemplates)) return false;
        final LetterTemplates letterTemplates = (LetterTemplates) o;
        return Objects.equals(getId(), letterTemplates.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}

