/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Type;
import org.joda.time.LocalDateTime;

/**
 * Violations generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`Violations`")
public class Violations implements Serializable {

    private Integer id;
    private Integer codeId;
    private String notes;
    private Integer createdBy;
    private Integer modifiedBy;
    private String relatedInspectionGuid;
    private String relatedFormGuid;
    @Type(type = "DateTime")
    private LocalDateTime dateCreated;
    @Type(type = "DateTime")
    private LocalDateTime dateModified;
    private MasterForms masterForms;
    private MasterInspections masterInspections;
    private Code code;
    private Users usersByModifiedBy;
    private Users usersByCreatedBy;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`ID`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`CodeId`", nullable = true, scale = 0, precision = 10)
    public Integer getCodeId() {
        return this.codeId;
    }

    public void setCodeId(Integer codeId) {
        this.codeId = codeId;
    }

    @Column(name = "`Notes`", nullable = true, length = 5000)
    public String getNotes() {
        return this.notes;
    }

    public void setNotes(String notes) {
        this.notes = notes;
    }

    @Column(name = "`CreatedBy`", nullable = true, scale = 0, precision = 10)
    public Integer getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(Integer createdBy) {
        this.createdBy = createdBy;
    }

    @Column(name = "`ModifiedBy`", nullable = true, scale = 0, precision = 10)
    public Integer getModifiedBy() {
        return this.modifiedBy;
    }

    public void setModifiedBy(Integer modifiedBy) {
        this.modifiedBy = modifiedBy;
    }

    @Column(name = "`RelatedInspectionGuid`", nullable = true, length = 32)
    public String getRelatedInspectionGuid() {
        return this.relatedInspectionGuid;
    }

    public void setRelatedInspectionGuid(String relatedInspectionGuid) {
        this.relatedInspectionGuid = relatedInspectionGuid;
    }

    @Column(name = "`RelatedFormGuid`", nullable = true, length = 32)
    public String getRelatedFormGuid() {
        return this.relatedFormGuid;
    }

    public void setRelatedFormGuid(String relatedFormGuid) {
        this.relatedFormGuid = relatedFormGuid;
    }

    @Column(name = "`DateCreated`", nullable = false)
    public LocalDateTime getDateCreated() {
        return this.dateCreated;
    }

    public void setDateCreated(LocalDateTime dateCreated) {
        this.dateCreated = dateCreated;
    }

    @Column(name = "`DateModified`", nullable = true)
    public LocalDateTime getDateModified() {
        return this.dateModified;
    }

    public void setDateModified(LocalDateTime dateModified) {
        this.dateModified = dateModified;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`RelatedFormGuid`", referencedColumnName = "`FormGUID`", insertable = false, updatable = false)
    public MasterForms getMasterForms() {
        return this.masterForms;
    }

    public void setMasterForms(MasterForms masterForms) {
        if(masterForms != null) {
            this.relatedFormGuid = masterForms.getFormGuid();
        }

        this.masterForms = masterForms;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`RelatedInspectionGuid`", referencedColumnName = "`InspectionGuid`", insertable = false, updatable = false)
    public MasterInspections getMasterInspections() {
        return this.masterInspections;
    }

    public void setMasterInspections(MasterInspections masterInspections) {
        if(masterInspections != null) {
            this.relatedInspectionGuid = masterInspections.getInspectionGuid();
        }

        this.masterInspections = masterInspections;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`CodeId`", referencedColumnName = "`ID`", insertable = false, updatable = false)
    public Code getCode() {
        return this.code;
    }

    public void setCode(Code code) {
        if(code != null) {
            this.codeId = code.getId();
        }

        this.code = code;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`ModifiedBy`", referencedColumnName = "`ID`", insertable = false, updatable = false)
    public Users getUsersByModifiedBy() {
        return this.usersByModifiedBy;
    }

    public void setUsersByModifiedBy(Users usersByModifiedBy) {
        if(usersByModifiedBy != null) {
            this.modifiedBy = usersByModifiedBy.getId();
        }

        this.usersByModifiedBy = usersByModifiedBy;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`CreatedBy`", referencedColumnName = "`ID`", insertable = false, updatable = false)
    public Users getUsersByCreatedBy() {
        return this.usersByCreatedBy;
    }

    public void setUsersByCreatedBy(Users usersByCreatedBy) {
        if(usersByCreatedBy != null) {
            this.createdBy = usersByCreatedBy.getId();
        }

        this.usersByCreatedBy = usersByCreatedBy;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Violations)) return false;
        final Violations violations = (Violations) o;
        return Objects.equals(getId(), violations.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}

