/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import org.hibernate.annotations.Type;
import org.joda.time.LocalDateTime;

import com.wavemaker.runtime.data.annotations.ServerDefinedProperty;
import com.wavemaker.runtime.data.replacers.Scope;
import com.wavemaker.runtime.data.replacers.providers.VariableType;

/**
 * VendorsToProject generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`VendorsToProject`", uniqueConstraints = {
        @UniqueConstraint(columnNames = {"`ProjectGuid`", "`VendorId`"})})
public class VendorsToProject implements Serializable {

    private Integer id;
    private String projectGuid;
    private Integer vendorId;
    @ServerDefinedProperty( value = VariableType.DATE_TIME, scopes = { Scope.INSERT })
    @Type(type = "DateTime")
    private LocalDateTime sharedOn;
    private Boolean primaryVendor;
    private Projects projects;
    private Vendor vendor;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`ID`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`ProjectGuid`", nullable = true, length = 32)
    public String getProjectGuid() {
        return this.projectGuid;
    }

    public void setProjectGuid(String projectGuid) {
        this.projectGuid = projectGuid;
    }

    @Column(name = "`VendorId`", nullable = true, scale = 0, precision = 10)
    public Integer getVendorId() {
        return this.vendorId;
    }

    public void setVendorId(Integer vendorId) {
        this.vendorId = vendorId;
    }

    @Column(name = "`SharedOn`", nullable = true, updatable = false)
    public LocalDateTime getSharedOn() {
        return this.sharedOn;
    }

    public void setSharedOn(LocalDateTime sharedOn) {
        this.sharedOn = sharedOn;
    }

    @Column(name = "`PrimaryVendor`", nullable = true)
    public Boolean getPrimaryVendor() {
        return this.primaryVendor;
    }

    public void setPrimaryVendor(Boolean primaryVendor) {
        this.primaryVendor = primaryVendor;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`ProjectGuid`", referencedColumnName = "`ProjectGUID`", insertable = false, updatable = false)
    public Projects getProjects() {
        return this.projects;
    }

    public void setProjects(Projects projects) {
        if(projects != null) {
            this.projectGuid = projects.getProjectGuid();
        }

        this.projects = projects;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`VendorId`", referencedColumnName = "`ID`", insertable = false, updatable = false)
    public Vendor getVendor() {
        return this.vendor;
    }

    public void setVendor(Vendor vendor) {
        if(vendor != null) {
            this.vendorId = vendor.getId();
        }

        this.vendor = vendor;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof VendorsToProject)) return false;
        final VendorsToProject vendorsToProject = (VendorsToProject) o;
        return Objects.equals(getId(), vendorsToProject.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}

