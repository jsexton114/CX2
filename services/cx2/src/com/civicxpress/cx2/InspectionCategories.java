/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

/**
 * InspectionCategories generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`InspectionCategories`")
public class InspectionCategories implements Serializable {

    private Integer id;
    private String inspectionCategory;
    private String inspectionCategoryDescription;
    private Integer municipalityId;
    private Municipalities municipalities;
    private List<InspectionCategoryMapping> inspectionCategoryMappings = new ArrayList<>();

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`ID`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`InspectionCategory`", nullable = true, length = 255)
    public String getInspectionCategory() {
        return this.inspectionCategory;
    }

    public void setInspectionCategory(String inspectionCategory) {
        this.inspectionCategory = inspectionCategory;
    }

    @Column(name = "`InspectionCategoryDescription`", nullable = true, length = 255)
    public String getInspectionCategoryDescription() {
        return this.inspectionCategoryDescription;
    }

    public void setInspectionCategoryDescription(String inspectionCategoryDescription) {
        this.inspectionCategoryDescription = inspectionCategoryDescription;
    }

    @Column(name = "`MunicipalityId`", nullable = true, scale = 0, precision = 10)
    public Integer getMunicipalityId() {
        return this.municipalityId;
    }

    public void setMunicipalityId(Integer municipalityId) {
        this.municipalityId = municipalityId;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`MunicipalityId`", referencedColumnName = "`ID`", insertable = false, updatable = false)
    public Municipalities getMunicipalities() {
        return this.municipalities;
    }

    public void setMunicipalities(Municipalities municipalities) {
        if(municipalities != null) {
            this.municipalityId = municipalities.getId();
        }

        this.municipalities = municipalities;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.REMOVE, mappedBy = "inspectionCategories")
    public List<InspectionCategoryMapping> getInspectionCategoryMappings() {
        return this.inspectionCategoryMappings;
    }

    public void setInspectionCategoryMappings(List<InspectionCategoryMapping> inspectionCategoryMappings) {
        this.inspectionCategoryMappings = inspectionCategoryMappings;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof InspectionCategories)) return false;
        final InspectionCategories inspectionCategories = (InspectionCategories) o;
        return Objects.equals(getId(), inspectionCategories.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}

