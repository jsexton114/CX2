/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/



import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.civicxpress.cx2.CaseStatuses;
import com.civicxpress.cx2.MasterCases;
import com.civicxpress.cx2.service.CaseStatusesService;


/**
 * Controller object for domain model class CaseStatuses.
 * @see CaseStatuses
 */
@RestController("cx2.CaseStatusesController")
@Api(value = "CaseStatusesController", description = "Exposes APIs to work with CaseStatuses resource.")
@RequestMapping("/cx2/CaseStatuses")
public class CaseStatusesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CaseStatusesController.class);

    @Autowired
	@Qualifier("cx2.CaseStatusesService")
	private CaseStatusesService caseStatusesService;

	@ApiOperation(value = "Creates a new CaseStatuses instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public CaseStatuses createCaseStatuses(@RequestBody CaseStatuses caseStatuses) {
		LOGGER.debug("Create CaseStatuses with information: {}" , caseStatuses);

		caseStatuses = caseStatusesService.create(caseStatuses);
		LOGGER.debug("Created CaseStatuses with information: {}" , caseStatuses);

	    return caseStatuses;
	}


    @ApiOperation(value = "Returns the CaseStatuses instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CaseStatuses getCaseStatuses(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting CaseStatuses with id: {}" , id);

        CaseStatuses foundCaseStatuses = caseStatusesService.getById(id);
        LOGGER.debug("CaseStatuses details with id: {}" , foundCaseStatuses);

        return foundCaseStatuses;
    }

    @ApiOperation(value = "Updates the CaseStatuses instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CaseStatuses editCaseStatuses(@PathVariable("id") Integer id, @RequestBody CaseStatuses caseStatuses) throws EntityNotFoundException {
        LOGGER.debug("Editing CaseStatuses with id: {}" , caseStatuses.getId());

        caseStatuses.setId(id);
        caseStatuses = caseStatusesService.update(caseStatuses);
        LOGGER.debug("CaseStatuses details with id: {}" , caseStatuses);

        return caseStatuses;
    }

    @ApiOperation(value = "Deletes the CaseStatuses instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteCaseStatuses(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting CaseStatuses with id: {}" , id);

        CaseStatuses deletedCaseStatuses = caseStatusesService.delete(id);

        return deletedCaseStatuses != null;
    }
    @RequestMapping(value = "/caseTypeId-sortNumber", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching CaseStatuses with given unique key values.")
    public CaseStatuses getByCaseTypeIdAndSortNumber(@RequestParam(name = "caseTypeId") Integer caseTypeId, @RequestParam(name = "sortNumber") Integer sortNumber) {
        LOGGER.debug("Getting CaseStatuses with uniques key CaseTypeIdAndSortNumber");
        return caseStatusesService.getByCaseTypeIdAndSortNumber(caseTypeId, sortNumber);
    }

    /**
     * @deprecated Use {@link #findCaseStatuses(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of CaseStatuses instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CaseStatuses> searchCaseStatusesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering CaseStatuses list");
        return caseStatusesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CaseStatuses instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CaseStatuses> findCaseStatuses(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CaseStatuses list");
        return caseStatusesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CaseStatuses instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CaseStatuses> filterCaseStatuses(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CaseStatuses list");
        return caseStatusesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCaseStatuses(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return caseStatusesService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of CaseStatuses instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countCaseStatuses( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting CaseStatuses");
		return caseStatusesService.count(query);
	}

    @RequestMapping(value="/{id:.+}/masterCaseses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the masterCaseses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<MasterCases> findAssociatedMasterCaseses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated masterCaseses");
        return caseStatusesService.findAssociatedMasterCaseses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CaseStatusesService instance
	 */
	protected void setCaseStatusesService(CaseStatusesService service) {
		this.caseStatusesService = service;
	}

}

