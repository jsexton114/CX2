/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.civicxpress.cx2.FormHistory;
import com.civicxpress.cx2.FormStatuses;
import com.civicxpress.cx2.MasterForms;
import com.civicxpress.cx2.McnewElectricConnection;
import com.civicxpress.cx2.McnewResidentialStructure;
import com.civicxpress.cx2.Pudapplication;
import com.civicxpress.cx2.SfnewElectricConnection;
import com.civicxpress.cx2.SfnewResidentialStructure;
import com.civicxpress.cx2.service.FormStatusesService;

/**
 * Controller object for domain model class FormStatuses.
 * @see FormStatuses
 */
@RestController("cx2.FormStatusesController")
@Api(value = "FormStatusesController", description = "Exposes APIs to work with FormStatuses resource.")
@RequestMapping("/cx2/FormStatuses")
public class FormStatusesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(FormStatusesController.class);

    @Autowired
    @Qualifier("cx2.FormStatusesService")
    private FormStatusesService formStatusesService;

    @ApiOperation(value = "Creates a new FormStatuses instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public FormStatuses createFormStatuses(@RequestBody FormStatuses formStatuses) {
        LOGGER.debug("Create FormStatuses with information: {}", formStatuses);
        formStatuses = formStatusesService.create(formStatuses);
        LOGGER.debug("Created FormStatuses with information: {}", formStatuses);
        return formStatuses;
    }

    @ApiOperation(value = "Returns the FormStatuses instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public FormStatuses getFormStatuses(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting FormStatuses with id: {}", id);
        FormStatuses foundFormStatuses = formStatusesService.getById(id);
        LOGGER.debug("FormStatuses details with id: {}", foundFormStatuses);
        return foundFormStatuses;
    }

    @ApiOperation(value = "Updates the FormStatuses instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public FormStatuses editFormStatuses(@PathVariable("id") Integer id, @RequestBody FormStatuses formStatuses) throws EntityNotFoundException {
        LOGGER.debug("Editing FormStatuses with id: {}", formStatuses.getId());
        formStatuses.setId(id);
        formStatuses = formStatusesService.update(formStatuses);
        LOGGER.debug("FormStatuses details with id: {}", formStatuses);
        return formStatuses;
    }

    @ApiOperation(value = "Deletes the FormStatuses instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteFormStatuses(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting FormStatuses with id: {}", id);
        FormStatuses deletedFormStatuses = formStatusesService.delete(id);
        return deletedFormStatuses != null;
    }

    @RequestMapping(value = "/sortOrder-formTypeId", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching FormStatuses with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public FormStatuses getBySortOrderAndFormTypeId(@RequestParam(value = "null", required = true) Long sortOrder, @RequestParam(value = "null", required = true) Integer formTypeId) {
        LOGGER.debug("Getting FormStatuses with uniques key SortOrderAndFormTypeId");
        return formStatusesService.getBySortOrderAndFormTypeId(sortOrder, formTypeId);
    }

    /**
     * @deprecated Use {@link #findFormStatuses(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of FormStatuses instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<FormStatuses> searchFormStatusesByQueryFilters(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering FormStatuses list");
        return formStatusesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of FormStatuses instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<FormStatuses> findFormStatuses(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering FormStatuses list");
        return formStatusesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportFormStatuses(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return formStatusesService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of FormStatuses instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countFormStatuses(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting FormStatuses");
        return formStatusesService.count(query);
    }

    @RequestMapping(value = "/{id}/formHistoriesForOldStatusId", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the formHistoriesForOldStatusId instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<FormHistory> findAssociatedFormHistoriesForOldStatusId(@PathVariable("id") Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated formHistoriesForOldStatusId");
        return formStatusesService.findAssociatedFormHistoriesForOldStatusId(id, pageable);
    }

    @RequestMapping(value = "/{id}/formHistoriesForNewStatusId", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the formHistoriesForNewStatusId instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<FormHistory> findAssociatedFormHistoriesForNewStatusId(@PathVariable("id") Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated formHistoriesForNewStatusId");
        return formStatusesService.findAssociatedFormHistoriesForNewStatusId(id, pageable);
    }

    @RequestMapping(value = "/{id}/masterFormses", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the masterFormses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<MasterForms> findAssociatedMasterFormses(@PathVariable("id") Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated masterFormses");
        return formStatusesService.findAssociatedMasterFormses(id, pageable);
    }

    @RequestMapping(value = "/{id}/mcnewElectricConnections", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the mcnewElectricConnections instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<McnewElectricConnection> findAssociatedMcnewElectricConnections(@PathVariable("id") Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated mcnewElectricConnections");
        return formStatusesService.findAssociatedMcnewElectricConnections(id, pageable);
    }

    @RequestMapping(value = "/{id}/mcnewResidentialStructures", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the mcnewResidentialStructures instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<McnewResidentialStructure> findAssociatedMcnewResidentialStructures(@PathVariable("id") Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated mcnewResidentialStructures");
        return formStatusesService.findAssociatedMcnewResidentialStructures(id, pageable);
    }

    @RequestMapping(value = "/{id}/pudapplications", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the pudapplications instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Pudapplication> findAssociatedPudapplications(@PathVariable("id") Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated pudapplications");
        return formStatusesService.findAssociatedPudapplications(id, pageable);
    }

    @RequestMapping(value = "/{id}/sfnewElectricConnections", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the sfnewElectricConnections instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SfnewElectricConnection> findAssociatedSfnewElectricConnections(@PathVariable("id") Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated sfnewElectricConnections");
        return formStatusesService.findAssociatedSfnewElectricConnections(id, pageable);
    }

    @RequestMapping(value = "/{id}/sfnewResidentialStructures", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the sfnewResidentialStructures instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SfnewResidentialStructure> findAssociatedSfnewResidentialStructures(@PathVariable("id") Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated sfnewResidentialStructures");
        return formStatusesService.findAssociatedSfnewResidentialStructures(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service FormStatusesService instance
	 */
    protected void setFormStatusesService(FormStatusesService service) {
        this.formStatusesService = service;
    }
}
