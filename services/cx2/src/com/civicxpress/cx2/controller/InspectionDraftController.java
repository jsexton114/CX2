/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.civicxpress.cx2.InspectionDraft;
import com.civicxpress.cx2.service.InspectionDraftService;


/**
 * Controller object for domain model class InspectionDraft.
 * @see InspectionDraft
 */
@RestController("cx2.InspectionDraftController")
@Api(value = "InspectionDraftController", description = "Exposes APIs to work with InspectionDraft resource.")
@RequestMapping("/cx2/InspectionDraft")
public class InspectionDraftController {

    private static final Logger LOGGER = LoggerFactory.getLogger(InspectionDraftController.class);

    @Autowired
	@Qualifier("cx2.InspectionDraftService")
	private InspectionDraftService inspectionDraftService;

	@ApiOperation(value = "Creates a new InspectionDraft instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public InspectionDraft createInspectionDraft(@RequestBody InspectionDraft inspectionDraft) {
		LOGGER.debug("Create InspectionDraft with information: {}" , inspectionDraft);

		inspectionDraft = inspectionDraftService.create(inspectionDraft);
		LOGGER.debug("Created InspectionDraft with information: {}" , inspectionDraft);

	    return inspectionDraft;
	}


    @ApiOperation(value = "Returns the InspectionDraft instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public InspectionDraft getInspectionDraft(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting InspectionDraft with id: {}" , id);

        InspectionDraft foundInspectionDraft = inspectionDraftService.getById(id);
        LOGGER.debug("InspectionDraft details with id: {}" , foundInspectionDraft);

        return foundInspectionDraft;
    }

    @ApiOperation(value = "Updates the InspectionDraft instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public InspectionDraft editInspectionDraft(@PathVariable("id") Integer id, @RequestBody InspectionDraft inspectionDraft) throws EntityNotFoundException {
        LOGGER.debug("Editing InspectionDraft with id: {}" , inspectionDraft.getId());

        inspectionDraft.setId(id);
        inspectionDraft = inspectionDraftService.update(inspectionDraft);
        LOGGER.debug("InspectionDraft details with id: {}" , inspectionDraft);

        return inspectionDraft;
    }

    @ApiOperation(value = "Deletes the InspectionDraft instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteInspectionDraft(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting InspectionDraft with id: {}" , id);

        InspectionDraft deletedInspectionDraft = inspectionDraftService.delete(id);

        return deletedInspectionDraft != null;
    }

    /**
     * @deprecated Use {@link #findInspectionDrafts(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of InspectionDraft instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<InspectionDraft> searchInspectionDraftsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering InspectionDrafts list");
        return inspectionDraftService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of InspectionDraft instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<InspectionDraft> findInspectionDrafts(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering InspectionDrafts list");
        return inspectionDraftService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of InspectionDraft instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<InspectionDraft> filterInspectionDrafts(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering InspectionDrafts list");
        return inspectionDraftService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportInspectionDrafts(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return inspectionDraftService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of InspectionDraft instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countInspectionDrafts( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting InspectionDrafts");
		return inspectionDraftService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getInspectionDraftAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return inspectionDraftService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service InspectionDraftService instance
	 */
	protected void setInspectionDraftService(InspectionDraftService service) {
		this.inspectionDraftService = service;
	}

}

