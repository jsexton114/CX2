/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.civicxpress.cx2.PaymentHistory;
import com.civicxpress.cx2.service.PaymentHistoryService;


/**
 * Controller object for domain model class PaymentHistory.
 * @see PaymentHistory
 */
@RestController("cx2.PaymentHistoryController")
@Api(value = "PaymentHistoryController", description = "Exposes APIs to work with PaymentHistory resource.")
@RequestMapping("/cx2/PaymentHistory")
public class PaymentHistoryController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PaymentHistoryController.class);

    @Autowired
	@Qualifier("cx2.PaymentHistoryService")
	private PaymentHistoryService paymentHistoryService;

	@ApiOperation(value = "Creates a new PaymentHistory instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public PaymentHistory createPaymentHistory(@RequestBody PaymentHistory paymentHistory) {
		LOGGER.debug("Create PaymentHistory with information: {}" , paymentHistory);

		paymentHistory = paymentHistoryService.create(paymentHistory);
		LOGGER.debug("Created PaymentHistory with information: {}" , paymentHistory);

	    return paymentHistory;
	}


    @ApiOperation(value = "Returns the PaymentHistory instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PaymentHistory getPaymentHistory(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting PaymentHistory with id: {}" , id);

        PaymentHistory foundPaymentHistory = paymentHistoryService.getById(id);
        LOGGER.debug("PaymentHistory details with id: {}" , foundPaymentHistory);

        return foundPaymentHistory;
    }

    @ApiOperation(value = "Updates the PaymentHistory instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PaymentHistory editPaymentHistory(@PathVariable("id") Integer id, @RequestBody PaymentHistory paymentHistory) throws EntityNotFoundException {
        LOGGER.debug("Editing PaymentHistory with id: {}" , paymentHistory.getTransactionId());

        paymentHistory.setTransactionId(id);
        paymentHistory = paymentHistoryService.update(paymentHistory);
        LOGGER.debug("PaymentHistory details with id: {}" , paymentHistory);

        return paymentHistory;
    }

    @ApiOperation(value = "Deletes the PaymentHistory instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deletePaymentHistory(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting PaymentHistory with id: {}" , id);

        PaymentHistory deletedPaymentHistory = paymentHistoryService.delete(id);

        return deletedPaymentHistory != null;
    }

    /**
     * @deprecated Use {@link #findPaymentHistories(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of PaymentHistory instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PaymentHistory> searchPaymentHistoriesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PaymentHistories list");
        return paymentHistoryService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PaymentHistory instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PaymentHistory> findPaymentHistories(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PaymentHistories list");
        return paymentHistoryService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PaymentHistory instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PaymentHistory> filterPaymentHistories(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PaymentHistories list");
        return paymentHistoryService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPaymentHistories(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return paymentHistoryService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of PaymentHistory instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countPaymentHistories( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting PaymentHistories");
		return paymentHistoryService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getPaymentHistoryAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return paymentHistoryService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PaymentHistoryService instance
	 */
	protected void setPaymentHistoryService(PaymentHistoryService service) {
		this.paymentHistoryService = service;
	}

}

