/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/



import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.civicxpress.cx2.CodeList;
import com.civicxpress.cx2.Violations;
import com.civicxpress.cx2.service.CodeListService;


/**
 * Controller object for domain model class CodeList.
 * @see CodeList
 */
@RestController("cx2.CodeListController")
@Api(value = "CodeListController", description = "Exposes APIs to work with CodeList resource.")
@RequestMapping("/cx2/CodeList")
public class CodeListController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CodeListController.class);

    @Autowired
	@Qualifier("cx2.CodeListService")
	private CodeListService codeListService;

	@ApiOperation(value = "Creates a new CodeList instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public CodeList createCodeList(@RequestBody CodeList codeList) {
		LOGGER.debug("Create CodeList with information: {}" , codeList);

		codeList = codeListService.create(codeList);
		LOGGER.debug("Created CodeList with information: {}" , codeList);

	    return codeList;
	}


    @ApiOperation(value = "Returns the CodeList instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CodeList getCodeList(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting CodeList with id: {}" , id);

        CodeList foundCodeList = codeListService.getById(id);
        LOGGER.debug("CodeList details with id: {}" , foundCodeList);

        return foundCodeList;
    }

    @ApiOperation(value = "Updates the CodeList instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CodeList editCodeList(@PathVariable("id") Integer id, @RequestBody CodeList codeList) throws EntityNotFoundException {
        LOGGER.debug("Editing CodeList with id: {}" , codeList.getCodeId());

        codeList.setCodeId(id);
        codeList = codeListService.update(codeList);
        LOGGER.debug("CodeList details with id: {}" , codeList);

        return codeList;
    }

    @ApiOperation(value = "Deletes the CodeList instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteCodeList(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting CodeList with id: {}" , id);

        CodeList deletedCodeList = codeListService.delete(id);

        return deletedCodeList != null;
    }

    /**
     * @deprecated Use {@link #findCodeLists(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of CodeList instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CodeList> searchCodeListsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering CodeLists list");
        return codeListService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CodeList instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CodeList> findCodeLists(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CodeLists list");
        return codeListService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CodeList instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CodeList> filterCodeLists(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CodeLists list");
        return codeListService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCodeLists(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return codeListService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of CodeList instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countCodeLists( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting CodeLists");
		return codeListService.count(query);
	}

    @RequestMapping(value="/{id:.+}/violationses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the violationses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Violations> findAssociatedViolationses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated violationses");
        return codeListService.findAssociatedViolationses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CodeListService instance
	 */
	protected void setCodeListService(CodeListService service) {
		this.codeListService = service;
	}

}

