/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.civicxpress.cx2.Table291;
import com.civicxpress.cx2.service.Table291Service;

/**
 * Controller object for domain model class Table291.
 * @see Table291
 */
@RestController("cx2.Table291Controller")
@Api(value = "Table291Controller", description = "Exposes APIs to work with Table291 resource.")
@RequestMapping("/cx2/Table291")
public class Table291Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table291Controller.class);

    @Autowired
    @Qualifier("cx2.Table291Service")
    private Table291Service table291Service;

    @ApiOperation(value = "Creates a new Table291 instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table291 createTable291(@RequestBody Table291 table291) {
        LOGGER.debug("Create Table291 with information: {}", table291);
        table291 = table291Service.create(table291);
        LOGGER.debug("Created Table291 with information: {}", table291);
        return table291;
    }

    @ApiOperation(value = "Returns the Table291 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table291 getTable291(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Table291 with id: {}", id);
        Table291 foundTable291 = table291Service.getById(id);
        LOGGER.debug("Table291 details with id: {}", foundTable291);
        return foundTable291;
    }

    @ApiOperation(value = "Updates the Table291 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table291 editTable291(@PathVariable("id") Integer id, @RequestBody Table291 table291) throws EntityNotFoundException {
        LOGGER.debug("Editing Table291 with id: {}", table291.getId());
        table291.setId(id);
        table291 = table291Service.update(table291);
        LOGGER.debug("Table291 details with id: {}", table291);
        return table291;
    }

    @ApiOperation(value = "Deletes the Table291 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTable291(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table291 with id: {}", id);
        Table291 deletedTable291 = table291Service.delete(id);
        return deletedTable291 != null;
    }

    /**
     * @deprecated Use {@link #findTable291s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Table291 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table291> findTable291s(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Table291s list");
        return table291Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of Table291 instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table291> findTable291s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table291s list");
        return table291Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTable291s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return table291Service.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of Table291 instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countTable291s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Table291s");
        return table291Service.count(query);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Table291Service instance
	 */
    protected void setTable291Service(Table291Service service) {
        this.table291Service = service;
    }
}
