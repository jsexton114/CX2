/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.civicxpress.cx2.ContractorApprovals;
import com.civicxpress.cx2.Contractors;
import com.civicxpress.cx2.service.ContractorsService;

/**
 * Controller object for domain model class Contractors.
 * @see Contractors
 */
@RestController("cx2.ContractorsController")
@Api(value = "ContractorsController", description = "Exposes APIs to work with Contractors resource.")
@RequestMapping("/cx2/Contractors")
public class ContractorsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ContractorsController.class);

    @Autowired
    @Qualifier("cx2.ContractorsService")
    private ContractorsService contractorsService;

    @ApiOperation(value = "Creates a new Contractors instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Contractors createContractors(@RequestBody Contractors contractors) {
        LOGGER.debug("Create Contractors with information: {}", contractors);
        contractors = contractorsService.create(contractors);
        LOGGER.debug("Created Contractors with information: {}", contractors);
        return contractors;
    }

    @ApiOperation(value = "Returns the Contractors instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Contractors getContractors(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Contractors with id: {}", id);
        Contractors foundContractors = contractorsService.getById(id);
        LOGGER.debug("Contractors details with id: {}", foundContractors);
        return foundContractors;
    }

    @ApiOperation(value = "Updates the Contractors instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Contractors editContractors(@PathVariable("id") Integer id, @RequestBody Contractors contractors) throws EntityNotFoundException {
        LOGGER.debug("Editing Contractors with id: {}", contractors.getId());
        contractors.setId(id);
        contractors = contractorsService.update(contractors);
        LOGGER.debug("Contractors details with id: {}", contractors);
        return contractors;
    }

    @ApiOperation(value = "Deletes the Contractors instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteContractors(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Contractors with id: {}", id);
        Contractors deletedContractors = contractorsService.delete(id);
        return deletedContractors != null;
    }

    /**
     * @deprecated Use {@link #findContractors(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Contractors instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Contractors> findContractors(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Contractors list");
        return contractorsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of Contractors instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Contractors> findContractors(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Contractors list");
        return contractorsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportContractors(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return contractorsService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of Contractors instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countContractors(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Contractors");
        return contractorsService.count(query);
    }

    @RequestMapping(value = "/{id:.+}/contractorApprovalses", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the contractorApprovalses instance associated with the given id.")
    public Page<ContractorApprovals> findAssociatedContractorApprovalses(@PathVariable("id") Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated contractorApprovalses");
        return contractorsService.findAssociatedContractorApprovalses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ContractorsService instance
	 */
    protected void setContractorsService(ContractorsService service) {
        this.contractorsService = service;
    }
}
