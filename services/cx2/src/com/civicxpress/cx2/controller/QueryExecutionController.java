/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/

package com.civicxpress.cx2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.joda.time.LocalDateTime;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.IntegerWrapper;
import com.wavemaker.runtime.data.dao.query.WMQueryExecutor;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.civicxpress.cx2.FormMessages;
import com.civicxpress.cx2.FormTypeFields;
import com.civicxpress.cx2.FormsToInspections;
import com.civicxpress.cx2.InspectionDesign;
import com.civicxpress.cx2.MasterForms;
import com.civicxpress.cx2.MyCart;
import com.civicxpress.cx2.Projects;
import com.civicxpress.cx2.UserSubscriptions;
import com.civicxpress.cx2.Users;
import com.civicxpress.cx2.Vendor;
import com.civicxpress.cx2.service.Cx2QueryExecutorService;
import com.civicxpress.cx2.models.query.*;

@RestController(value = "Cx2.QueryExecutionController")
@RequestMapping("/cx2/queryExecutor")
@Api(value = "QueryExecutionController", description = "controller class for query execution")
public class QueryExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(QueryExecutionController.class);

    @Autowired
    private Cx2QueryExecutorService queryService;

    @RequestMapping(value = "/queries/GetRecentMessageId", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "GetRecentMessageId")
    public Page<GetRecentMessageIdResponse> executeGetRecentMessageId(@RequestParam(value = "form", required = false) String form, @RequestParam(value = "PostedAt", required = false) Timestamp postedAt, Pageable pageable) {
        LOGGER.debug("Executing named query: GetRecentMessageId");
        Page<GetRecentMessageIdResponse> _result = queryService.executeGetRecentMessageId(form, postedAt, pageable);
        LOGGER.debug("got the result for named query: GetRecentMessageId, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetRecentMessageId")
    @RequestMapping(value = "/queries/GetRecentMessageId/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetRecentMessageId(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "form", required = false) String form, @RequestParam(value = "PostedAt", required = false) Timestamp postedAt, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetRecentMessageId");

        return queryService.exportGetRecentMessageId(exportType, form, postedAt, pageable);
    }

    @RequestMapping(value = "/queries/getInspectionsByOutcome", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "getInspectionsByOutcome")
    public Page<GetInspectionsByOutcomeResponse> executeGetInspectionsByOutcome(@RequestParam(value = "municipality") Integer municipality, @RequestParam(value = "outcome") String outcome, Pageable pageable) {
        LOGGER.debug("Executing named query: getInspectionsByOutcome");
        Page<GetInspectionsByOutcomeResponse> _result = queryService.executeGetInspectionsByOutcome(municipality, outcome, pageable);
        LOGGER.debug("got the result for named query: getInspectionsByOutcome, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query getInspectionsByOutcome")
    @RequestMapping(value = "/queries/getInspectionsByOutcome/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetInspectionsByOutcome(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "municipality") Integer municipality, @RequestParam(value = "outcome") String outcome, Pageable pageable) {
        LOGGER.debug("Exporting named query: getInspectionsByOutcome");

        return queryService.exportGetInspectionsByOutcome(exportType, municipality, outcome, pageable);
    }

    @RequestMapping(value = "/queries/getCalculatableFormFields", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get form fields which can be added to a calculated field")
    public Page<FormTypeFields> executeGetCalculatableFormFields(@RequestParam(value = "formTypeId") Integer formTypeId, Pageable pageable) {
        LOGGER.debug("Executing named query: getCalculatableFormFields");
        Page<FormTypeFields> _result = queryService.executeGetCalculatableFormFields(formTypeId, pageable);
        LOGGER.debug("got the result for named query: getCalculatableFormFields, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query getCalculatableFormFields")
    @RequestMapping(value = "/queries/getCalculatableFormFields/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetCalculatableFormFields(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "formTypeId") Integer formTypeId, Pageable pageable) {
        LOGGER.debug("Exporting named query: getCalculatableFormFields");

        return queryService.exportGetCalculatableFormFields(exportType, formTypeId, pageable);
    }

    @RequestMapping(value = "/queries/AdminsMunicipalities", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Admin'sMunicipalities")
    public Page<AdminsMunicipalitiesResponse> executeAdminsMunicipalities(@RequestParam(value = "user", required = false) Integer user, Pageable pageable) {
        LOGGER.debug("Executing named query: AdminsMunicipalities");
        Page<AdminsMunicipalitiesResponse> _result = queryService.executeAdminsMunicipalities(user, pageable);
        LOGGER.debug("got the result for named query: AdminsMunicipalities, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query AdminsMunicipalities")
    @RequestMapping(value = "/queries/AdminsMunicipalities/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportAdminsMunicipalities(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "user", required = false) Integer user, Pageable pageable) {
        LOGGER.debug("Exporting named query: AdminsMunicipalities");

        return queryService.exportAdminsMunicipalities(exportType, user, pageable);
    }

    @RequestMapping(value = "/queries/InsertIntoCart", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "InsertIntoCart")
    public IntegerWrapper executeInsertIntoCart(@Valid @RequestBody InsertIntoCartRequest insertIntoCartRequest) {
        LOGGER.debug("Executing named query: InsertIntoCart");
        Integer _result = queryService.executeInsertIntoCart(insertIntoCartRequest);
        LOGGER.debug("got the result for named query: InsertIntoCart, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/ProjectSoftDelete", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "ProjectSoftDelete")
    public Integer executeProjectSoftDelete(@Valid @RequestBody ProjectSoftDeleteRequest projectSoftDeleteRequest) {
        LOGGER.debug("Executing named query: ProjectSoftDelete");
        Integer _result = queryService.executeProjectSoftDelete(projectSoftDeleteRequest);
        LOGGER.debug("got the result for named query: ProjectSoftDelete, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/UpdatePrimaryVendorInMasterForms", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "UpdatePrimaryVendorInMasterForms")
    public Integer executeUpdatePrimaryVendorInMasterForms(@Valid @RequestBody UpdatePrimaryVendorInMasterFormsRequest updatePrimaryVendorInMasterFormsRequest) {
        LOGGER.debug("Executing named query: UpdatePrimaryVendorInMasterForms");
        Integer _result = queryService.executeUpdatePrimaryVendorInMasterForms(updatePrimaryVendorInMasterFormsRequest);
        LOGGER.debug("got the result for named query: UpdatePrimaryVendorInMasterForms, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/StandardUserMunicipalites", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "StandardUserMunicipalites")
    public Page<StandardUserMunicipalitesResponse> executeStandardUserMunicipalites(@RequestParam(value = "USER", required = false) Integer user, Pageable pageable) {
        LOGGER.debug("Executing named query: StandardUserMunicipalites");
        Page<StandardUserMunicipalitesResponse> _result = queryService.executeStandardUserMunicipalites(user, pageable);
        LOGGER.debug("got the result for named query: StandardUserMunicipalites, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query StandardUserMunicipalites")
    @RequestMapping(value = "/queries/StandardUserMunicipalites/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportStandardUserMunicipalites(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "USER", required = false) Integer user, Pageable pageable) {
        LOGGER.debug("Exporting named query: StandardUserMunicipalites");

        return queryService.exportStandardUserMunicipalites(exportType, user, pageable);
    }

    @RequestMapping(value = "/queries/getEmailId", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Email ID of the Respective UserID")
    public Page<GetEmailIdResponse> executeGetEmailId(@RequestParam(value = "userID", required = false) Integer userId, Pageable pageable) {
        LOGGER.debug("Executing named query: getEmailId");
        Page<GetEmailIdResponse> _result = queryService.executeGetEmailId(userId, pageable);
        LOGGER.debug("got the result for named query: getEmailId, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query getEmailId")
    @RequestMapping(value = "/queries/getEmailId/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetEmailId(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "userID", required = false) Integer userId, Pageable pageable) {
        LOGGER.debug("Exporting named query: getEmailId");

        return queryService.exportGetEmailId(exportType, userId, pageable);
    }

    @RequestMapping(value = "/queries/AddUsersToVendor", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "AddUsersToVendor")
    public Integer executeAddUsersToVendor(@Valid @RequestBody AddUsersToVendorRequest addUsersToVendorRequest) {
        LOGGER.debug("Executing named query: AddUsersToVendor");
        Integer _result = queryService.executeAddUsersToVendor(addUsersToVendorRequest);
        LOGGER.debug("got the result for named query: AddUsersToVendor, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/UpdatePasswordAndCF", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "UpdatePasswordAndCF")
    public Integer executeUpdatePasswordAndCF(@Valid @RequestBody UpdatePasswordAndCfRequest updatePasswordAndCfRequest) {
        LOGGER.debug("Executing named query: UpdatePasswordAndCF");
        Integer _result = queryService.executeUpdatePasswordAndCF(updatePasswordAndCfRequest);
        LOGGER.debug("got the result for named query: UpdatePasswordAndCF, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/CheckingUserWithMunicipalityInRoles", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "CheckingUserWithMunicipalityInRoles")
    public Page<CheckingUserWithMunicipalityInRolesResponse> executeCheckingUserWithMunicipalityInRoles(@RequestParam(value = "muncipality", required = false) Integer muncipality, @RequestParam(value = "user", required = false) Integer user, Pageable pageable) {
        LOGGER.debug("Executing named query: CheckingUserWithMunicipalityInRoles");
        Page<CheckingUserWithMunicipalityInRolesResponse> _result = queryService.executeCheckingUserWithMunicipalityInRoles(muncipality, user, pageable);
        LOGGER.debug("got the result for named query: CheckingUserWithMunicipalityInRoles, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query CheckingUserWithMunicipalityInRoles")
    @RequestMapping(value = "/queries/CheckingUserWithMunicipalityInRoles/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCheckingUserWithMunicipalityInRoles(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "muncipality", required = false) Integer muncipality, @RequestParam(value = "user", required = false) Integer user, Pageable pageable) {
        LOGGER.debug("Exporting named query: CheckingUserWithMunicipalityInRoles");

        return queryService.exportCheckingUserWithMunicipalityInRoles(exportType, muncipality, user, pageable);
    }

    @RequestMapping(value = "/queries/UpdateCFInProfile", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "UpdateCFInProfile")
    public Integer executeUpdateCFInProfile(@Valid @RequestBody UpdateCfinProfileRequest updateCfinProfileRequest) {
        LOGGER.debug("Executing named query: UpdateCFInProfile");
        Integer _result = queryService.executeUpdateCFInProfile(updateCfinProfileRequest);
        LOGGER.debug("got the result for named query: UpdateCFInProfile, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/MunicipalitiesGroupsCounts", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "MunicipalitiesGroupsCounts")
    public Page<MunicipalitiesGroupsCountsResponse> executeMunicipalitiesGroupsCounts(@RequestParam(value = "municipality", required = false) Integer municipality, Pageable pageable) {
        LOGGER.debug("Executing named query: MunicipalitiesGroupsCounts");
        Page<MunicipalitiesGroupsCountsResponse> _result = queryService.executeMunicipalitiesGroupsCounts(municipality, pageable);
        LOGGER.debug("got the result for named query: MunicipalitiesGroupsCounts, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query MunicipalitiesGroupsCounts")
    @RequestMapping(value = "/queries/MunicipalitiesGroupsCounts/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportMunicipalitiesGroupsCounts(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "municipality", required = false) Integer municipality, Pageable pageable) {
        LOGGER.debug("Exporting named query: MunicipalitiesGroupsCounts");

        return queryService.exportMunicipalitiesGroupsCounts(exportType, municipality, pageable);
    }

    @RequestMapping(value = "/queries/GetRecentMessageIdForProject", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "GetRecentMessageIdForProject")
    public FormMessages executeGetRecentMessageIdForProject(@RequestParam(value = "project") String project, @RequestParam(value = "PostedAt") Timestamp postedAt) {
        LOGGER.debug("Executing named query: GetRecentMessageIdForProject");
        FormMessages _result = queryService.executeGetRecentMessageIdForProject(project, postedAt);
        LOGGER.debug("got the result for named query: GetRecentMessageIdForProject, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/InsertCategoryMapping", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "InsertCategoryMapping")
    public Integer executeInsertCategoryMapping(@Valid @RequestBody InsertCategoryMappingRequest insertCategoryMappingRequest) {
        LOGGER.debug("Executing named query: InsertCategoryMapping");
        Integer _result = queryService.executeInsertCategoryMapping(insertCategoryMappingRequest);
        LOGGER.debug("got the result for named query: InsertCategoryMapping, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/ProcessFormsForUserByMunicipality", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get forms from Master Forms where employee is in group of that in current form Status")
    public Page<ProcessFormsForUserByMunicipalityResponse> executeProcessFormsForUserByMunicipality(@RequestParam(value = "closed") Boolean closed, @RequestParam(value = "MunicipalityId") Long municipalityId, @RequestParam(value = "UserId") Long userId, Pageable pageable) {
        LOGGER.debug("Executing named query: ProcessFormsForUserByMunicipality");
        Page<ProcessFormsForUserByMunicipalityResponse> _result = queryService.executeProcessFormsForUserByMunicipality(closed, municipalityId, userId, pageable);
        LOGGER.debug("got the result for named query: ProcessFormsForUserByMunicipality, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query ProcessFormsForUserByMunicipality")
    @RequestMapping(value = "/queries/ProcessFormsForUserByMunicipality/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportProcessFormsForUserByMunicipality(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "closed") Boolean closed, @RequestParam(value = "MunicipalityId") Long municipalityId, @RequestParam(value = "UserId") Long userId, Pageable pageable) {
        LOGGER.debug("Exporting named query: ProcessFormsForUserByMunicipality");

        return queryService.exportProcessFormsForUserByMunicipality(exportType, closed, municipalityId, userId, pageable);
    }

    @RequestMapping(value = "/queries/FormsCountForMunicipalities", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "FormsCountForMunicipalities")
    public Page<FormsCountForMunicipalitiesResponse> executeFormsCountForMunicipalities(@RequestParam(value = "MunicipalityId", required = false) Integer municipalityId, Pageable pageable) {
        LOGGER.debug("Executing named query: FormsCountForMunicipalities");
        Page<FormsCountForMunicipalitiesResponse> _result = queryService.executeFormsCountForMunicipalities(municipalityId, pageable);
        LOGGER.debug("got the result for named query: FormsCountForMunicipalities, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query FormsCountForMunicipalities")
    @RequestMapping(value = "/queries/FormsCountForMunicipalities/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportFormsCountForMunicipalities(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "MunicipalityId", required = false) Integer municipalityId, Pageable pageable) {
        LOGGER.debug("Exporting named query: FormsCountForMunicipalities");

        return queryService.exportFormsCountForMunicipalities(exportType, municipalityId, pageable);
    }

    @RequestMapping(value = "/queries/CountOfMunicipalityProjects", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "CountOfMunicipalityProjects")
    public Page<CountOfMunicipalityProjectsResponse> executeCountOfMunicipalityProjects(@RequestParam(value = "municipalityId", required = false) Integer municipalityId, @RequestParam(value = "Active", required = false) Boolean active, Pageable pageable) {
        LOGGER.debug("Executing named query: CountOfMunicipalityProjects");
        Page<CountOfMunicipalityProjectsResponse> _result = queryService.executeCountOfMunicipalityProjects(municipalityId, active, pageable);
        LOGGER.debug("got the result for named query: CountOfMunicipalityProjects, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query CountOfMunicipalityProjects")
    @RequestMapping(value = "/queries/CountOfMunicipalityProjects/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCountOfMunicipalityProjects(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "municipalityId", required = false) Integer municipalityId, @RequestParam(value = "Active", required = false) Boolean active, Pageable pageable) {
        LOGGER.debug("Exporting named query: CountOfMunicipalityProjects");

        return queryService.exportCountOfMunicipalityProjects(exportType, municipalityId, active, pageable);
    }

    @RequestMapping(value = "/queries/VendorCount", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "A count of Vendor entries")
    public Page<VendorCountResponse> executeVendorCount(Pageable pageable) {
        LOGGER.debug("Executing named query: VendorCount");
        Page<VendorCountResponse> _result = queryService.executeVendorCount(pageable);
        LOGGER.debug("got the result for named query: VendorCount, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query VendorCount")
    @RequestMapping(value = "/queries/VendorCount/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVendorCount(@PathVariable("exportType") ExportType exportType, Pageable pageable) {
        LOGGER.debug("Exporting named query: VendorCount");

        return queryService.exportVendorCount(exportType, pageable);
    }

    @RequestMapping(value = "/queries/UpdateWorkMunicipality", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "UpdateWorkMunicipality")
    public Integer executeUpdateWorkMunicipality(@Valid @RequestBody UpdateWorkMunicipalityRequest updateWorkMunicipalityRequest) {
        LOGGER.debug("Executing named query: UpdateWorkMunicipality");
        Integer _result = queryService.executeUpdateWorkMunicipality(updateWorkMunicipalityRequest);
        LOGGER.debug("got the result for named query: UpdateWorkMunicipality, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/FeeByFeeTypesToDashboard", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "FeeByFeeTypesToDashboard")
    public Page<FeeByFeeTypesToDashboardResponse> executeFeeByFeeTypesToDashboard(@RequestParam(value = "municpality") Integer municpality, @RequestParam(value = "startDate") Date startDate, @RequestParam(value = "endDate") Date endDate, Pageable pageable) {
        LOGGER.debug("Executing named query: FeeByFeeTypesToDashboard");
        Page<FeeByFeeTypesToDashboardResponse> _result = queryService.executeFeeByFeeTypesToDashboard(municpality, startDate, endDate, pageable);
        LOGGER.debug("got the result for named query: FeeByFeeTypesToDashboard, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query FeeByFeeTypesToDashboard")
    @RequestMapping(value = "/queries/FeeByFeeTypesToDashboard/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportFeeByFeeTypesToDashboard(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "municpality") Integer municpality, @RequestParam(value = "startDate") Date startDate, @RequestParam(value = "endDate") Date endDate, Pageable pageable) {
        LOGGER.debug("Exporting named query: FeeByFeeTypesToDashboard");

        return queryService.exportFeeByFeeTypesToDashboard(exportType, municpality, startDate, endDate, pageable);
    }

    @RequestMapping(value = "/queries/getFormTypeFieldsByTypeId", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "See name")
    public Page<GetFormTypeFieldsByTypeIdResponse> executeGetFormTypeFieldsByTypeId(@RequestParam(value = "formTypeId", required = false) Long formTypeId, Pageable pageable) {
        LOGGER.debug("Executing named query: getFormTypeFieldsByTypeId");
        Page<GetFormTypeFieldsByTypeIdResponse> _result = queryService.executeGetFormTypeFieldsByTypeId(formTypeId, pageable);
        LOGGER.debug("got the result for named query: getFormTypeFieldsByTypeId, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query getFormTypeFieldsByTypeId")
    @RequestMapping(value = "/queries/getFormTypeFieldsByTypeId/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetFormTypeFieldsByTypeId(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "formTypeId", required = false) Long formTypeId, Pageable pageable) {
        LOGGER.debug("Exporting named query: getFormTypeFieldsByTypeId");

        return queryService.exportGetFormTypeFieldsByTypeId(exportType, formTypeId, pageable);
    }

    @RequestMapping(value = "/queries/CountOfProjectsForUsersAndSharedWithByMunicipality", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "CountOfProjectsForUsersAndSharedWithByMunicipality")
    public Page<CountOfProjectsForUsersAndSharedWithByMunicipalityResponse> executeCountOfProjectsForUsersAndSharedWithByMunicipality(@RequestParam(value = "municipalityId", required = false) Integer municipalityId, @RequestParam(value = "Active", required = false) Boolean active, @RequestParam(value = "creatorUser", required = false) Integer creatorUser, @RequestParam(value = "sharedWithUser", required = false) Integer sharedWithUser, Pageable pageable) {
        LOGGER.debug("Executing named query: CountOfProjectsForUsersAndSharedWithByMunicipality");
        Page<CountOfProjectsForUsersAndSharedWithByMunicipalityResponse> _result = queryService.executeCountOfProjectsForUsersAndSharedWithByMunicipality(municipalityId, active, creatorUser, sharedWithUser, pageable);
        LOGGER.debug("got the result for named query: CountOfProjectsForUsersAndSharedWithByMunicipality, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query CountOfProjectsForUsersAndSharedWithByMunicipality")
    @RequestMapping(value = "/queries/CountOfProjectsForUsersAndSharedWithByMunicipality/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCountOfProjectsForUsersAndSharedWithByMunicipality(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "municipalityId", required = false) Integer municipalityId, @RequestParam(value = "Active", required = false) Boolean active, @RequestParam(value = "creatorUser", required = false) Integer creatorUser, @RequestParam(value = "sharedWithUser", required = false) Integer sharedWithUser, Pageable pageable) {
        LOGGER.debug("Exporting named query: CountOfProjectsForUsersAndSharedWithByMunicipality");

        return queryService.exportCountOfProjectsForUsersAndSharedWithByMunicipality(exportType, municipalityId, active, creatorUser, sharedWithUser, pageable);
    }

    @RequestMapping(value = "/queries/UpdateConsiderClosedForInspectionOutcome", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "UpdateConsiderClosedForInspectionOutcome")
    public IntegerWrapper executeUpdateConsiderClosedForInspectionOutcome(@Valid @RequestBody UpdateConsiderClosedForInspectionOutcomeRequest updateConsiderClosedForInspectionOutcomeRequest) {
        LOGGER.debug("Executing named query: UpdateConsiderClosedForInspectionOutcome");
        Integer _result = queryService.executeUpdateConsiderClosedForInspectionOutcome(updateConsiderClosedForInspectionOutcomeRequest);
        LOGGER.debug("got the result for named query: UpdateConsiderClosedForInspectionOutcome, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/UpdateAsCXVendorAdmin", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "UpdateAsCXVendorAdmin")
    public Integer executeUpdateAsCXVendorAdmin(@Valid @RequestBody UpdateAsCxvendorAdminRequest updateAsCxvendorAdminRequest) {
        LOGGER.debug("Executing named query: UpdateAsCXVendorAdmin");
        Integer _result = queryService.executeUpdateAsCXVendorAdmin(updateAsCxvendorAdminRequest);
        LOGGER.debug("got the result for named query: UpdateAsCXVendorAdmin, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/FormsByCategory", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "FormsByCategory")
    public Page<FormsByCategoryResponse> executeFormsByCategory(@RequestParam(value = "formCategory", required = false) Integer formCategory, @RequestParam(value = "isActive", required = false) Boolean isActive, Pageable pageable) {
        LOGGER.debug("Executing named query: FormsByCategory");
        Page<FormsByCategoryResponse> _result = queryService.executeFormsByCategory(formCategory, isActive, pageable);
        LOGGER.debug("got the result for named query: FormsByCategory, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query FormsByCategory")
    @RequestMapping(value = "/queries/FormsByCategory/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportFormsByCategory(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "formCategory", required = false) Integer formCategory, @RequestParam(value = "isActive", required = false) Boolean isActive, Pageable pageable) {
        LOGGER.debug("Exporting named query: FormsByCategory");

        return queryService.exportFormsByCategory(exportType, formCategory, isActive, pageable);
    }

    @RequestMapping(value = "/queries/CountOfCompnayFormsByVendorId", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "CountOfCompnayFormsByVendorId")
    public Page<CountOfCompnayFormsByVendorIdResponse> executeCountOfCompnayFormsByVendorId(@RequestParam(value = "closed", required = false) Boolean closed, @RequestParam(value = "vendorId", required = false) Integer vendorId, Pageable pageable) {
        LOGGER.debug("Executing named query: CountOfCompnayFormsByVendorId");
        Page<CountOfCompnayFormsByVendorIdResponse> _result = queryService.executeCountOfCompnayFormsByVendorId(closed, vendorId, pageable);
        LOGGER.debug("got the result for named query: CountOfCompnayFormsByVendorId, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query CountOfCompnayFormsByVendorId")
    @RequestMapping(value = "/queries/CountOfCompnayFormsByVendorId/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCountOfCompnayFormsByVendorId(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "closed", required = false) Boolean closed, @RequestParam(value = "vendorId", required = false) Integer vendorId, Pageable pageable) {
        LOGGER.debug("Exporting named query: CountOfCompnayFormsByVendorId");

        return queryService.exportCountOfCompnayFormsByVendorId(exportType, closed, vendorId, pageable);
    }

    @RequestMapping(value = "/queries/OpenedOrClosedFormsForUserOrSharedWith", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "OpenedOrClosedFormsForUserOrSharedWith")
    public Page<MasterForms> executeOpenedOrClosedFormsForUserOrSharedWith(@RequestParam(value = "userId") Long userId, Pageable pageable) {
        LOGGER.debug("Executing named query: OpenedOrClosedFormsForUserOrSharedWith");
        Page<MasterForms> _result = queryService.executeOpenedOrClosedFormsForUserOrSharedWith(userId, pageable);
        LOGGER.debug("got the result for named query: OpenedOrClosedFormsForUserOrSharedWith, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query OpenedOrClosedFormsForUserOrSharedWith")
    @RequestMapping(value = "/queries/OpenedOrClosedFormsForUserOrSharedWith/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportOpenedOrClosedFormsForUserOrSharedWith(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "userId") Long userId, Pageable pageable) {
        LOGGER.debug("Exporting named query: OpenedOrClosedFormsForUserOrSharedWith");

        return queryService.exportOpenedOrClosedFormsForUserOrSharedWith(exportType, userId, pageable);
    }

    @RequestMapping(value = "/queries/searchUsersByEmailOrName", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Searches users by email or full name")
    public Page<SearchUsersByEmailOrNameResponse> executeSearchUsersByEmailOrName(@RequestParam(value = "searchString", required = false) String searchString, Pageable pageable) {
        LOGGER.debug("Executing named query: searchUsersByEmailOrName");
        Page<SearchUsersByEmailOrNameResponse> _result = queryService.executeSearchUsersByEmailOrName(searchString, pageable);
        LOGGER.debug("got the result for named query: searchUsersByEmailOrName, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query searchUsersByEmailOrName")
    @RequestMapping(value = "/queries/searchUsersByEmailOrName/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportSearchUsersByEmailOrName(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "searchString", required = false) String searchString, Pageable pageable) {
        LOGGER.debug("Exporting named query: searchUsersByEmailOrName");

        return queryService.exportSearchUsersByEmailOrName(exportType, searchString, pageable);
    }

    @RequestMapping(value = "/queries/UpdateGlobalEmailSig", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "UpdateGlobalEmailSig")
    public Integer executeUpdateGlobalEmailSig(@Valid @RequestBody UpdateGlobalEmailSigRequest updateGlobalEmailSigRequest) {
        LOGGER.debug("Executing named query: UpdateGlobalEmailSig");
        Integer _result = queryService.executeUpdateGlobalEmailSig(updateGlobalEmailSigRequest);
        LOGGER.debug("got the result for named query: UpdateGlobalEmailSig, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/updateTrackViolations", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "updateTrackViolations")
    public IntegerWrapper executeUpdateTrackViolations(@Valid @RequestBody UpdateTrackViolationsRequest updateTrackViolationsRequest) {
        LOGGER.debug("Executing named query: updateTrackViolations");
        Integer _result = queryService.executeUpdateTrackViolations(updateTrackViolationsRequest);
        LOGGER.debug("got the result for named query: updateTrackViolations, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/DeleteFromVendorAdmins", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "DeleteFromVendorAdmins")
    public Integer executeDeleteFromVendorAdmins(@RequestParam(value = "user", required = false) Integer user, @RequestParam(value = "vendor", required = false) Integer vendor) {
        LOGGER.debug("Executing named query: DeleteFromVendorAdmins");
        Integer _result = queryService.executeDeleteFromVendorAdmins(user, vendor);
        LOGGER.debug("got the result for named query: DeleteFromVendorAdmins, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/SetPrimaryVendorStatusForFormandVendor", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "SetPrimaryVendorStatusForFormandVendor")
    public Integer executeSetPrimaryVendorStatusForFormandVendor(@Valid @RequestBody SetPrimaryVendorStatusForFormandVendorRequest setPrimaryVendorStatusForFormandVendorRequest) {
        LOGGER.debug("Executing named query: SetPrimaryVendorStatusForFormandVendor");
        Integer _result = queryService.executeSetPrimaryVendorStatusForFormandVendor(setPrimaryVendorStatusForFormandVendorRequest);
        LOGGER.debug("got the result for named query: SetPrimaryVendorStatusForFormandVendor, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/AllFeeformCount", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "AllFeeformCount")
    public Page<AllFeeformCountResponse> executeAllFeeformCount(@RequestParam(value = "allowPayment") Boolean allowPayment, @RequestParam(value = "paidStatus") String paidStatus, @RequestParam(value = "userId") Integer userId, Pageable pageable) {
        LOGGER.debug("Executing named query: AllFeeformCount");
        Page<AllFeeformCountResponse> _result = queryService.executeAllFeeformCount(allowPayment, paidStatus, userId, pageable);
        LOGGER.debug("got the result for named query: AllFeeformCount, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query AllFeeformCount")
    @RequestMapping(value = "/queries/AllFeeformCount/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportAllFeeformCount(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "allowPayment") Boolean allowPayment, @RequestParam(value = "paidStatus") String paidStatus, @RequestParam(value = "userId") Integer userId, Pageable pageable) {
        LOGGER.debug("Exporting named query: AllFeeformCount");

        return queryService.exportAllFeeformCount(exportType, allowPayment, paidStatus, userId, pageable);
    }

    @RequestMapping(value = "/queries/DeleteCategoryMapping", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "DeleteCategoryMapping")
    public Integer executeDeleteCategoryMapping(@RequestParam(value = "form", required = false) Integer form) {
        LOGGER.debug("Executing named query: DeleteCategoryMapping");
        Integer _result = queryService.executeDeleteCategoryMapping(form);
        LOGGER.debug("got the result for named query: DeleteCategoryMapping, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/getUserIdFromPasswordResetToken", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns a UserID, given a valid password reset token. Used internally")
    public Page<GetUserIdFromPasswordResetTokenResponse> executeGetUserIdFromPasswordResetToken(@RequestParam(value = "token", required = false) String token, Pageable pageable) {
        LOGGER.debug("Executing named query: getUserIdFromPasswordResetToken");
        Page<GetUserIdFromPasswordResetTokenResponse> _result = queryService.executeGetUserIdFromPasswordResetToken(token, pageable);
        LOGGER.debug("got the result for named query: getUserIdFromPasswordResetToken, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query getUserIdFromPasswordResetToken")
    @RequestMapping(value = "/queries/getUserIdFromPasswordResetToken/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetUserIdFromPasswordResetToken(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "token", required = false) String token, Pageable pageable) {
        LOGGER.debug("Exporting named query: getUserIdFromPasswordResetToken");

        return queryService.exportGetUserIdFromPasswordResetToken(exportType, token, pageable);
    }

    @RequestMapping(value = "/queries/FormsByVendorsForDashboard", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "FormsByVendorsForDashboard")
    public Page<FormsByVendorsForDashboardResponse> executeFormsByVendorsForDashboard(@RequestParam(value = "municipality") Integer municipality, @RequestParam(value = "startDate") Timestamp startDate, @RequestParam(value = "endDate") Timestamp endDate, Pageable pageable) {
        LOGGER.debug("Executing named query: FormsByVendorsForDashboard");
        Page<FormsByVendorsForDashboardResponse> _result = queryService.executeFormsByVendorsForDashboard(municipality, startDate, endDate, pageable);
        LOGGER.debug("got the result for named query: FormsByVendorsForDashboard, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query FormsByVendorsForDashboard")
    @RequestMapping(value = "/queries/FormsByVendorsForDashboard/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportFormsByVendorsForDashboard(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "municipality") Integer municipality, @RequestParam(value = "startDate") Timestamp startDate, @RequestParam(value = "endDate") Timestamp endDate, Pageable pageable) {
        LOGGER.debug("Exporting named query: FormsByVendorsForDashboard");

        return queryService.exportFormsByVendorsForDashboard(exportType, municipality, startDate, endDate, pageable);
    }

    @RequestMapping(value = "/queries/CountOfProcessFormsByMuncipality", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "CountOfProcessFormsByMuncipality")
    public Page<CountOfProcessFormsByMuncipalityResponse> executeCountOfProcessFormsByMuncipality(@RequestParam(value = "MunicipalityId", required = false) Integer municipalityId, @RequestParam(value = "closed", required = false) Boolean closed, @RequestParam(value = "UserId", required = false) Integer userId, Pageable pageable) {
        LOGGER.debug("Executing named query: CountOfProcessFormsByMuncipality");
        Page<CountOfProcessFormsByMuncipalityResponse> _result = queryService.executeCountOfProcessFormsByMuncipality(municipalityId, closed, userId, pageable);
        LOGGER.debug("got the result for named query: CountOfProcessFormsByMuncipality, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query CountOfProcessFormsByMuncipality")
    @RequestMapping(value = "/queries/CountOfProcessFormsByMuncipality/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCountOfProcessFormsByMuncipality(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "MunicipalityId", required = false) Integer municipalityId, @RequestParam(value = "closed", required = false) Boolean closed, @RequestParam(value = "UserId", required = false) Integer userId, Pageable pageable) {
        LOGGER.debug("Exporting named query: CountOfProcessFormsByMuncipality");

        return queryService.exportCountOfProcessFormsByMuncipality(exportType, municipalityId, closed, userId, pageable);
    }

    @RequestMapping(value = "/queries/countAssignedInspectionsBetweenDates", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "countAssignedInspectionsBetweenDates")
    public Page<CountAssignedInspectionsBetweenDatesResponse> executeCountAssignedInspectionsBetweenDates(@RequestParam(value = "municipality") Integer municipality, @RequestParam(value = "isClosed") Boolean isClosed, @RequestParam(value = "assignedTo") Integer assignedTo, @RequestParam(value = "startDate") LocalDateTime startDate, @RequestParam(value = "endDate") LocalDateTime endDate, Pageable pageable) {
        LOGGER.debug("Executing named query: countAssignedInspectionsBetweenDates");
        Page<CountAssignedInspectionsBetweenDatesResponse> _result = queryService.executeCountAssignedInspectionsBetweenDates(municipality, isClosed, assignedTo, startDate, endDate, pageable);
        LOGGER.debug("got the result for named query: countAssignedInspectionsBetweenDates, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query countAssignedInspectionsBetweenDates")
    @RequestMapping(value = "/queries/countAssignedInspectionsBetweenDates/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCountAssignedInspectionsBetweenDates(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "municipality") Integer municipality, @RequestParam(value = "isClosed") Boolean isClosed, @RequestParam(value = "assignedTo") Integer assignedTo, @RequestParam(value = "startDate") LocalDateTime startDate, @RequestParam(value = "endDate") LocalDateTime endDate, Pageable pageable) {
        LOGGER.debug("Exporting named query: countAssignedInspectionsBetweenDates");

        return queryService.exportCountAssignedInspectionsBetweenDates(exportType, municipality, isClosed, assignedTo, startDate, endDate, pageable);
    }

    @RequestMapping(value = "/queries/UpdateVendorsToProject", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "UpdateVendorsToProject")
    public IntegerWrapper executeUpdateVendorsToProject(@Valid @RequestBody UpdateVendorsToProjectRequest updateVendorsToProjectRequest) {
        LOGGER.debug("Executing named query: UpdateVendorsToProject");
        Integer _result = queryService.executeUpdateVendorsToProject(updateVendorsToProjectRequest);
        LOGGER.debug("got the result for named query: UpdateVendorsToProject, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/CountOfCXProjectsActive", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "CountOfCXProjectsActive")
    public Page<CountOfCxprojectsActiveResponse> executeCountOfCXProjectsActive(Pageable pageable) {
        LOGGER.debug("Executing named query: CountOfCXProjectsActive");
        Page<CountOfCxprojectsActiveResponse> _result = queryService.executeCountOfCXProjectsActive(pageable);
        LOGGER.debug("got the result for named query: CountOfCXProjectsActive, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query CountOfCXProjectsActive")
    @RequestMapping(value = "/queries/CountOfCXProjectsActive/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCountOfCXProjectsActive(@PathVariable("exportType") ExportType exportType, Pageable pageable) {
        LOGGER.debug("Exporting named query: CountOfCXProjectsActive");

        return queryService.exportCountOfCXProjectsActive(exportType, pageable);
    }

    @RequestMapping(value = "/queries/distinctInspectionDesignsForFormType", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "distinctInspectionDesignsForFormType")
    public Page<DistinctInspectionDesignsForFormTypeResponse> executeDistinctInspectionDesignsForFormType(@RequestParam(value = "form") Integer form, Pageable pageable) {
        LOGGER.debug("Executing named query: distinctInspectionDesignsForFormType");
        Page<DistinctInspectionDesignsForFormTypeResponse> _result = queryService.executeDistinctInspectionDesignsForFormType(form, pageable);
        LOGGER.debug("got the result for named query: distinctInspectionDesignsForFormType, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query distinctInspectionDesignsForFormType")
    @RequestMapping(value = "/queries/distinctInspectionDesignsForFormType/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportDistinctInspectionDesignsForFormType(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "form") Integer form, Pageable pageable) {
        LOGGER.debug("Exporting named query: distinctInspectionDesignsForFormType");

        return queryService.exportDistinctInspectionDesignsForFormType(exportType, form, pageable);
    }

    @RequestMapping(value = "/queries/InspectionsOfForm", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "InspectionsOfForm")
    public Page<FormsToInspections> executeInspectionsOfForm(@RequestParam(value = "form") String form, Pageable pageable) {
        LOGGER.debug("Executing named query: InspectionsOfForm");
        Page<FormsToInspections> _result = queryService.executeInspectionsOfForm(form, pageable);
        LOGGER.debug("got the result for named query: InspectionsOfForm, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query InspectionsOfForm")
    @RequestMapping(value = "/queries/InspectionsOfForm/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportInspectionsOfForm(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "form") String form, Pageable pageable) {
        LOGGER.debug("Exporting named query: InspectionsOfForm");

        return queryService.exportInspectionsOfForm(exportType, form, pageable);
    }

    @RequestMapping(value = "/queries/AddingVendorsToForm", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "AddingVendorsToForm")
    public Integer executeAddingVendorsToForm(@Valid @RequestBody AddingVendorsToFormRequest addingVendorsToFormRequest) {
        LOGGER.debug("Executing named query: AddingVendorsToForm");
        Integer _result = queryService.executeAddingVendorsToForm(addingVendorsToFormRequest);
        LOGGER.debug("got the result for named query: AddingVendorsToForm, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/getCartItemIds", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get the card item IDs for the current user.")
    public Page<GetCartItemIdsResponse> executeGetCartItemIds(@RequestParam(value = "userId") Long userId, Pageable pageable) {
        LOGGER.debug("Executing named query: getCartItemIds");
        Page<GetCartItemIdsResponse> _result = queryService.executeGetCartItemIds(userId, pageable);
        LOGGER.debug("got the result for named query: getCartItemIds, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query getCartItemIds")
    @RequestMapping(value = "/queries/getCartItemIds/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetCartItemIds(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "userId") Long userId, Pageable pageable) {
        LOGGER.debug("Exporting named query: getCartItemIds");

        return queryService.exportGetCartItemIds(exportType, userId, pageable);
    }

    @RequestMapping(value = "/queries/PreferenceForUser", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "PreferenceForUser")
    public Page<PreferenceForUserResponse> executePreferenceForUser(@RequestParam(value = "userId", required = false) Integer userId, Pageable pageable) {
        LOGGER.debug("Executing named query: PreferenceForUser");
        Page<PreferenceForUserResponse> _result = queryService.executePreferenceForUser(userId, pageable);
        LOGGER.debug("got the result for named query: PreferenceForUser, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query PreferenceForUser")
    @RequestMapping(value = "/queries/PreferenceForUser/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPreferenceForUser(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "userId", required = false) Integer userId, Pageable pageable) {
        LOGGER.debug("Exporting named query: PreferenceForUser");

        return queryService.exportPreferenceForUser(exportType, userId, pageable);
    }

    @RequestMapping(value = "/queries/InsertMasterInspections", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "InsertMasterInspections")
    public IntegerWrapper executeInsertMasterInspections(@Valid @RequestBody InsertMasterInspectionsRequest insertMasterInspectionsRequest) {
        LOGGER.debug("Executing named query: InsertMasterInspections");
        Integer _result = queryService.executeInsertMasterInspections(insertMasterInspectionsRequest);
        LOGGER.debug("got the result for named query: InsertMasterInspections, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/UserCount", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "UserCount")
    public Page<UserCountResponse> executeUserCount(Pageable pageable) {
        LOGGER.debug("Executing named query: UserCount");
        Page<UserCountResponse> _result = queryService.executeUserCount(pageable);
        LOGGER.debug("got the result for named query: UserCount, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query UserCount")
    @RequestMapping(value = "/queries/UserCount/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportUserCount(@PathVariable("exportType") ExportType exportType, Pageable pageable) {
        LOGGER.debug("Exporting named query: UserCount");

        return queryService.exportUserCount(exportType, pageable);
    }

    @RequestMapping(value = "/queries/FeesInCartByUser", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "FeesInCartByUser")
    public Page<MyCart> executeFeesInCartByUser(@RequestParam(value = "user") Integer user, Pageable pageable) {
        LOGGER.debug("Executing named query: FeesInCartByUser");
        Page<MyCart> _result = queryService.executeFeesInCartByUser(user, pageable);
        LOGGER.debug("got the result for named query: FeesInCartByUser, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query FeesInCartByUser")
    @RequestMapping(value = "/queries/FeesInCartByUser/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportFeesInCartByUser(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "user") Integer user, Pageable pageable) {
        LOGGER.debug("Exporting named query: FeesInCartByUser");

        return queryService.exportFeesInCartByUser(exportType, user, pageable);
    }

    @RequestMapping(value = "/queries/NoOfItemsInUserCart", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "NoOfItemsInUserCart")
    public Page<NoOfItemsInUserCartResponse> executeNoOfItemsInUserCart(@RequestParam(value = "user") Integer user, Pageable pageable) {
        LOGGER.debug("Executing named query: NoOfItemsInUserCart");
        Page<NoOfItemsInUserCartResponse> _result = queryService.executeNoOfItemsInUserCart(user, pageable);
        LOGGER.debug("got the result for named query: NoOfItemsInUserCart, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query NoOfItemsInUserCart")
    @RequestMapping(value = "/queries/NoOfItemsInUserCart/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportNoOfItemsInUserCart(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "user") Integer user, Pageable pageable) {
        LOGGER.debug("Exporting named query: NoOfItemsInUserCart");

        return queryService.exportNoOfItemsInUserCart(exportType, user, pageable);
    }

    @RequestMapping(value = "/queries/CheckIfCompanyUserIsVendorAdmin", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "CheckIfCompanyUserIsVendorAdmin")
    public Page<CheckIfCompanyUserIsVendorAdminResponse> executeCheckIfCompanyUserIsVendorAdmin(@RequestParam(value = "user", required = false) Integer user, @RequestParam(value = "vendor", required = false) Integer vendor, Pageable pageable) {
        LOGGER.debug("Executing named query: CheckIfCompanyUserIsVendorAdmin");
        Page<CheckIfCompanyUserIsVendorAdminResponse> _result = queryService.executeCheckIfCompanyUserIsVendorAdmin(user, vendor, pageable);
        LOGGER.debug("got the result for named query: CheckIfCompanyUserIsVendorAdmin, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query CheckIfCompanyUserIsVendorAdmin")
    @RequestMapping(value = "/queries/CheckIfCompanyUserIsVendorAdmin/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCheckIfCompanyUserIsVendorAdmin(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "user", required = false) Integer user, @RequestParam(value = "vendor", required = false) Integer vendor, Pageable pageable) {
        LOGGER.debug("Exporting named query: CheckIfCompanyUserIsVendorAdmin");

        return queryService.exportCheckIfCompanyUserIsVendorAdmin(exportType, user, vendor, pageable);
    }

    @RequestMapping(value = "/queries/AllFeesOfFormsForCreatedByAndSharedWithByMunicipality", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "AllFeesOfFormsForCreatedByAndSharedWithByMunicipality")
    public Page<AllFeesOfFormsForCreatedByAndSharedWithByMunicipalityResponse> executeAllFeesOfFormsForCreatedByAndSharedWithByMunicipality(@RequestParam(value = "allowPayment") Boolean allowPayment, @RequestParam(value = "municipalityId") Integer municipalityId, @RequestParam(value = "paidStatus") String paidStatus, @RequestParam(value = "userId") Integer userId, Pageable pageable) {
        LOGGER.debug("Executing named query: AllFeesOfFormsForCreatedByAndSharedWithByMunicipality");
        Page<AllFeesOfFormsForCreatedByAndSharedWithByMunicipalityResponse> _result = queryService.executeAllFeesOfFormsForCreatedByAndSharedWithByMunicipality(allowPayment, municipalityId, paidStatus, userId, pageable);
        LOGGER.debug("got the result for named query: AllFeesOfFormsForCreatedByAndSharedWithByMunicipality, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query AllFeesOfFormsForCreatedByAndSharedWithByMunicipality")
    @RequestMapping(value = "/queries/AllFeesOfFormsForCreatedByAndSharedWithByMunicipality/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportAllFeesOfFormsForCreatedByAndSharedWithByMunicipality(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "allowPayment") Boolean allowPayment, @RequestParam(value = "municipalityId") Integer municipalityId, @RequestParam(value = "paidStatus") String paidStatus, @RequestParam(value = "userId") Integer userId, Pageable pageable) {
        LOGGER.debug("Exporting named query: AllFeesOfFormsForCreatedByAndSharedWithByMunicipality");

        return queryService.exportAllFeesOfFormsForCreatedByAndSharedWithByMunicipality(exportType, allowPayment, municipalityId, paidStatus, userId, pageable);
    }

    @RequestMapping(value = "/queries/UpdateProjectDetails", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "UpdateProjectDetails")
    public Integer executeUpdateProjectDetails(@Valid @RequestBody UpdateProjectDetailsRequest updateProjectDetailsRequest) {
        LOGGER.debug("Executing named query: UpdateProjectDetails");
        Integer _result = queryService.executeUpdateProjectDetails(updateProjectDetailsRequest);
        LOGGER.debug("got the result for named query: UpdateProjectDetails, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/InsertUserPreference", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "InsertUserPreference")
    public Integer executeInsertUserPreference(@Valid @RequestBody InsertUserPreferenceRequest insertUserPreferenceRequest) {
        LOGGER.debug("Executing named query: InsertUserPreference");
        Integer _result = queryService.executeInsertUserPreference(insertUserPreferenceRequest);
        LOGGER.debug("got the result for named query: InsertUserPreference, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/CountOfMuncipalityApplicationsByVendor", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "CountOfMuncipalityApplicationsByVendor")
    public Page<CountOfMuncipalityApplicationsByVendorResponse> executeCountOfMuncipalityApplicationsByVendor(@RequestParam(value = "VendorId", required = false) Integer vendorId, Pageable pageable) {
        LOGGER.debug("Executing named query: CountOfMuncipalityApplicationsByVendor");
        Page<CountOfMuncipalityApplicationsByVendorResponse> _result = queryService.executeCountOfMuncipalityApplicationsByVendor(vendorId, pageable);
        LOGGER.debug("got the result for named query: CountOfMuncipalityApplicationsByVendor, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query CountOfMuncipalityApplicationsByVendor")
    @RequestMapping(value = "/queries/CountOfMuncipalityApplicationsByVendor/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCountOfMuncipalityApplicationsByVendor(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "VendorId", required = false) Integer vendorId, Pageable pageable) {
        LOGGER.debug("Exporting named query: CountOfMuncipalityApplicationsByVendor");

        return queryService.exportCountOfMuncipalityApplicationsByVendor(exportType, vendorId, pageable);
    }

    @RequestMapping(value = "/queries/AllFeeFormCountByMunicipality", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "AllFeeFormCountByMunicipality")
    public Page<AllFeeFormCountByMunicipalityResponse> executeAllFeeFormCountByMunicipality(@RequestParam(value = "allowPayment") Boolean allowPayment, @RequestParam(value = "paidStatus") String paidStatus, @RequestParam(value = "municipalityId") Integer municipalityId, @RequestParam(value = "userId") Integer userId, Pageable pageable) {
        LOGGER.debug("Executing named query: AllFeeFormCountByMunicipality");
        Page<AllFeeFormCountByMunicipalityResponse> _result = queryService.executeAllFeeFormCountByMunicipality(allowPayment, paidStatus, municipalityId, userId, pageable);
        LOGGER.debug("got the result for named query: AllFeeFormCountByMunicipality, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query AllFeeFormCountByMunicipality")
    @RequestMapping(value = "/queries/AllFeeFormCountByMunicipality/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportAllFeeFormCountByMunicipality(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "allowPayment") Boolean allowPayment, @RequestParam(value = "paidStatus") String paidStatus, @RequestParam(value = "municipalityId") Integer municipalityId, @RequestParam(value = "userId") Integer userId, Pageable pageable) {
        LOGGER.debug("Exporting named query: AllFeeFormCountByMunicipality");

        return queryService.exportAllFeeFormCountByMunicipality(exportType, allowPayment, paidStatus, municipalityId, userId, pageable);
    }

    @RequestMapping(value = "/queries/userSubscriptionsCountForMunicipality", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "userSubscriptionsCountForMunicipality")
    public Page<UserSubscriptionsCountForMunicipalityResponse> executeUserSubscriptionsCountForMunicipality(@RequestParam(value = "municipalityId", required = false) Integer municipalityId, Pageable pageable) {
        LOGGER.debug("Executing named query: userSubscriptionsCountForMunicipality");
        Page<UserSubscriptionsCountForMunicipalityResponse> _result = queryService.executeUserSubscriptionsCountForMunicipality(municipalityId, pageable);
        LOGGER.debug("got the result for named query: userSubscriptionsCountForMunicipality, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query userSubscriptionsCountForMunicipality")
    @RequestMapping(value = "/queries/userSubscriptionsCountForMunicipality/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportUserSubscriptionsCountForMunicipality(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "municipalityId", required = false) Integer municipalityId, Pageable pageable) {
        LOGGER.debug("Exporting named query: userSubscriptionsCountForMunicipality");

        return queryService.exportUserSubscriptionsCountForMunicipality(exportType, municipalityId, pageable);
    }

    @RequestMapping(value = "/queries/UpdateFeesStatus", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "UpdateFeesStatus")
    public IntegerWrapper executeUpdateFeesStatus(@Valid @RequestBody UpdateFeesStatusRequest updateFeesStatusRequest) {
        LOGGER.debug("Executing named query: UpdateFeesStatus");
        Integer _result = queryService.executeUpdateFeesStatus(updateFeesStatusRequest);
        LOGGER.debug("got the result for named query: UpdateFeesStatus, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/AddUserToMunicipalityGroup", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "AddUserToMunicipalityGroup")
    public IntegerWrapper executeAddUserToMunicipalityGroup(@Valid @RequestBody AddUserToMunicipalityGroupRequest addUserToMunicipalityGroupRequest) {
        LOGGER.debug("Executing named query: AddUserToMunicipalityGroup");
        Integer _result = queryService.executeAddUserToMunicipalityGroup(addUserToMunicipalityGroupRequest);
        LOGGER.debug("got the result for named query: AddUserToMunicipalityGroup, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/AddGIStoProjects", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "AddGIStoProjects")
    public Integer executeAddGIStoProjects(@Valid @RequestBody AddGistoProjectsRequest addGistoProjectsRequest) {
        LOGGER.debug("Executing named query: AddGIStoProjects");
        Integer _result = queryService.executeAddGIStoProjects(addGistoProjectsRequest);
        LOGGER.debug("got the result for named query: AddGIStoProjects, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/CountOfUserForms", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "To get count for open or closed for user and SharedWith user")
    public Page<CountOfUserFormsResponse> executeCountOfUserForms(@RequestParam(value = "closed", required = false) Boolean closed, @RequestParam(value = "creatorUser", required = false) Integer creatorUser, @RequestParam(value = "sharedWithUser", required = false) Integer sharedWithUser, Pageable pageable) {
        LOGGER.debug("Executing named query: CountOfUserForms");
        Page<CountOfUserFormsResponse> _result = queryService.executeCountOfUserForms(closed, creatorUser, sharedWithUser, pageable);
        LOGGER.debug("got the result for named query: CountOfUserForms, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query CountOfUserForms")
    @RequestMapping(value = "/queries/CountOfUserForms/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCountOfUserForms(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "closed", required = false) Boolean closed, @RequestParam(value = "creatorUser", required = false) Integer creatorUser, @RequestParam(value = "sharedWithUser", required = false) Integer sharedWithUser, Pageable pageable) {
        LOGGER.debug("Exporting named query: CountOfUserForms");

        return queryService.exportCountOfUserForms(exportType, closed, creatorUser, sharedWithUser, pageable);
    }

    @RequestMapping(value = "/queries/CountOfFormsForMunicipality", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "CountOfFormsForMunicipality")
    public Page<CountOfFormsForMunicipalityResponse> executeCountOfFormsForMunicipality(@RequestParam(value = "MunicipalityId", required = false) Integer municipalityId, Pageable pageable) {
        LOGGER.debug("Executing named query: CountOfFormsForMunicipality");
        Page<CountOfFormsForMunicipalityResponse> _result = queryService.executeCountOfFormsForMunicipality(municipalityId, pageable);
        LOGGER.debug("got the result for named query: CountOfFormsForMunicipality, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query CountOfFormsForMunicipality")
    @RequestMapping(value = "/queries/CountOfFormsForMunicipality/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCountOfFormsForMunicipality(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "MunicipalityId", required = false) Integer municipalityId, Pageable pageable) {
        LOGGER.debug("Exporting named query: CountOfFormsForMunicipality");

        return queryService.exportCountOfFormsForMunicipality(exportType, municipalityId, pageable);
    }

    @RequestMapping(value = "/queries/DeleteDraft", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "DeleteDraft")
    public IntegerWrapper executeDeleteDraft(@RequestParam(value = "draftId") Long draftId) {
        LOGGER.debug("Executing named query: DeleteDraft");
        Integer _result = queryService.executeDeleteDraft(draftId);
        LOGGER.debug("got the result for named query: DeleteDraft, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/UpdateDevFormDetailsForCXAdmin", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "UpdateDevFormDetailsForCXAdmin")
    public Integer executeUpdateDevFormDetailsForCXAdmin(@Valid @RequestBody UpdateDevFormDetailsForCxadminRequest updateDevFormDetailsForCxadminRequest) {
        LOGGER.debug("Executing named query: UpdateDevFormDetailsForCXAdmin");
        Integer _result = queryService.executeUpdateDevFormDetailsForCXAdmin(updateDevFormDetailsForCxadminRequest);
        LOGGER.debug("got the result for named query: UpdateDevFormDetailsForCXAdmin, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/UpdateVendorForMasterForms", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "UpdateVendorForMasterForms")
    public Integer executeUpdateVendorForMasterForms(@Valid @RequestBody UpdateVendorForMasterFormsRequest updateVendorForMasterFormsRequest) {
        LOGGER.debug("Executing named query: UpdateVendorForMasterForms");
        Integer _result = queryService.executeUpdateVendorForMasterForms(updateVendorForMasterFormsRequest);
        LOGGER.debug("got the result for named query: UpdateVendorForMasterForms, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/EmployeesOrAdminsMunicipalities", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "EmployeesOrAdminsMunicipalities")
    public Page<EmployeesOrAdminsMunicipalitiesResponse> executeEmployeesOrAdminsMunicipalities(@RequestParam(value = "user", required = false) Integer user, @RequestParam(value = "role", required = false) String role, Pageable pageable) {
        LOGGER.debug("Executing named query: EmployeesOrAdminsMunicipalities");
        Page<EmployeesOrAdminsMunicipalitiesResponse> _result = queryService.executeEmployeesOrAdminsMunicipalities(user, role, pageable);
        LOGGER.debug("got the result for named query: EmployeesOrAdminsMunicipalities, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query EmployeesOrAdminsMunicipalities")
    @RequestMapping(value = "/queries/EmployeesOrAdminsMunicipalities/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportEmployeesOrAdminsMunicipalities(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "user", required = false) Integer user, @RequestParam(value = "role", required = false) String role, Pageable pageable) {
        LOGGER.debug("Exporting named query: EmployeesOrAdminsMunicipalities");

        return queryService.exportEmployeesOrAdminsMunicipalities(exportType, user, role, pageable);
    }

    @RequestMapping(value = "/queries/UpdateForceInspectionSequenceForForm", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "UpdateForceInspectionSequenceForForm")
    public IntegerWrapper executeUpdateForceInspectionSequenceForForm(@Valid @RequestBody UpdateForceInspectionSequenceForFormRequest updateForceInspectionSequenceForFormRequest) {
        LOGGER.debug("Executing named query: UpdateForceInspectionSequenceForForm");
        Integer _result = queryService.executeUpdateForceInspectionSequenceForForm(updateForceInspectionSequenceForFormRequest);
        LOGGER.debug("got the result for named query: UpdateForceInspectionSequenceForForm, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/CountOfVendors", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "CountOfVendors")
    public Page<CountOfVendorsResponse> executeCountOfVendors(@RequestParam(value = "vendor", required = false) Integer vendor, Pageable pageable) {
        LOGGER.debug("Executing named query: CountOfVendors");
        Page<CountOfVendorsResponse> _result = queryService.executeCountOfVendors(vendor, pageable);
        LOGGER.debug("got the result for named query: CountOfVendors, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query CountOfVendors")
    @RequestMapping(value = "/queries/CountOfVendors/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCountOfVendors(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "vendor", required = false) Integer vendor, Pageable pageable) {
        LOGGER.debug("Exporting named query: CountOfVendors");

        return queryService.exportCountOfVendors(exportType, vendor, pageable);
    }

    @RequestMapping(value = "/queries/UpdateMunicipalityInfo", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "UpdateMunicipalityInfo")
    public Integer executeUpdateMunicipalityInfo(@Valid @RequestBody UpdateMunicipalityInfoRequest updateMunicipalityInfoRequest) {
        LOGGER.debug("Executing named query: UpdateMunicipalityInfo");
        Integer _result = queryService.executeUpdateMunicipalityInfo(updateMunicipalityInfoRequest);
        LOGGER.debug("got the result for named query: UpdateMunicipalityInfo, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/CountOfUserFormsForMunicipality", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "To get count for open or closed by municipality for user and sharedWith user")
    public Page<CountOfUserFormsForMunicipalityResponse> executeCountOfUserFormsForMunicipality(@RequestParam(value = "MunicipalityId", required = false) Integer municipalityId, @RequestParam(value = "closed", required = false) Boolean closed, @RequestParam(value = "creatorUser", required = false) Integer creatorUser, @RequestParam(value = "sharedWithUser", required = false) Integer sharedWithUser, Pageable pageable) {
        LOGGER.debug("Executing named query: CountOfUserFormsForMunicipality");
        Page<CountOfUserFormsForMunicipalityResponse> _result = queryService.executeCountOfUserFormsForMunicipality(municipalityId, closed, creatorUser, sharedWithUser, pageable);
        LOGGER.debug("got the result for named query: CountOfUserFormsForMunicipality, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query CountOfUserFormsForMunicipality")
    @RequestMapping(value = "/queries/CountOfUserFormsForMunicipality/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCountOfUserFormsForMunicipality(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "MunicipalityId", required = false) Integer municipalityId, @RequestParam(value = "closed", required = false) Boolean closed, @RequestParam(value = "creatorUser", required = false) Integer creatorUser, @RequestParam(value = "sharedWithUser", required = false) Integer sharedWithUser, Pageable pageable) {
        LOGGER.debug("Exporting named query: CountOfUserFormsForMunicipality");

        return queryService.exportCountOfUserFormsForMunicipality(exportType, municipalityId, closed, creatorUser, sharedWithUser, pageable);
    }

    @RequestMapping(value = "/queries/deleteToken", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "to deleted token after changing password")
    public Integer executeDeleteToken(@RequestParam(value = "token", required = false) String token) {
        LOGGER.debug("Executing named query: deleteToken");
        Integer _result = queryService.executeDeleteToken(token);
        LOGGER.debug("got the result for named query: deleteToken, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/CountOfAllProjectsForUsersAndSharedWith", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "CountOfAllProjectsForUsersAndSharedWith")
    public Page<CountOfAllProjectsForUsersAndSharedWithResponse> executeCountOfAllProjectsForUsersAndSharedWith(@RequestParam(value = "Active", required = false) Boolean active, @RequestParam(value = "creatorUser", required = false) Integer creatorUser, @RequestParam(value = "sharedWithUser", required = false) Integer sharedWithUser, Pageable pageable) {
        LOGGER.debug("Executing named query: CountOfAllProjectsForUsersAndSharedWith");
        Page<CountOfAllProjectsForUsersAndSharedWithResponse> _result = queryService.executeCountOfAllProjectsForUsersAndSharedWith(active, creatorUser, sharedWithUser, pageable);
        LOGGER.debug("got the result for named query: CountOfAllProjectsForUsersAndSharedWith, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query CountOfAllProjectsForUsersAndSharedWith")
    @RequestMapping(value = "/queries/CountOfAllProjectsForUsersAndSharedWith/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCountOfAllProjectsForUsersAndSharedWith(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "Active", required = false) Boolean active, @RequestParam(value = "creatorUser", required = false) Integer creatorUser, @RequestParam(value = "sharedWithUser", required = false) Integer sharedWithUser, Pageable pageable) {
        LOGGER.debug("Exporting named query: CountOfAllProjectsForUsersAndSharedWith");

        return queryService.exportCountOfAllProjectsForUsersAndSharedWith(exportType, active, creatorUser, sharedWithUser, pageable);
    }

    @RequestMapping(value = "/queries/assignedInspectionsLessThanDate", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "assignedInspectionsLessThanDate")
    public Page<AssignedInspectionsLessThanDateResponse> executeAssignedInspectionsLessThanDate(@RequestParam(value = "municipality") Integer municipality, @RequestParam(value = "isClosed") Boolean isClosed, @RequestParam(value = "assignedTo") Integer assignedTo, @RequestParam(value = "requestedFor") LocalDateTime requestedFor, Pageable pageable) {
        LOGGER.debug("Executing named query: assignedInspectionsLessThanDate");
        Page<AssignedInspectionsLessThanDateResponse> _result = queryService.executeAssignedInspectionsLessThanDate(municipality, isClosed, assignedTo, requestedFor, pageable);
        LOGGER.debug("got the result for named query: assignedInspectionsLessThanDate, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query assignedInspectionsLessThanDate")
    @RequestMapping(value = "/queries/assignedInspectionsLessThanDate/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportAssignedInspectionsLessThanDate(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "municipality") Integer municipality, @RequestParam(value = "isClosed") Boolean isClosed, @RequestParam(value = "assignedTo") Integer assignedTo, @RequestParam(value = "requestedFor") LocalDateTime requestedFor, Pageable pageable) {
        LOGGER.debug("Exporting named query: assignedInspectionsLessThanDate");

        return queryService.exportAssignedInspectionsLessThanDate(exportType, municipality, isClosed, assignedTo, requestedFor, pageable);
    }

    @RequestMapping(value = "/queries/InsertTagForMessage", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "InsertTagForMessage")
    public Integer executeInsertTagForMessage(@Valid @RequestBody InsertTagForMessageRequest insertTagForMessageRequest) {
        LOGGER.debug("Executing named query: InsertTagForMessage");
        Integer _result = queryService.executeInsertTagForMessage(insertTagForMessageRequest);
        LOGGER.debug("got the result for named query: InsertTagForMessage, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/ManualFeeTypeCountForMunicipality", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "ManualFeeTypeCountForMunicipality")
    public Page<ManualFeeTypeCountForMunicipalityResponse> executeManualFeeTypeCountForMunicipality(@RequestParam(value = "MunicipalityId", required = false) Integer municipalityId, Pageable pageable) {
        LOGGER.debug("Executing named query: ManualFeeTypeCountForMunicipality");
        Page<ManualFeeTypeCountForMunicipalityResponse> _result = queryService.executeManualFeeTypeCountForMunicipality(municipalityId, pageable);
        LOGGER.debug("got the result for named query: ManualFeeTypeCountForMunicipality, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query ManualFeeTypeCountForMunicipality")
    @RequestMapping(value = "/queries/ManualFeeTypeCountForMunicipality/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportManualFeeTypeCountForMunicipality(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "MunicipalityId", required = false) Integer municipalityId, Pageable pageable) {
        LOGGER.debug("Exporting named query: ManualFeeTypeCountForMunicipality");

        return queryService.exportManualFeeTypeCountForMunicipality(exportType, municipalityId, pageable);
    }

    @RequestMapping(value = "/queries/assignedInspectionsBetweenDates", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "assignedInspectionsBetweenDates")
    public Page<AssignedInspectionsBetweenDatesResponse> executeAssignedInspectionsBetweenDates(@RequestParam(value = "municipality") Integer municipality, @RequestParam(value = "isClosed") Boolean isClosed, @RequestParam(value = "assignedTo") Integer assignedTo, @RequestParam(value = "startDate") LocalDateTime startDate, @RequestParam(value = "endDate") LocalDateTime endDate, Pageable pageable) {
        LOGGER.debug("Executing named query: assignedInspectionsBetweenDates");
        Page<AssignedInspectionsBetweenDatesResponse> _result = queryService.executeAssignedInspectionsBetweenDates(municipality, isClosed, assignedTo, startDate, endDate, pageable);
        LOGGER.debug("got the result for named query: assignedInspectionsBetweenDates, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query assignedInspectionsBetweenDates")
    @RequestMapping(value = "/queries/assignedInspectionsBetweenDates/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportAssignedInspectionsBetweenDates(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "municipality") Integer municipality, @RequestParam(value = "isClosed") Boolean isClosed, @RequestParam(value = "assignedTo") Integer assignedTo, @RequestParam(value = "startDate") LocalDateTime startDate, @RequestParam(value = "endDate") LocalDateTime endDate, Pageable pageable) {
        LOGGER.debug("Exporting named query: assignedInspectionsBetweenDates");

        return queryService.exportAssignedInspectionsBetweenDates(exportType, municipality, isClosed, assignedTo, startDate, endDate, pageable);
    }

    @RequestMapping(value = "/queries/InsertSubscription", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "InsertSubscription")
    public Integer executeInsertSubscription(@Valid @RequestBody InsertSubscriptionRequest insertSubscriptionRequest) {
        LOGGER.debug("Executing named query: InsertSubscription");
        Integer _result = queryService.executeInsertSubscription(insertSubscriptionRequest);
        LOGGER.debug("got the result for named query: InsertSubscription, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/GetProcessGroupMemebersByFormGUID", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "GetProcessGroupMemebersByFormGUID")
    public Page<GetProcessGroupMemebersByFormGuidResponse> executeGetProcessGroupMemebersByFormGUID(@RequestParam(value = "FormGUID", required = false) String formGuid, @RequestParam(value = "UserId", required = false) Integer userId, Pageable pageable) {
        LOGGER.debug("Executing named query: GetProcessGroupMemebersByFormGUID");
        Page<GetProcessGroupMemebersByFormGuidResponse> _result = queryService.executeGetProcessGroupMemebersByFormGUID(formGuid, userId, pageable);
        LOGGER.debug("got the result for named query: GetProcessGroupMemebersByFormGUID, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetProcessGroupMemebersByFormGUID")
    @RequestMapping(value = "/queries/GetProcessGroupMemebersByFormGUID/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetProcessGroupMemebersByFormGUID(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "FormGUID", required = false) String formGuid, @RequestParam(value = "UserId", required = false) Integer userId, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetProcessGroupMemebersByFormGUID");

        return queryService.exportGetProcessGroupMemebersByFormGUID(exportType, formGuid, userId, pageable);
    }

    @RequestMapping(value = "/queries/AdminVendorsList", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "AdminVendorsList")
    public Page<AdminVendorsListResponse> executeAdminVendorsList(@RequestParam(value = "user", required = false) Integer user, Pageable pageable) {
        LOGGER.debug("Executing named query: AdminVendorsList");
        Page<AdminVendorsListResponse> _result = queryService.executeAdminVendorsList(user, pageable);
        LOGGER.debug("got the result for named query: AdminVendorsList, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query AdminVendorsList")
    @RequestMapping(value = "/queries/AdminVendorsList/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportAdminVendorsList(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "user", required = false) Integer user, Pageable pageable) {
        LOGGER.debug("Exporting named query: AdminVendorsList");

        return queryService.exportAdminVendorsList(exportType, user, pageable);
    }

    @RequestMapping(value = "/queries/GetFormTypesByCategoriesAndMunicipalities", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "GetFormTypesByCategoriesAndMunicipalities")
    public Page<GetFormTypesByCategoriesAndMunicipalitiesResponse> executeGetFormTypesByCategoriesAndMunicipalities(@RequestParam(value = "formCategory", required = false) Integer formCategory, @RequestParam(value = "municipalityId", required = false) Integer municipalityId, @RequestParam(value = "userId") Integer userId, Pageable pageable) {
        LOGGER.debug("Executing named query: GetFormTypesByCategoriesAndMunicipalities");
        Page<GetFormTypesByCategoriesAndMunicipalitiesResponse> _result = queryService.executeGetFormTypesByCategoriesAndMunicipalities(formCategory, municipalityId, userId, pageable);
        LOGGER.debug("got the result for named query: GetFormTypesByCategoriesAndMunicipalities, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetFormTypesByCategoriesAndMunicipalities")
    @RequestMapping(value = "/queries/GetFormTypesByCategoriesAndMunicipalities/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetFormTypesByCategoriesAndMunicipalities(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "formCategory", required = false) Integer formCategory, @RequestParam(value = "municipalityId", required = false) Integer municipalityId, @RequestParam(value = "userId") Integer userId, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetFormTypesByCategoriesAndMunicipalities");

        return queryService.exportGetFormTypesByCategoriesAndMunicipalities(exportType, formCategory, municipalityId, userId, pageable);
    }

    @RequestMapping(value = "/queries/DeleteRoleForMuncipality", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "DeleteRoleForMuncipality")
    public Integer executeDeleteRoleForMuncipality(@RequestParam(value = "role", required = false) String role, @RequestParam(value = "municipality", required = false) Integer municipality, @RequestParam(value = "user", required = false) Integer user) {
        LOGGER.debug("Executing named query: DeleteRoleForMuncipality");
        Integer _result = queryService.executeDeleteRoleForMuncipality(role, municipality, user);
        LOGGER.debug("got the result for named query: DeleteRoleForMuncipality, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/GetMunicipalityEmployees", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "GetMunicipalityEmployees")
    public Page<Users> executeGetMunicipalityEmployees(@RequestParam(value = "RoleName") String roleName, @RequestParam(value = "municipalityId") Integer municipalityId, @RequestParam(value = "email") String email, Pageable pageable) {
        LOGGER.debug("Executing named query: GetMunicipalityEmployees");
        Page<Users> _result = queryService.executeGetMunicipalityEmployees(roleName, municipalityId, email, pageable);
        LOGGER.debug("got the result for named query: GetMunicipalityEmployees, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetMunicipalityEmployees")
    @RequestMapping(value = "/queries/GetMunicipalityEmployees/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetMunicipalityEmployees(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "RoleName") String roleName, @RequestParam(value = "municipalityId") Integer municipalityId, @RequestParam(value = "email") String email, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetMunicipalityEmployees");

        return queryService.exportGetMunicipalityEmployees(exportType, roleName, municipalityId, email, pageable);
    }

    @RequestMapping(value = "/queries/MapAsAdminForVendor", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "MapAsAdminForVendor")
    public Integer executeMapAsAdminForVendor(@Valid @RequestBody MapAsAdminForVendorRequest mapAsAdminForVendorRequest) {
        LOGGER.debug("Executing named query: MapAsAdminForVendor");
        Integer _result = queryService.executeMapAsAdminForVendor(mapAsAdminForVendorRequest);
        LOGGER.debug("got the result for named query: MapAsAdminForVendor, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/CountOfInspectionDesignByMunicipality", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "CountOfInspectionDesignByMunicipality")
    public Page<CountOfInspectionDesignByMunicipalityResponse> executeCountOfInspectionDesignByMunicipality(@RequestParam(value = "MunicipalityId") Integer municipalityId, Pageable pageable) {
        LOGGER.debug("Executing named query: CountOfInspectionDesignByMunicipality");
        Page<CountOfInspectionDesignByMunicipalityResponse> _result = queryService.executeCountOfInspectionDesignByMunicipality(municipalityId, pageable);
        LOGGER.debug("got the result for named query: CountOfInspectionDesignByMunicipality, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query CountOfInspectionDesignByMunicipality")
    @RequestMapping(value = "/queries/CountOfInspectionDesignByMunicipality/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCountOfInspectionDesignByMunicipality(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "MunicipalityId") Integer municipalityId, Pageable pageable) {
        LOGGER.debug("Exporting named query: CountOfInspectionDesignByMunicipality");

        return queryService.exportCountOfInspectionDesignByMunicipality(exportType, municipalityId, pageable);
    }

    @RequestMapping(value = "/queries/InsertFormsIntoProject", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "InsertFormsIntoProject")
    public Integer executeInsertFormsIntoProject(@Valid @RequestBody InsertFormsIntoProjectRequest insertFormsIntoProjectRequest) {
        LOGGER.debug("Executing named query: InsertFormsIntoProject");
        Integer _result = queryService.executeInsertFormsIntoProject(insertFormsIntoProjectRequest);
        LOGGER.debug("got the result for named query: InsertFormsIntoProject, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/RecordFormHistory", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "RecordFormHistory")
    public Integer executeRecordFormHistory(@Valid @RequestBody RecordFormHistoryRequest recordFormHistoryRequest) {
        LOGGER.debug("Executing named query: RecordFormHistory");
        Integer _result = queryService.executeRecordFormHistory(recordFormHistoryRequest);
        LOGGER.debug("got the result for named query: RecordFormHistory, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/GetWriteAccessGroupMembersByFormGUID", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "GetWriteAccessGroupMembersByFormGUID using formstatuses")
    public Page<GetWriteAccessGroupMembersByFormGuidResponse> executeGetWriteAccessGroupMembersByFormGUID(@RequestParam(value = "FormGUID", required = false) String formGuid, Pageable pageable) {
        LOGGER.debug("Executing named query: GetWriteAccessGroupMembersByFormGUID");
        Page<GetWriteAccessGroupMembersByFormGuidResponse> _result = queryService.executeGetWriteAccessGroupMembersByFormGUID(formGuid, pageable);
        LOGGER.debug("got the result for named query: GetWriteAccessGroupMembersByFormGUID, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetWriteAccessGroupMembersByFormGUID")
    @RequestMapping(value = "/queries/GetWriteAccessGroupMembersByFormGUID/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetWriteAccessGroupMembersByFormGUID(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "FormGUID", required = false) String formGuid, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetWriteAccessGroupMembersByFormGUID");

        return queryService.exportGetWriteAccessGroupMembersByFormGUID(exportType, formGuid, pageable);
    }

    @RequestMapping(value = "/queries/FormsByCategoryForDashBoard", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "FormsByCategoryForDashBoard")
    public Page<FormsByCategoryForDashBoardResponse> executeFormsByCategoryForDashBoard(@RequestParam(value = "municipality") Integer municipality, @RequestParam(value = "startDate") Timestamp startDate, @RequestParam(value = "endDate") Timestamp endDate, Pageable pageable) {
        LOGGER.debug("Executing named query: FormsByCategoryForDashBoard");
        Page<FormsByCategoryForDashBoardResponse> _result = queryService.executeFormsByCategoryForDashBoard(municipality, startDate, endDate, pageable);
        LOGGER.debug("got the result for named query: FormsByCategoryForDashBoard, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query FormsByCategoryForDashBoard")
    @RequestMapping(value = "/queries/FormsByCategoryForDashBoard/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportFormsByCategoryForDashBoard(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "municipality") Integer municipality, @RequestParam(value = "startDate") Timestamp startDate, @RequestParam(value = "endDate") Timestamp endDate, Pageable pageable) {
        LOGGER.debug("Exporting named query: FormsByCategoryForDashBoard");

        return queryService.exportFormsByCategoryForDashBoard(exportType, municipality, startDate, endDate, pageable);
    }

    @RequestMapping(value = "/queries/EmployeesMunicipalities", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "EmployeesMunicipalities")
    public Page<EmployeesMunicipalitiesResponse> executeEmployeesMunicipalities(@RequestParam(value = "user", required = false) Integer user, Pageable pageable) {
        LOGGER.debug("Executing named query: EmployeesMunicipalities");
        Page<EmployeesMunicipalitiesResponse> _result = queryService.executeEmployeesMunicipalities(user, pageable);
        LOGGER.debug("got the result for named query: EmployeesMunicipalities, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query EmployeesMunicipalities")
    @RequestMapping(value = "/queries/EmployeesMunicipalities/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportEmployeesMunicipalities(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "user", required = false) Integer user, Pageable pageable) {
        LOGGER.debug("Exporting named query: EmployeesMunicipalities");

        return queryService.exportEmployeesMunicipalities(exportType, user, pageable);
    }

    @RequestMapping(value = "/queries/RemoveVendorFromMasterForms", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "RemoveVendorFromMasterForms")
    public Integer executeRemoveVendorFromMasterForms(@Valid @RequestBody RemoveVendorFromMasterFormsRequest removeVendorFromMasterFormsRequest) {
        LOGGER.debug("Executing named query: RemoveVendorFromMasterForms");
        Integer _result = queryService.executeRemoveVendorFromMasterForms(removeVendorFromMasterFormsRequest);
        LOGGER.debug("got the result for named query: RemoveVendorFromMasterForms, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/UpdateFormStatusInMasterForms", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "UpdateFormStatusInMasterForms")
    public Integer executeUpdateFormStatusInMasterForms(@Valid @RequestBody UpdateFormStatusInMasterFormsRequest updateFormStatusInMasterFormsRequest) {
        LOGGER.debug("Executing named query: UpdateFormStatusInMasterForms");
        Integer _result = queryService.executeUpdateFormStatusInMasterForms(updateFormStatusInMasterFormsRequest);
        LOGGER.debug("got the result for named query: UpdateFormStatusInMasterForms, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/ProjectForms", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "ProjectForms")
    public Page<ProjectFormsResponse> executeProjectForms(@RequestParam(value = "project", required = false) String project, Pageable pageable) {
        LOGGER.debug("Executing named query: ProjectForms");
        Page<ProjectFormsResponse> _result = queryService.executeProjectForms(project, pageable);
        LOGGER.debug("got the result for named query: ProjectForms, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query ProjectForms")
    @RequestMapping(value = "/queries/ProjectForms/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportProjectForms(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "project", required = false) String project, Pageable pageable) {
        LOGGER.debug("Exporting named query: ProjectForms");

        return queryService.exportProjectForms(exportType, project, pageable);
    }

    @RequestMapping(value = "/queries/GetFeeIdsOfUserInCart", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "GetFeeIdsOfUserInCart")
    public Page<GetFeeIdsOfUserInCartResponse> executeGetFeeIdsOfUserInCart(@RequestParam(value = "user") Integer user, Pageable pageable) {
        LOGGER.debug("Executing named query: GetFeeIdsOfUserInCart");
        Page<GetFeeIdsOfUserInCartResponse> _result = queryService.executeGetFeeIdsOfUserInCart(user, pageable);
        LOGGER.debug("got the result for named query: GetFeeIdsOfUserInCart, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetFeeIdsOfUserInCart")
    @RequestMapping(value = "/queries/GetFeeIdsOfUserInCart/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetFeeIdsOfUserInCart(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "user") Integer user, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetFeeIdsOfUserInCart");

        return queryService.exportGetFeeIdsOfUserInCart(exportType, user, pageable);
    }

    @RequestMapping(value = "/queries/CountOfCasesForMunicipality", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "CountOfCasesForMunicipality")
    public Page<CountOfCasesForMunicipalityResponse> executeCountOfCasesForMunicipality(@RequestParam(value = "MunicipalityId", required = false) Integer municipalityId, Pageable pageable) {
        LOGGER.debug("Executing named query: CountOfCasesForMunicipality");
        Page<CountOfCasesForMunicipalityResponse> _result = queryService.executeCountOfCasesForMunicipality(municipalityId, pageable);
        LOGGER.debug("got the result for named query: CountOfCasesForMunicipality, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query CountOfCasesForMunicipality")
    @RequestMapping(value = "/queries/CountOfCasesForMunicipality/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCountOfCasesForMunicipality(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "MunicipalityId", required = false) Integer municipalityId, Pageable pageable) {
        LOGGER.debug("Exporting named query: CountOfCasesForMunicipality");

        return queryService.exportCountOfCasesForMunicipality(exportType, municipalityId, pageable);
    }

    @RequestMapping(value = "/queries/UpdatePrimaryVendorStatusInVEndor2Forms", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "UpdatePrimaryVendorStatusInVEndor2Forms")
    public Integer executeUpdatePrimaryVendorStatusInVEndor2Forms(@Valid @RequestBody UpdatePrimaryVendorStatusInVendor2formsRequest updatePrimaryVendorStatusInVendor2formsRequest) {
        LOGGER.debug("Executing named query: UpdatePrimaryVendorStatusInVEndor2Forms");
        Integer _result = queryService.executeUpdatePrimaryVendorStatusInVEndor2Forms(updatePrimaryVendorStatusInVendor2formsRequest);
        LOGGER.debug("got the result for named query: UpdatePrimaryVendorStatusInVEndor2Forms, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/MunicipalityProjects", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "MunicipalityProjects")
    public Page<MunicipalityProjectsResponse> executeMunicipalityProjects(@RequestParam(value = "Active", required = false) Boolean active, @RequestParam(value = "MunicipalityId", required = false) Integer municipalityId, Pageable pageable) {
        LOGGER.debug("Executing named query: MunicipalityProjects");
        Page<MunicipalityProjectsResponse> _result = queryService.executeMunicipalityProjects(active, municipalityId, pageable);
        LOGGER.debug("got the result for named query: MunicipalityProjects, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query MunicipalityProjects")
    @RequestMapping(value = "/queries/MunicipalityProjects/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportMunicipalityProjects(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "Active", required = false) Boolean active, @RequestParam(value = "MunicipalityId", required = false) Integer municipalityId, Pageable pageable) {
        LOGGER.debug("Exporting named query: MunicipalityProjects");

        return queryService.exportMunicipalityProjects(exportType, active, municipalityId, pageable);
    }

    @RequestMapping(value = "/queries/getMunicipalityGroupIdIDs", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get all the group Details based on userID")
    public Page<GetMunicipalityGroupIdIdsResponse> executeGetMunicipalityGroupIdIDs(@RequestParam(value = "userID", required = false) Integer userId, Pageable pageable) {
        LOGGER.debug("Executing named query: getMunicipalityGroupIdIDs");
        Page<GetMunicipalityGroupIdIdsResponse> _result = queryService.executeGetMunicipalityGroupIdIDs(userId, pageable);
        LOGGER.debug("got the result for named query: getMunicipalityGroupIdIDs, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query getMunicipalityGroupIdIDs")
    @RequestMapping(value = "/queries/getMunicipalityGroupIdIDs/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetMunicipalityGroupIdIDs(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "userID", required = false) Integer userId, Pageable pageable) {
        LOGGER.debug("Exporting named query: getMunicipalityGroupIdIDs");

        return queryService.exportGetMunicipalityGroupIdIDs(exportType, userId, pageable);
    }

    @RequestMapping(value = "/queries/UserSubscriptionsByMunicipality", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "UserSubscriptionsByMunicipality")
    public Page<UserSubscriptions> executeUserSubscriptionsByMunicipality(@RequestParam(value = "municipalityId") Integer municipalityId, Pageable pageable) {
        LOGGER.debug("Executing named query: UserSubscriptionsByMunicipality");
        Page<UserSubscriptions> _result = queryService.executeUserSubscriptionsByMunicipality(municipalityId, pageable);
        LOGGER.debug("got the result for named query: UserSubscriptionsByMunicipality, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query UserSubscriptionsByMunicipality")
    @RequestMapping(value = "/queries/UserSubscriptionsByMunicipality/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportUserSubscriptionsByMunicipality(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "municipalityId") Integer municipalityId, Pageable pageable) {
        LOGGER.debug("Exporting named query: UserSubscriptionsByMunicipality");

        return queryService.exportUserSubscriptionsByMunicipality(exportType, municipalityId, pageable);
    }

    @RequestMapping(value = "/queries/FormsForUsersAndShared", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Brings closed or opened  Forms of creator and shared with user")
    public Page<FormsForUsersAndSharedResponse> executeFormsForUsersAndShared(@RequestParam(value = "closed", required = false) Boolean closed, @RequestParam(value = "creatorUser", required = false) Integer creatorUser, @RequestParam(value = "sharedWithUser", required = false) Integer sharedWithUser, @RequestParam(value = "municipalityId", required = false) Long municipalityId, Pageable pageable) {
        LOGGER.debug("Executing named query: FormsForUsersAndShared");
        Page<FormsForUsersAndSharedResponse> _result = queryService.executeFormsForUsersAndShared(closed, creatorUser, sharedWithUser, municipalityId, pageable);
        LOGGER.debug("got the result for named query: FormsForUsersAndShared, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query FormsForUsersAndShared")
    @RequestMapping(value = "/queries/FormsForUsersAndShared/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportFormsForUsersAndShared(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "closed", required = false) Boolean closed, @RequestParam(value = "creatorUser", required = false) Integer creatorUser, @RequestParam(value = "sharedWithUser", required = false) Integer sharedWithUser, @RequestParam(value = "municipalityId", required = false) Long municipalityId, Pageable pageable) {
        LOGGER.debug("Exporting named query: FormsForUsersAndShared");

        return queryService.exportFormsForUsersAndShared(exportType, closed, creatorUser, sharedWithUser, municipalityId, pageable);
    }

    @RequestMapping(value = "/queries/getUserID", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get user id based on mail id")
    public Page<GetUserIdResponse> executeGetUserID(@RequestParam(value = "Email", required = false) String email, Pageable pageable) {
        LOGGER.debug("Executing named query: getUserID");
        Page<GetUserIdResponse> _result = queryService.executeGetUserID(email, pageable);
        LOGGER.debug("got the result for named query: getUserID, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query getUserID")
    @RequestMapping(value = "/queries/getUserID/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetUserID(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "Email", required = false) String email, Pageable pageable) {
        LOGGER.debug("Exporting named query: getUserID");

        return queryService.exportGetUserID(exportType, email, pageable);
    }

    @RequestMapping(value = "/queries/getListofUsers", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "to get List of user based on municipality ID and role Name")
    public Page<GetListofUsersResponse> executeGetListofUsers(@RequestParam(value = "municipalityID", required = false) Integer municipalityId, @RequestParam(value = "Email", required = false) String email, Pageable pageable) {
        LOGGER.debug("Executing named query: getListofUsers");
        Page<GetListofUsersResponse> _result = queryService.executeGetListofUsers(municipalityId, email, pageable);
        LOGGER.debug("got the result for named query: getListofUsers, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query getListofUsers")
    @RequestMapping(value = "/queries/getListofUsers/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetListofUsers(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "municipalityID", required = false) Integer municipalityId, @RequestParam(value = "Email", required = false) String email, Pageable pageable) {
        LOGGER.debug("Exporting named query: getListofUsers");

        return queryService.exportGetListofUsers(exportType, municipalityId, email, pageable);
    }

    @RequestMapping(value = "/queries/countOfGlobalCodeList", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "countOfGlobalCodeList")
    public Page<CountOfGlobalCodeListResponse> executeCountOfGlobalCodeList(Pageable pageable) {
        LOGGER.debug("Executing named query: countOfGlobalCodeList");
        Page<CountOfGlobalCodeListResponse> _result = queryService.executeCountOfGlobalCodeList(pageable);
        LOGGER.debug("got the result for named query: countOfGlobalCodeList, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query countOfGlobalCodeList")
    @RequestMapping(value = "/queries/countOfGlobalCodeList/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCountOfGlobalCodeList(@PathVariable("exportType") ExportType exportType, Pageable pageable) {
        LOGGER.debug("Exporting named query: countOfGlobalCodeList");

        return queryService.exportCountOfGlobalCodeList(exportType, pageable);
    }

    @RequestMapping(value = "/queries/InsertNewRole", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "InsertNewRole")
    public Integer executeInsertNewRole(@Valid @RequestBody InsertNewRoleRequest insertNewRoleRequest) {
        LOGGER.debug("Executing named query: InsertNewRole");
        Integer _result = queryService.executeInsertNewRole(insertNewRoleRequest);
        LOGGER.debug("got the result for named query: InsertNewRole, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/bannedDetails", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "user to display banner dertails based on user emailid")
    public Page<BannedDetailsResponse> executeBannedDetails(@RequestParam(value = "emailid", required = false) String emailid, Pageable pageable) {
        LOGGER.debug("Executing named query: bannedDetails");
        Page<BannedDetailsResponse> _result = queryService.executeBannedDetails(emailid, pageable);
        LOGGER.debug("got the result for named query: bannedDetails, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query bannedDetails")
    @RequestMapping(value = "/queries/bannedDetails/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportBannedDetails(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "emailid", required = false) String emailid, Pageable pageable) {
        LOGGER.debug("Exporting named query: bannedDetails");

        return queryService.exportBannedDetails(exportType, emailid, pageable);
    }

    @RequestMapping(value = "/queries/GetVendorApprovalListByMunicipality", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "GetVendorApprovalListByMunicipality")
    public Page<GetVendorApprovalListByMunicipalityResponse> executeGetVendorApprovalListByMunicipality(@RequestParam(value = "ApprovalStatus", required = false) String approvalStatus, @RequestParam(value = "MunicipalityId", required = false) Integer municipalityId, @RequestParam(value = "a", required = false) Boolean a, Pageable pageable) {
        LOGGER.debug("Executing named query: GetVendorApprovalListByMunicipality");
        Page<GetVendorApprovalListByMunicipalityResponse> _result = queryService.executeGetVendorApprovalListByMunicipality(approvalStatus, municipalityId, a, pageable);
        LOGGER.debug("got the result for named query: GetVendorApprovalListByMunicipality, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetVendorApprovalListByMunicipality")
    @RequestMapping(value = "/queries/GetVendorApprovalListByMunicipality/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetVendorApprovalListByMunicipality(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "ApprovalStatus", required = false) String approvalStatus, @RequestParam(value = "MunicipalityId", required = false) Integer municipalityId, @RequestParam(value = "a", required = false) Boolean a, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetVendorApprovalListByMunicipality");

        return queryService.exportGetVendorApprovalListByMunicipality(exportType, approvalStatus, municipalityId, a, pageable);
    }

    @RequestMapping(value = "/queries/deleteMunicipalityGroup", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "deleteMunicipalityGroup based on userID and MunicipalityGroupId")
    public Integer executeDeleteMunicipalityGroup(@RequestParam(value = "MunicipalityGroupId", required = false) Integer municipalityGroupId, @RequestParam(value = "UserId", required = false) Integer userId) {
        LOGGER.debug("Executing named query: deleteMunicipalityGroup");
        Integer _result = queryService.executeDeleteMunicipalityGroup(municipalityGroupId, userId);
        LOGGER.debug("got the result for named query: deleteMunicipalityGroup, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/verifyPasswordResetToken", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Given a token, Validates token based on expiration date. Null returned if no tokens match or expiration date is past.")
    public Page<VerifyPasswordResetTokenResponse> executeVerifyPasswordResetToken(@RequestParam(value = "token", required = false) String token, Pageable pageable) {
        LOGGER.debug("Executing named query: verifyPasswordResetToken");
        Page<VerifyPasswordResetTokenResponse> _result = queryService.executeVerifyPasswordResetToken(token, pageable);
        LOGGER.debug("got the result for named query: verifyPasswordResetToken, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query verifyPasswordResetToken")
    @RequestMapping(value = "/queries/verifyPasswordResetToken/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVerifyPasswordResetToken(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "token", required = false) String token, Pageable pageable) {
        LOGGER.debug("Exporting named query: verifyPasswordResetToken");

        return queryService.exportVerifyPasswordResetToken(exportType, token, pageable);
    }

    @RequestMapping(value = "/queries/getListofGroupName", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get all the list of group Names based on mun ID")
    public Page<GetListofGroupNameResponse> executeGetListofGroupName(@RequestParam(value = "MunicipalityGroupID", required = false) List<Integer> municipalityGroupId, @RequestParam(value = "MunicipalityID", required = false) Integer municipalityId, Pageable pageable) {
        LOGGER.debug("Executing named query: getListofGroupName");
        Page<GetListofGroupNameResponse> _result = queryService.executeGetListofGroupName(municipalityGroupId, municipalityId, pageable);
        LOGGER.debug("got the result for named query: getListofGroupName, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query getListofGroupName")
    @RequestMapping(value = "/queries/getListofGroupName/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetListofGroupName(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "MunicipalityGroupID", required = false) List<Integer> municipalityGroupId, @RequestParam(value = "MunicipalityID", required = false) Integer municipalityId, Pageable pageable) {
        LOGGER.debug("Exporting named query: getListofGroupName");

        return queryService.exportGetListofGroupName(exportType, municipalityGroupId, municipalityId, pageable);
    }

    @RequestMapping(value = "/queries/GetProjectGisrecords", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "GetProjectGisrecords")
    public Page<GetProjectGisrecordsResponse> executeGetProjectGisrecords(@RequestParam(value = "relatedProjectGuid", required = false) String relatedProjectGuid, Pageable pageable) {
        LOGGER.debug("Executing named query: GetProjectGisrecords");
        Page<GetProjectGisrecordsResponse> _result = queryService.executeGetProjectGisrecords(relatedProjectGuid, pageable);
        LOGGER.debug("got the result for named query: GetProjectGisrecords, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetProjectGisrecords")
    @RequestMapping(value = "/queries/GetProjectGisrecords/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetProjectGisrecords(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "relatedProjectGuid", required = false) String relatedProjectGuid, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetProjectGisrecords");

        return queryService.exportGetProjectGisrecords(exportType, relatedProjectGuid, pageable);
    }

    @RequestMapping(value = "/queries/SubDivisonCount", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "SubDivisonCount")
    public Page<SubDivisonCountResponse> executeSubDivisonCount(@RequestParam(value = "municipalityId", required = false) Integer municipalityId, Pageable pageable) {
        LOGGER.debug("Executing named query: SubDivisonCount");
        Page<SubDivisonCountResponse> _result = queryService.executeSubDivisonCount(municipalityId, pageable);
        LOGGER.debug("got the result for named query: SubDivisonCount, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query SubDivisonCount")
    @RequestMapping(value = "/queries/SubDivisonCount/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportSubDivisonCount(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "municipalityId", required = false) Integer municipalityId, Pageable pageable) {
        LOGGER.debug("Exporting named query: SubDivisonCount");

        return queryService.exportSubDivisonCount(exportType, municipalityId, pageable);
    }

    @RequestMapping(value = "/queries/DeleteAllMunicipalityRoles", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "DeleteAllMunicipalityRoles")
    public IntegerWrapper executeDeleteAllMunicipalityRoles(@RequestParam(value = "MunicipalityId") Integer municipalityId, @RequestParam(value = "UserId") Integer userId) {
        LOGGER.debug("Executing named query: DeleteAllMunicipalityRoles");
        Integer _result = queryService.executeDeleteAllMunicipalityRoles(municipalityId, userId);
        LOGGER.debug("got the result for named query: DeleteAllMunicipalityRoles, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/GetRolesForMunicipality", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "GetRolesForMunicipality")
    public Page<GetRolesForMunicipalityResponse> executeGetRolesForMunicipality(@RequestParam(value = "role", required = false) String role, @RequestParam(value = "municipality", required = false) Integer municipality, Pageable pageable) {
        LOGGER.debug("Executing named query: GetRolesForMunicipality");
        Page<GetRolesForMunicipalityResponse> _result = queryService.executeGetRolesForMunicipality(role, municipality, pageable);
        LOGGER.debug("got the result for named query: GetRolesForMunicipality, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetRolesForMunicipality")
    @RequestMapping(value = "/queries/GetRolesForMunicipality/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetRolesForMunicipality(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "role", required = false) String role, @RequestParam(value = "municipality", required = false) Integer municipality, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetRolesForMunicipality");

        return queryService.exportGetRolesForMunicipality(exportType, role, municipality, pageable);
    }

    @RequestMapping(value = "/queries/resetPasswordForUser", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Resets password for a user, given user ID as Integer and password as String.")
    public Integer executeResetPasswordForUser(@Valid @RequestBody ResetPasswordForUserRequest resetPasswordForUserRequest) {
        LOGGER.debug("Executing named query: resetPasswordForUser");
        Integer _result = queryService.executeResetPasswordForUser(resetPasswordForUserRequest);
        LOGGER.debug("got the result for named query: resetPasswordForUser, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/InsertGroups", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Insert Groups in to Municipalities")
    public Integer executeInsertGroups(@Valid @RequestBody InsertGroupsRequest insertGroupsRequest) {
        LOGGER.debug("Executing named query: InsertGroups");
        Integer _result = queryService.executeInsertGroups(insertGroupsRequest);
        LOGGER.debug("got the result for named query: InsertGroups, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/UpdateUserPreferences", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "UpdateUserPreferences")
    public Integer executeUpdateUserPreferences(@Valid @RequestBody UpdateUserPreferencesRequest updateUserPreferencesRequest) {
        LOGGER.debug("Executing named query: UpdateUserPreferences");
        Integer _result = queryService.executeUpdateUserPreferences(updateUserPreferencesRequest);
        LOGGER.debug("got the result for named query: UpdateUserPreferences, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/AddGIStoForms", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "AddGIStoForms")
    public Integer executeAddGIStoForms(@Valid @RequestBody AddGistoFormsRequest addGistoFormsRequest) {
        LOGGER.debug("Executing named query: AddGIStoForms");
        Integer _result = queryService.executeAddGIStoForms(addGistoFormsRequest);
        LOGGER.debug("got the result for named query: AddGIStoForms, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/AddMemeberToProject", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "AddMemeberToProject")
    public Integer executeAddMemeberToProject(@Valid @RequestBody AddMemeberToProjectRequest addMemeberToProjectRequest) {
        LOGGER.debug("Executing named query: AddMemeberToProject");
        Integer _result = queryService.executeAddMemeberToProject(addMemeberToProjectRequest);
        LOGGER.debug("got the result for named query: AddMemeberToProject, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/getOwnersForGisRecords", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Owners over multiple GIS Records")
    public Page<GetOwnersForGisRecordsResponse> executeGetOwnersForGisRecords(@RequestParam(value = "gisRecordIds", required = false) List<Integer> gisRecordIds, Pageable pageable) {
        LOGGER.debug("Executing named query: getOwnersForGisRecords");
        Page<GetOwnersForGisRecordsResponse> _result = queryService.executeGetOwnersForGisRecords(gisRecordIds, pageable);
        LOGGER.debug("got the result for named query: getOwnersForGisRecords, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query getOwnersForGisRecords")
    @RequestMapping(value = "/queries/getOwnersForGisRecords/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetOwnersForGisRecords(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "gisRecordIds", required = false) List<Integer> gisRecordIds, Pageable pageable) {
        LOGGER.debug("Exporting named query: getOwnersForGisRecords");

        return queryService.exportGetOwnersForGisRecords(exportType, gisRecordIds, pageable);
    }

    @RequestMapping(value = "/queries/InsertFormsToInspectionsMapping", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "InsertFormsToInspectionsMapping")
    public IntegerWrapper executeInsertFormsToInspectionsMapping(@Valid @RequestBody InsertFormsToInspectionsMappingRequest insertFormsToInspectionsMappingRequest) {
        LOGGER.debug("Executing named query: InsertFormsToInspectionsMapping");
        Integer _result = queryService.executeInsertFormsToInspectionsMapping(insertFormsToInspectionsMappingRequest);
        LOGGER.debug("got the result for named query: InsertFormsToInspectionsMapping, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/FetchRolesForUserWithMunicipality", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "FetchRolesForUserWithMunicipality")
    public Page<FetchRolesForUserWithMunicipalityResponse> executeFetchRolesForUserWithMunicipality(@RequestParam(value = "user", required = false) Integer user, @RequestParam(value = "municipality", required = false) Integer municipality, Pageable pageable) {
        LOGGER.debug("Executing named query: FetchRolesForUserWithMunicipality");
        Page<FetchRolesForUserWithMunicipalityResponse> _result = queryService.executeFetchRolesForUserWithMunicipality(user, municipality, pageable);
        LOGGER.debug("got the result for named query: FetchRolesForUserWithMunicipality, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query FetchRolesForUserWithMunicipality")
    @RequestMapping(value = "/queries/FetchRolesForUserWithMunicipality/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportFetchRolesForUserWithMunicipality(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "user", required = false) Integer user, @RequestParam(value = "municipality", required = false) Integer municipality, Pageable pageable) {
        LOGGER.debug("Exporting named query: FetchRolesForUserWithMunicipality");

        return queryService.exportFetchRolesForUserWithMunicipality(exportType, user, municipality, pageable);
    }

    @RequestMapping(value = "/queries/updateAssessFeeYN", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "updateAssessFeeYNAndForInspectionOutcome")
    public IntegerWrapper executeUpdateAssessFeeYN(@Valid @RequestBody UpdateAssessFeeYnRequest updateAssessFeeYnRequest) {
        LOGGER.debug("Executing named query: updateAssessFeeYN");
        Integer _result = queryService.executeUpdateAssessFeeYN(updateAssessFeeYnRequest);
        LOGGER.debug("got the result for named query: updateAssessFeeYN, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/VendorsByMunicipalityAndStatus", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "VendorsByMunicipalityAndStatus")
    public Page<Vendor> executeVendorsByMunicipalityAndStatus(@RequestParam(value = "municipalityId") Integer municipalityId, @RequestParam(value = "approvalStatus") String approvalStatus, @RequestParam(value = "active", required = false) Boolean active, @RequestParam(value = "companyName") String companyName, Pageable pageable) {
        LOGGER.debug("Executing named query: VendorsByMunicipalityAndStatus");
        Page<Vendor> _result = queryService.executeVendorsByMunicipalityAndStatus(municipalityId, approvalStatus, active, companyName, pageable);
        LOGGER.debug("got the result for named query: VendorsByMunicipalityAndStatus, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query VendorsByMunicipalityAndStatus")
    @RequestMapping(value = "/queries/VendorsByMunicipalityAndStatus/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVendorsByMunicipalityAndStatus(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "municipalityId") Integer municipalityId, @RequestParam(value = "approvalStatus") String approvalStatus, @RequestParam(value = "active", required = false) Boolean active, @RequestParam(value = "companyName") String companyName, Pageable pageable) {
        LOGGER.debug("Exporting named query: VendorsByMunicipalityAndStatus");

        return queryService.exportVendorsByMunicipalityAndStatus(exportType, municipalityId, approvalStatus, active, companyName, pageable);
    }

    @RequestMapping(value = "/queries/SetModifiedDateForProject", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "SetModifiedDateForProject")
    public Integer executeSetModifiedDateForProject(@Valid @RequestBody SetModifiedDateForProjectRequest setModifiedDateForProjectRequest) {
        LOGGER.debug("Executing named query: SetModifiedDateForProject");
        Integer _result = queryService.executeSetModifiedDateForProject(setModifiedDateForProjectRequest);
        LOGGER.debug("got the result for named query: SetModifiedDateForProject, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/CompanyFormsByVendorId", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "CompanyFormsByVendorId")
    public Page<CompanyFormsByVendorIdResponse> executeCompanyFormsByVendorId(@RequestParam(value = "closed", required = false) Boolean closed, @RequestParam(value = "vendorId", required = false) Integer vendorId, Pageable pageable) {
        LOGGER.debug("Executing named query: CompanyFormsByVendorId");
        Page<CompanyFormsByVendorIdResponse> _result = queryService.executeCompanyFormsByVendorId(closed, vendorId, pageable);
        LOGGER.debug("got the result for named query: CompanyFormsByVendorId, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query CompanyFormsByVendorId")
    @RequestMapping(value = "/queries/CompanyFormsByVendorId/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCompanyFormsByVendorId(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "closed", required = false) Boolean closed, @RequestParam(value = "vendorId", required = false) Integer vendorId, Pageable pageable) {
        LOGGER.debug("Exporting named query: CompanyFormsByVendorId");

        return queryService.exportCompanyFormsByVendorId(exportType, closed, vendorId, pageable);
    }

    @RequestMapping(value = "/queries/UpdateInfoFromMyProfile", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "UpdateInfoFromMyProfile")
    public Integer executeUpdateInfoFromMyProfile(@Valid @RequestBody UpdateInfoFromMyProfileRequest updateInfoFromMyProfileRequest) {
        LOGGER.debug("Executing named query: UpdateInfoFromMyProfile");
        Integer _result = queryService.executeUpdateInfoFromMyProfile(updateInfoFromMyProfileRequest);
        LOGGER.debug("got the result for named query: UpdateInfoFromMyProfile, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/resetPasswordWithTokenForUser", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "This saves a reset password token in the DB given a User ID and Token.")
    public Integer executeResetPasswordWithTokenForUser(@RequestParam(value = "userid", required = false) Integer userid, @RequestParam(value = "token", required = false) String token) {
        LOGGER.debug("Executing named query: resetPasswordWithTokenForUser");
        Integer _result = queryService.executeResetPasswordWithTokenForUser(userid, token);
        LOGGER.debug("got the result for named query: resetPasswordWithTokenForUser, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/VendorsLinkedWithForm", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "VendorsLinkedWithForm")
    public Page<VendorsLinkedWithFormResponse> executeVendorsLinkedWithForm(@RequestParam(value = "RelatedFormGUID", required = false) String relatedFormGuid, Pageable pageable) {
        LOGGER.debug("Executing named query: VendorsLinkedWithForm");
        Page<VendorsLinkedWithFormResponse> _result = queryService.executeVendorsLinkedWithForm(relatedFormGuid, pageable);
        LOGGER.debug("got the result for named query: VendorsLinkedWithForm, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query VendorsLinkedWithForm")
    @RequestMapping(value = "/queries/VendorsLinkedWithForm/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVendorsLinkedWithForm(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "RelatedFormGUID", required = false) String relatedFormGuid, Pageable pageable) {
        LOGGER.debug("Exporting named query: VendorsLinkedWithForm");

        return queryService.exportVendorsLinkedWithForm(exportType, relatedFormGuid, pageable);
    }

    @RequestMapping(value = "/queries/UpdateRoleForMunicipality", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "UpdateRoleForMunicipality")
    public Integer executeUpdateRoleForMunicipality(@Valid @RequestBody UpdateRoleForMunicipalityRequest updateRoleForMunicipalityRequest) {
        LOGGER.debug("Executing named query: UpdateRoleForMunicipality");
        Integer _result = queryService.executeUpdateRoleForMunicipality(updateRoleForMunicipalityRequest);
        LOGGER.debug("got the result for named query: UpdateRoleForMunicipality, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/GetFormsForMunicpality", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "GetFormsForMunicpality")
    public Page<GetFormsForMunicpalityResponse> executeGetFormsForMunicpality(@RequestParam(value = "MunicipalityId", required = false) Integer municipalityId, Pageable pageable) {
        LOGGER.debug("Executing named query: GetFormsForMunicpality");
        Page<GetFormsForMunicpalityResponse> _result = queryService.executeGetFormsForMunicpality(municipalityId, pageable);
        LOGGER.debug("got the result for named query: GetFormsForMunicpality, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetFormsForMunicpality")
    @RequestMapping(value = "/queries/GetFormsForMunicpality/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetFormsForMunicpality(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "MunicipalityId", required = false) Integer municipalityId, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetFormsForMunicpality");

        return queryService.exportGetFormsForMunicpality(exportType, municipalityId, pageable);
    }

    @RequestMapping(value = "/queries/UpdateProcessOwnersForGUID", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "UpdateProcessOwnersForGUID")
    public Integer executeUpdateProcessOwnersForGUID(@Valid @RequestBody UpdateProcessOwnersForGuidRequest updateProcessOwnersForGuidRequest) {
        LOGGER.debug("Executing named query: UpdateProcessOwnersForGUID");
        Integer _result = queryService.executeUpdateProcessOwnersForGUID(updateProcessOwnersForGuidRequest);
        LOGGER.debug("got the result for named query: UpdateProcessOwnersForGUID, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/SearchFormByVendor", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "SearchFormByVendor")
    public Page<MasterForms> executeSearchFormByVendor(@RequestParam(value = "startd", required = false) Timestamp startd, @RequestParam(value = "endd", required = false) Timestamp endd, @RequestParam(value = "FormTypeId", required = false) Integer formTypeId, @RequestParam(value = "municipalityId") Integer municipalityId, @RequestParam(value = "closed", required = false) Boolean closed, @RequestParam(value = "vendorId") Integer vendorId, Pageable pageable) {
        LOGGER.debug("Executing named query: SearchFormByVendor");
        Page<MasterForms> _result = queryService.executeSearchFormByVendor(startd, endd, formTypeId, municipalityId, closed, vendorId, pageable);
        LOGGER.debug("got the result for named query: SearchFormByVendor, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query SearchFormByVendor")
    @RequestMapping(value = "/queries/SearchFormByVendor/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportSearchFormByVendor(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "startd", required = false) Timestamp startd, @RequestParam(value = "endd", required = false) Timestamp endd, @RequestParam(value = "FormTypeId", required = false) Integer formTypeId, @RequestParam(value = "municipalityId") Integer municipalityId, @RequestParam(value = "closed", required = false) Boolean closed, @RequestParam(value = "vendorId") Integer vendorId, Pageable pageable) {
        LOGGER.debug("Exporting named query: SearchFormByVendor");

        return queryService.exportSearchFormByVendor(exportType, startd, endd, formTypeId, municipalityId, closed, vendorId, pageable);
    }

    @RequestMapping(value = "/queries/countOfMunicipalityCodeList", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "countOfMunicipalityCodeList")
    public Page<CountOfMunicipalityCodeListResponse> executeCountOfMunicipalityCodeList(@RequestParam(value = "MunicipalityId") Integer municipalityId, Pageable pageable) {
        LOGGER.debug("Executing named query: countOfMunicipalityCodeList");
        Page<CountOfMunicipalityCodeListResponse> _result = queryService.executeCountOfMunicipalityCodeList(municipalityId, pageable);
        LOGGER.debug("got the result for named query: countOfMunicipalityCodeList, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query countOfMunicipalityCodeList")
    @RequestMapping(value = "/queries/countOfMunicipalityCodeList/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCountOfMunicipalityCodeList(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "MunicipalityId") Integer municipalityId, Pageable pageable) {
        LOGGER.debug("Exporting named query: countOfMunicipalityCodeList");

        return queryService.exportCountOfMunicipalityCodeList(exportType, municipalityId, pageable);
    }

    @RequestMapping(value = "/queries/UpdateProjectDescription", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "UpdateProjectDescription")
    public Integer executeUpdateProjectDescription(@Valid @RequestBody UpdateProjectDescriptionRequest updateProjectDescriptionRequest) {
        LOGGER.debug("Executing named query: UpdateProjectDescription");
        Integer _result = queryService.executeUpdateProjectDescription(updateProjectDescriptionRequest);
        LOGGER.debug("got the result for named query: UpdateProjectDescription, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/AllFeesOfFormsForCreatedByAndSharedWith", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "AllFeesOfFormsForCreatedByAndSharedWith")
    public Page<AllFeesOfFormsForCreatedByAndSharedWithResponse> executeAllFeesOfFormsForCreatedByAndSharedWith(@RequestParam(value = "allowPayment") Boolean allowPayment, @RequestParam(value = "paidStatus") String paidStatus, @RequestParam(value = "userId") Integer userId, Pageable pageable) {
        LOGGER.debug("Executing named query: AllFeesOfFormsForCreatedByAndSharedWith");
        Page<AllFeesOfFormsForCreatedByAndSharedWithResponse> _result = queryService.executeAllFeesOfFormsForCreatedByAndSharedWith(allowPayment, paidStatus, userId, pageable);
        LOGGER.debug("got the result for named query: AllFeesOfFormsForCreatedByAndSharedWith, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query AllFeesOfFormsForCreatedByAndSharedWith")
    @RequestMapping(value = "/queries/AllFeesOfFormsForCreatedByAndSharedWith/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportAllFeesOfFormsForCreatedByAndSharedWith(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "allowPayment") Boolean allowPayment, @RequestParam(value = "paidStatus") String paidStatus, @RequestParam(value = "userId") Integer userId, Pageable pageable) {
        LOGGER.debug("Exporting named query: AllFeesOfFormsForCreatedByAndSharedWith");

        return queryService.exportAllFeesOfFormsForCreatedByAndSharedWith(exportType, allowPayment, paidStatus, userId, pageable);
    }

    @RequestMapping(value = "/queries/formsWithCodeEnforcementByMunicipality", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "formsWithCodeEnforcementByMunicipality")
    public Page<FormsWithCodeEnforcementByMunicipalityResponse> executeFormsWithCodeEnforcementByMunicipality(@RequestParam(value = "codeEnforcement") Boolean codeEnforcement, @RequestParam(value = "closed") Boolean closed, @RequestParam(value = "municipalityId") Integer municipalityId, Pageable pageable) {
        LOGGER.debug("Executing named query: formsWithCodeEnforcementByMunicipality");
        Page<FormsWithCodeEnforcementByMunicipalityResponse> _result = queryService.executeFormsWithCodeEnforcementByMunicipality(codeEnforcement, closed, municipalityId, pageable);
        LOGGER.debug("got the result for named query: formsWithCodeEnforcementByMunicipality, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query formsWithCodeEnforcementByMunicipality")
    @RequestMapping(value = "/queries/formsWithCodeEnforcementByMunicipality/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportFormsWithCodeEnforcementByMunicipality(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "codeEnforcement") Boolean codeEnforcement, @RequestParam(value = "closed") Boolean closed, @RequestParam(value = "municipalityId") Integer municipalityId, Pageable pageable) {
        LOGGER.debug("Exporting named query: formsWithCodeEnforcementByMunicipality");

        return queryService.exportFormsWithCodeEnforcementByMunicipality(exportType, codeEnforcement, closed, municipalityId, pageable);
    }

    @RequestMapping(value = "/queries/VendorsCountForMunicipalities", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "VendorsCountForMunicipalities")
    public Page<VendorsCountForMunicipalitiesResponse> executeVendorsCountForMunicipalities(@RequestParam(value = "MunicipalityId", required = false) Integer municipalityId, Pageable pageable) {
        LOGGER.debug("Executing named query: VendorsCountForMunicipalities");
        Page<VendorsCountForMunicipalitiesResponse> _result = queryService.executeVendorsCountForMunicipalities(municipalityId, pageable);
        LOGGER.debug("got the result for named query: VendorsCountForMunicipalities, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query VendorsCountForMunicipalities")
    @RequestMapping(value = "/queries/VendorsCountForMunicipalities/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVendorsCountForMunicipalities(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "MunicipalityId", required = false) Integer municipalityId, Pageable pageable) {
        LOGGER.debug("Exporting named query: VendorsCountForMunicipalities");

        return queryService.exportVendorsCountForMunicipalities(exportType, municipalityId, pageable);
    }

    @RequestMapping(value = "/queries/getRolesForUser", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get a simple list of a user's roles")
    public Page<GetRolesForUserResponse> executeGetRolesForUser(@RequestParam(value = "userId", required = false) Integer userId, Pageable pageable) {
        LOGGER.debug("Executing named query: getRolesForUser");
        Page<GetRolesForUserResponse> _result = queryService.executeGetRolesForUser(userId, pageable);
        LOGGER.debug("got the result for named query: getRolesForUser, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query getRolesForUser")
    @RequestMapping(value = "/queries/getRolesForUser/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetRolesForUser(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "userId", required = false) Integer userId, Pageable pageable) {
        LOGGER.debug("Exporting named query: getRolesForUser");

        return queryService.exportGetRolesForUser(exportType, userId, pageable);
    }

    @RequestMapping(value = "/queries/countAssignedInspectionsLessThanDate", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "countAssignedInspectionsLessThanDate")
    public Page<CountAssignedInspectionsLessThanDateResponse> executeCountAssignedInspectionsLessThanDate(@RequestParam(value = "municipality") Integer municipality, @RequestParam(value = "isClosed") Boolean isClosed, @RequestParam(value = "assignedTo") Integer assignedTo, @RequestParam(value = "requestedFor") LocalDateTime requestedFor, Pageable pageable) {
        LOGGER.debug("Executing named query: countAssignedInspectionsLessThanDate");
        Page<CountAssignedInspectionsLessThanDateResponse> _result = queryService.executeCountAssignedInspectionsLessThanDate(municipality, isClosed, assignedTo, requestedFor, pageable);
        LOGGER.debug("got the result for named query: countAssignedInspectionsLessThanDate, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query countAssignedInspectionsLessThanDate")
    @RequestMapping(value = "/queries/countAssignedInspectionsLessThanDate/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCountAssignedInspectionsLessThanDate(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "municipality") Integer municipality, @RequestParam(value = "isClosed") Boolean isClosed, @RequestParam(value = "assignedTo") Integer assignedTo, @RequestParam(value = "requestedFor") LocalDateTime requestedFor, Pageable pageable) {
        LOGGER.debug("Exporting named query: countAssignedInspectionsLessThanDate");

        return queryService.exportCountAssignedInspectionsLessThanDate(exportType, municipality, isClosed, assignedTo, requestedFor, pageable);
    }

    @RequestMapping(value = "/queries/DeleteFromVendorUsers", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "DeleteFromVendorUsers")
    public Integer executeDeleteFromVendorUsers(@RequestParam(value = "user", required = false) Integer user, @RequestParam(value = "vendor", required = false) Integer vendor) {
        LOGGER.debug("Executing named query: DeleteFromVendorUsers");
        Integer _result = queryService.executeDeleteFromVendorUsers(user, vendor);
        LOGGER.debug("got the result for named query: DeleteFromVendorUsers, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/CheckingUserWithInVendorUsers", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "CheckingUserWithInVendorUsers")
    public Page<CheckingUserWithInVendorUsersResponse> executeCheckingUserWithInVendorUsers(@RequestParam(value = "user", required = false) Integer user, @RequestParam(value = "vendor", required = false) Integer vendor, Pageable pageable) {
        LOGGER.debug("Executing named query: CheckingUserWithInVendorUsers");
        Page<CheckingUserWithInVendorUsersResponse> _result = queryService.executeCheckingUserWithInVendorUsers(user, vendor, pageable);
        LOGGER.debug("got the result for named query: CheckingUserWithInVendorUsers, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query CheckingUserWithInVendorUsers")
    @RequestMapping(value = "/queries/CheckingUserWithInVendorUsers/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCheckingUserWithInVendorUsers(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "user", required = false) Integer user, @RequestParam(value = "vendor", required = false) Integer vendor, Pageable pageable) {
        LOGGER.debug("Exporting named query: CheckingUserWithInVendorUsers");

        return queryService.exportCheckingUserWithInVendorUsers(exportType, user, vendor, pageable);
    }

    @RequestMapping(value = "/queries/UpdateVendorStatus", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "UpdateVendorStatus")
    public Integer executeUpdateVendorStatus(@Valid @RequestBody UpdateVendorStatusRequest updateVendorStatusRequest) {
        LOGGER.debug("Executing named query: UpdateVendorStatus");
        Integer _result = queryService.executeUpdateVendorStatus(updateVendorStatusRequest);
        LOGGER.debug("got the result for named query: UpdateVendorStatus, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/DeleteProjectForms", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "DeleteProjectForms")
    public IntegerWrapper executeDeleteProjectForms(@RequestParam(value = "projectForm") Integer projectForm) {
        LOGGER.debug("Executing named query: DeleteProjectForms");
        Integer _result = queryService.executeDeleteProjectForms(projectForm);
        LOGGER.debug("got the result for named query: DeleteProjectForms, result:{}", _result);
        return new IntegerWrapper(_result);
    }

    @RequestMapping(value = "/queries/InspectionDesignForCategoriesMappedToForms", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "InspectionDesignForCategoriesMappedToForms")
    public Page<InspectionDesign> executeInspectionDesignForCategoriesMappedToForms(@RequestParam(value = "formTypeId") Integer formTypeId, Pageable pageable) {
        LOGGER.debug("Executing named query: InspectionDesignForCategoriesMappedToForms");
        Page<InspectionDesign> _result = queryService.executeInspectionDesignForCategoriesMappedToForms(formTypeId, pageable);
        LOGGER.debug("got the result for named query: InspectionDesignForCategoriesMappedToForms, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query InspectionDesignForCategoriesMappedToForms")
    @RequestMapping(value = "/queries/InspectionDesignForCategoriesMappedToForms/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportInspectionDesignForCategoriesMappedToForms(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "formTypeId") Integer formTypeId, Pageable pageable) {
        LOGGER.debug("Exporting named query: InspectionDesignForCategoriesMappedToForms");

        return queryService.exportInspectionDesignForCategoriesMappedToForms(exportType, formTypeId, pageable);
    }

    @RequestMapping(value = "/queries/GetGis2formsByForm", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "GetGis2formsByForm")
    public Page<GetGis2formsByFormResponse> executeGetGis2formsByForm(@RequestParam(value = "relatedFormGuid", required = false) String relatedFormGuid, Pageable pageable) {
        LOGGER.debug("Executing named query: GetGis2formsByForm");
        Page<GetGis2formsByFormResponse> _result = queryService.executeGetGis2formsByForm(relatedFormGuid, pageable);
        LOGGER.debug("got the result for named query: GetGis2formsByForm, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query GetGis2formsByForm")
    @RequestMapping(value = "/queries/GetGis2formsByForm/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetGis2formsByForm(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "relatedFormGuid", required = false) String relatedFormGuid, Pageable pageable) {
        LOGGER.debug("Exporting named query: GetGis2formsByForm");

        return queryService.exportGetGis2formsByForm(exportType, relatedFormGuid, pageable);
    }

    @RequestMapping(value = "/queries/UnpaidFormFeeCount", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "UnpaidFormFeeCount")
    public Page<UnpaidFormFeeCountResponse> executeUnpaidFormFeeCount(@RequestParam(value = "allowPayment") Boolean allowPayment, @RequestParam(value = "paidStatus") String paidStatus, @RequestParam(value = "userId") Integer userId, Pageable pageable) {
        LOGGER.debug("Executing named query: UnpaidFormFeeCount");
        Page<UnpaidFormFeeCountResponse> _result = queryService.executeUnpaidFormFeeCount(allowPayment, paidStatus, userId, pageable);
        LOGGER.debug("got the result for named query: UnpaidFormFeeCount, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query UnpaidFormFeeCount")
    @RequestMapping(value = "/queries/UnpaidFormFeeCount/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportUnpaidFormFeeCount(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "allowPayment") Boolean allowPayment, @RequestParam(value = "paidStatus") String paidStatus, @RequestParam(value = "userId") Integer userId, Pageable pageable) {
        LOGGER.debug("Exporting named query: UnpaidFormFeeCount");

        return queryService.exportUnpaidFormFeeCount(exportType, allowPayment, paidStatus, userId, pageable);
    }

    @RequestMapping(value = "/queries/getInspectionsToBeScheduledByMunicipality", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "getInspectionsToBeScheduledByMunicipality")
    public Page<GetInspectionsToBeScheduledByMunicipalityResponse> executeGetInspectionsToBeScheduledByMunicipality(@RequestParam(value = "municipality") Integer municipality, @RequestParam(value = "outcome") String outcome, Pageable pageable) {
        LOGGER.debug("Executing named query: getInspectionsToBeScheduledByMunicipality");
        Page<GetInspectionsToBeScheduledByMunicipalityResponse> _result = queryService.executeGetInspectionsToBeScheduledByMunicipality(municipality, outcome, pageable);
        LOGGER.debug("got the result for named query: getInspectionsToBeScheduledByMunicipality, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query getInspectionsToBeScheduledByMunicipality")
    @RequestMapping(value = "/queries/getInspectionsToBeScheduledByMunicipality/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetInspectionsToBeScheduledByMunicipality(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "municipality") Integer municipality, @RequestParam(value = "outcome") String outcome, Pageable pageable) {
        LOGGER.debug("Exporting named query: getInspectionsToBeScheduledByMunicipality");

        return queryService.exportGetInspectionsToBeScheduledByMunicipality(exportType, municipality, outcome, pageable);
    }

    @RequestMapping(value = "/queries/FormsTypesForDashboard", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "FormsTypesForDashboard")
    public Page<FormsTypesForDashboardResponse> executeFormsTypesForDashboard(@RequestParam(value = "municipality") Integer municipality, @RequestParam(value = "startDate") Timestamp startDate, @RequestParam(value = "endDate") Timestamp endDate, Pageable pageable) {
        LOGGER.debug("Executing named query: FormsTypesForDashboard");
        Page<FormsTypesForDashboardResponse> _result = queryService.executeFormsTypesForDashboard(municipality, startDate, endDate, pageable);
        LOGGER.debug("got the result for named query: FormsTypesForDashboard, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query FormsTypesForDashboard")
    @RequestMapping(value = "/queries/FormsTypesForDashboard/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportFormsTypesForDashboard(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "municipality") Integer municipality, @RequestParam(value = "startDate") Timestamp startDate, @RequestParam(value = "endDate") Timestamp endDate, Pageable pageable) {
        LOGGER.debug("Exporting named query: FormsTypesForDashboard");

        return queryService.exportFormsTypesForDashboard(exportType, municipality, startDate, endDate, pageable);
    }

    @RequestMapping(value = "/queries/DeleteExistingSubscriptionsForUser", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "DeleteExistingSubscriptionsForUser")
    public Integer executeDeleteExistingSubscriptionsForUser(@RequestParam(value = "user", required = false) Integer user) {
        LOGGER.debug("Executing named query: DeleteExistingSubscriptionsForUser");
        Integer _result = queryService.executeDeleteExistingSubscriptionsForUser(user);
        LOGGER.debug("got the result for named query: DeleteExistingSubscriptionsForUser, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/MunicipalityCount", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "MunicipalityCount")
    public Page<MunicipalityCountResponse> executeMunicipalityCount(Pageable pageable) {
        LOGGER.debug("Executing named query: MunicipalityCount");
        Page<MunicipalityCountResponse> _result = queryService.executeMunicipalityCount(pageable);
        LOGGER.debug("got the result for named query: MunicipalityCount, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query MunicipalityCount")
    @RequestMapping(value = "/queries/MunicipalityCount/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportMunicipalityCount(@PathVariable("exportType") ExportType exportType, Pageable pageable) {
        LOGGER.debug("Exporting named query: MunicipalityCount");

        return queryService.exportMunicipalityCount(exportType, pageable);
    }

    @RequestMapping(value = "/queries/userSubscriptionsCount", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "userSubscriptionsCount")
    public Page<UserSubscriptionsCountResponse> executeUserSubscriptionsCount(Pageable pageable) {
        LOGGER.debug("Executing named query: userSubscriptionsCount");
        Page<UserSubscriptionsCountResponse> _result = queryService.executeUserSubscriptionsCount(pageable);
        LOGGER.debug("got the result for named query: userSubscriptionsCount, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query userSubscriptionsCount")
    @RequestMapping(value = "/queries/userSubscriptionsCount/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportUserSubscriptionsCount(@PathVariable("exportType") ExportType exportType, Pageable pageable) {
        LOGGER.debug("Exporting named query: userSubscriptionsCount");

        return queryService.exportUserSubscriptionsCount(exportType, pageable);
    }

    @RequestMapping(value = "/queries/InsertFormMessage", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "InsertFormMessage")
    public Integer executeInsertFormMessage(@Valid @RequestBody InsertFormMessageRequest insertFormMessageRequest) {
        LOGGER.debug("Executing named query: InsertFormMessage");
        Integer _result = queryService.executeInsertFormMessage(insertFormMessageRequest);
        LOGGER.debug("got the result for named query: InsertFormMessage, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/ProjectsForUsersAndSharedWith", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "ProjectsForUsersAndSharedWith")
    public Page<Projects> executeProjectsForUsersAndSharedWith(@RequestParam(value = "Active", required = false) Boolean active, @RequestParam(value = "creatorUser", required = false) Integer creatorUser, @RequestParam(value = "sharedWithUser", required = false) Integer sharedWithUser, @RequestParam(value = "municipalityId", required = false) Long municipalityId, Pageable pageable) {
        LOGGER.debug("Executing named query: ProjectsForUsersAndSharedWith");
        Page<Projects> _result = queryService.executeProjectsForUsersAndSharedWith(active, creatorUser, sharedWithUser, municipalityId, pageable);
        LOGGER.debug("got the result for named query: ProjectsForUsersAndSharedWith, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query ProjectsForUsersAndSharedWith")
    @RequestMapping(value = "/queries/ProjectsForUsersAndSharedWith/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportProjectsForUsersAndSharedWith(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "Active", required = false) Boolean active, @RequestParam(value = "creatorUser", required = false) Integer creatorUser, @RequestParam(value = "sharedWithUser", required = false) Integer sharedWithUser, @RequestParam(value = "municipalityId", required = false) Long municipalityId, Pageable pageable) {
        LOGGER.debug("Exporting named query: ProjectsForUsersAndSharedWith");

        return queryService.exportProjectsForUsersAndSharedWith(exportType, active, creatorUser, sharedWithUser, municipalityId, pageable);
    }

    @RequestMapping(value = "/queries/UpdateNewPassword", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "UpdateNewPassword")
    public Integer executeUpdateNewPassword(@Valid @RequestBody UpdateNewPasswordRequest updateNewPasswordRequest) {
        LOGGER.debug("Executing named query: UpdateNewPassword");
        Integer _result = queryService.executeUpdateNewPassword(updateNewPasswordRequest);
        LOGGER.debug("got the result for named query: UpdateNewPassword, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/queries/FormsTaggedWithGISRecords", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "FormsTaggedWithGISRecords")
    public Page<FormsTaggedWithGisrecordsResponse> executeFormsTaggedWithGISRecords(@RequestParam(value = "gisrecordId", required = false) Integer gisrecordId, Pageable pageable) {
        LOGGER.debug("Executing named query: FormsTaggedWithGISRecords");
        Page<FormsTaggedWithGisrecordsResponse> _result = queryService.executeFormsTaggedWithGISRecords(gisrecordId, pageable);
        LOGGER.debug("got the result for named query: FormsTaggedWithGISRecords, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query FormsTaggedWithGISRecords")
    @RequestMapping(value = "/queries/FormsTaggedWithGISRecords/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportFormsTaggedWithGISRecords(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "gisrecordId", required = false) Integer gisrecordId, Pageable pageable) {
        LOGGER.debug("Exporting named query: FormsTaggedWithGISRecords");

        return queryService.exportFormsTaggedWithGISRecords(exportType, gisrecordId, pageable);
    }

    @RequestMapping(value = "/queries/CountOfVendorUsers", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "CountOfVendorUsers")
    public Page<CountOfVendorUsersResponse> executeCountOfVendorUsers(@RequestParam(value = "vendor", required = false) Integer vendor, Pageable pageable) {
        LOGGER.debug("Executing named query: CountOfVendorUsers");
        Page<CountOfVendorUsersResponse> _result = queryService.executeCountOfVendorUsers(vendor, pageable);
        LOGGER.debug("got the result for named query: CountOfVendorUsers, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query CountOfVendorUsers")
    @RequestMapping(value = "/queries/CountOfVendorUsers/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCountOfVendorUsers(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "vendor", required = false) Integer vendor, Pageable pageable) {
        LOGGER.debug("Exporting named query: CountOfVendorUsers");

        return queryService.exportCountOfVendorUsers(exportType, vendor, pageable);
    }

    @RequestMapping(value = "/queries/getInspectionDesignByInspectionCategoriesAssignedToFormType", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "getInspectionDesignByInspectionCategoriesAssignedToFormType")
    public Page<GetInspectionDesignByInspectionCategoriesAssignedToFormTypeResponse> executeGetInspectionDesignByInspectionCategoriesAssignedToFormType(@RequestParam(value = "formType") Integer formType, Pageable pageable) {
        LOGGER.debug("Executing named query: getInspectionDesignByInspectionCategoriesAssignedToFormType");
        Page<GetInspectionDesignByInspectionCategoriesAssignedToFormTypeResponse> _result = queryService.executeGetInspectionDesignByInspectionCategoriesAssignedToFormType(formType, pageable);
        LOGGER.debug("got the result for named query: getInspectionDesignByInspectionCategoriesAssignedToFormType, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file for query getInspectionDesignByInspectionCategoriesAssignedToFormType")
    @RequestMapping(value = "/queries/getInspectionDesignByInspectionCategoriesAssignedToFormType/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGetInspectionDesignByInspectionCategoriesAssignedToFormType(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "formType") Integer formType, Pageable pageable) {
        LOGGER.debug("Exporting named query: getInspectionDesignByInspectionCategoriesAssignedToFormType");

        return queryService.exportGetInspectionDesignByInspectionCategoriesAssignedToFormType(exportType, formType, pageable);
    }

    @RequestMapping(value = "/queries/InsertProjectMessage", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "InsertProjectMessage")
    public Integer executeInsertProjectMessage(@Valid @RequestBody InsertProjectMessageRequest insertProjectMessageRequest) {
        LOGGER.debug("Executing named query: InsertProjectMessage");
        Integer _result = queryService.executeInsertProjectMessage(insertProjectMessageRequest);
        LOGGER.debug("got the result for named query: InsertProjectMessage, result:{}", _result);
        return _result;
    }

}


