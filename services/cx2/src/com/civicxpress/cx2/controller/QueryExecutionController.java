/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.beans.factory.annotation.Qualifier;
import com.civicxpress.cx2.service.Cx2QueryExecutorService;
import com.wavemaker.runtime.data.model.CustomQuery;
import com.wavemaker.runtime.data.exception.QueryParameterMismatchException;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

@RestController(value = "Cx2.QueryExecutionController")
@Api(value = "QueryExecutionController", description = "Controller class for query execution")
@RequestMapping("/cx2/queryExecutor")
public class QueryExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(QueryExecutionController.class);

    @Autowired
    private Cx2QueryExecutorService queryService;

    @ApiOperation(value = "Process request to execute queries")
    @RequestMapping(value = "/queries/AdminsMunicipalities", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Object> executeAdminsMunicipalities(@RequestParam(value = "user", required = false) java.lang.Integer user, Pageable pageable) throws QueryParameterMismatchException {
        LOGGER.debug("Executing named query AdminsMunicipalities");
        Page<Object> result = queryService.executeAdminsMunicipalities(pageable, user);
        LOGGER.debug("got the result of named query {}", result);
        return result;
    }

    @ApiOperation(value = "Process request to execute queries")
    @RequestMapping(value = "/queries/EmployeesMunicipalities", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Object> executeEmployeesMunicipalities(@RequestParam(value = "user", required = false) java.lang.Integer user, Pageable pageable) throws QueryParameterMismatchException {
        LOGGER.debug("Executing named query EmployeesMunicipalities");
        Page<Object> result = queryService.executeEmployeesMunicipalities(pageable, user);
        LOGGER.debug("got the result of named query {}", result);
        return result;
    }

    @ApiOperation(value = "Process request to execute queries")
    @RequestMapping(value = "/queries/MunicipalityCount", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Object> executeMunicipalityCount(Pageable pageable) {
        LOGGER.debug("Executing named query MunicipalityCount");
        Page<Object> result = queryService.executeMunicipalityCount(pageable);
        LOGGER.debug("got the result of named query {}", result);
        return result;
    }

    @ApiOperation(value = "Process request to execute queries")
    @RequestMapping(value = "/queries/resetPasswordForUser", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_FORM_URLENCODED_VALUE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public int executeResetPasswordForUser(@RequestParam(value = "newPassword", required = false) java.lang.String newPassword, @RequestParam(value = "userID", required = false) java.lang.Integer userID) throws QueryParameterMismatchException {
        LOGGER.debug("Executing named query resetPasswordForUser");
        int result = queryService.executeResetPasswordForUser(newPassword, userID);
        LOGGER.debug("got the result of named query {}", result);
        return result;
    }

    @ApiOperation(value = "Process request to execute queries")
    @RequestMapping(value = "/queries/resetPasswordWithTokenForUser", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public int executeResetPasswordWithTokenForUser(@RequestParam(value = "userid", required = false) java.lang.Integer userid, @RequestParam(value = "token", required = false) java.lang.String token) throws QueryParameterMismatchException {
        LOGGER.debug("Executing named query resetPasswordWithTokenForUser");
        int result = queryService.executeResetPasswordWithTokenForUser(userid, token);
        LOGGER.debug("got the result of named query {}", result);
        return result;
    }

    @ApiOperation(value = "Process request to execute queries")
    @RequestMapping(value = "/queries/StandardUserMunicipalites", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Object> executeStandardUserMunicipalites(@RequestParam(value = "USER", required = false) java.lang.Integer USER, Pageable pageable) throws QueryParameterMismatchException {
        LOGGER.debug("Executing named query StandardUserMunicipalites");
        Page<Object> result = queryService.executeStandardUserMunicipalites(pageable, USER);
        LOGGER.debug("got the result of named query {}", result);
        return result;
    }

    @ApiOperation(value = "Process request to execute queries")
    @RequestMapping(value = "/queries/SubDivisonCount", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Object> executeSubDivisonCount(@RequestParam(value = "municipalityId", required = false) java.lang.Integer municipalityId, Pageable pageable) throws QueryParameterMismatchException {
        LOGGER.debug("Executing named query SubDivisonCount");
        Page<Object> result = queryService.executeSubDivisonCount(pageable, municipalityId);
        LOGGER.debug("got the result of named query {}", result);
        return result;
    }

    @ApiOperation(value = "Process request to execute queries")
    @RequestMapping(value = "/queries/UpdateCFInProfile", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_FORM_URLENCODED_VALUE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public int executeUpdateCFInProfile(@RequestParam(value = "cf", required = false) java.lang.String cf, @RequestParam(value = "user", required = false) java.lang.Integer user) throws QueryParameterMismatchException {
        LOGGER.debug("Executing named query UpdateCFInProfile");
        int result = queryService.executeUpdateCFInProfile(cf, user);
        LOGGER.debug("got the result of named query {}", result);
        return result;
    }

    @ApiOperation(value = "Process request to execute queries")
    @RequestMapping(value = "/queries/UpdateInfoFromMyProfile", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_FORM_URLENCODED_VALUE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public int executeUpdateInfoFromMyProfile(@RequestParam(value = "fn", required = false) java.lang.String fn, @RequestParam(value = "ln", required = false) java.lang.String ln, @RequestParam(value = "em", required = false) java.lang.String em, @RequestParam(value = "ph", required = false) java.lang.String ph, @RequestParam(value = "ad1", required = false) java.lang.String ad1, @RequestParam(value = "ad2", required = false) java.lang.String ad2, @RequestParam(value = "st", required = false) java.lang.String st, @RequestParam(value = "ct", required = false) java.lang.String ct, @RequestParam(value = "pc", required = false) java.lang.String pc, @RequestParam(value = "user", required = false) java.lang.Integer user) throws QueryParameterMismatchException {
        LOGGER.debug("Executing named query UpdateInfoFromMyProfile");
        int result = queryService.executeUpdateInfoFromMyProfile(fn, ln, em, ph, ad1, ad2, st, ct, pc, user);
        LOGGER.debug("got the result of named query {}", result);
        return result;
    }

    @ApiOperation(value = "Process request to execute queries")
    @RequestMapping(value = "/queries/UpdateNewPassword", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_FORM_URLENCODED_VALUE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public int executeUpdateNewPassword(@RequestParam(value = "password", required = false) java.lang.String password, @RequestParam(value = "newUser", required = false) java.lang.Integer newUser) throws QueryParameterMismatchException {
        LOGGER.debug("Executing named query UpdateNewPassword");
        int result = queryService.executeUpdateNewPassword(password, newUser);
        LOGGER.debug("got the result of named query {}", result);
        return result;
    }

    @ApiOperation(value = "Process request to execute queries")
    @RequestMapping(value = "/queries/UpdatePasswordAndCF", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_FORM_URLENCODED_VALUE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public int executeUpdatePasswordAndCF(@RequestParam(value = "password", required = false) java.lang.String password, @RequestParam(value = "cf", required = false) java.lang.String cf, @RequestParam(value = "newUser", required = false) java.lang.Integer newUser) throws QueryParameterMismatchException {
        LOGGER.debug("Executing named query UpdatePasswordAndCF");
        int result = queryService.executeUpdatePasswordAndCF(password, cf, newUser);
        LOGGER.debug("got the result of named query {}", result);
        return result;
    }

    @ApiOperation(value = "Process request to execute queries")
    @RequestMapping(value = "/queries/UserCount", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Object> executeUserCount(Pageable pageable) {
        LOGGER.debug("Executing named query UserCount");
        Page<Object> result = queryService.executeUserCount(pageable);
        LOGGER.debug("got the result of named query {}", result);
        return result;
    }

    @ApiOperation(value = "Process request to execute queries")
    @RequestMapping(value = "/queries/userSubscriptionsCount", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Object> executeUserSubscriptionsCount(Pageable pageable) {
        LOGGER.debug("Executing named query userSubscriptionsCount");
        Page<Object> result = queryService.executeUserSubscriptionsCount(pageable);
        LOGGER.debug("got the result of named query {}", result);
        return result;
    }

    @ApiOperation(value = "Process request to execute queries")
    @RequestMapping(value = "/queries/userSubscriptionsCountForMunicipality", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Object> executeUserSubscriptionsCountForMunicipality(@RequestParam(value = "municipalityId", required = false) java.lang.Integer municipalityId, Pageable pageable) throws QueryParameterMismatchException {
        LOGGER.debug("Executing named query userSubscriptionsCountForMunicipality");
        Page<Object> result = queryService.executeUserSubscriptionsCountForMunicipality(pageable, municipalityId);
        LOGGER.debug("got the result of named query {}", result);
        return result;
    }

    @ApiOperation(value = "Process request to execute queries")
    @RequestMapping(value = "/queries/verifyPasswordResetToken", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Object> executeVerifyPasswordResetToken(@RequestParam(value = "token", required = false) java.lang.String token, Pageable pageable) throws QueryParameterMismatchException {
        LOGGER.debug("Executing named query verifyPasswordResetToken");
        Page<Object> result = queryService.executeVerifyPasswordResetToken(pageable, token);
        LOGGER.debug("got the result of named query {}", result);
        return result;
    }

    @ApiOperation(value = "Process request to execute customer queries")
    @RequestMapping(value = "/queries/wm_custom", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Object> executeWMCustomQuery(@RequestBody CustomQuery query, Pageable pageable) {
        Page<Object> result = queryService.executeWMCustomQuerySelect(query, pageable);
        LOGGER.debug("got the result {}" + result);
        return result;
    }

    @ApiOperation(value = "Process request to execute customer queries")
    @RequestMapping(value = "/queries/wm_custom_update", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public int executeWMCustomQuery(@RequestBody CustomQuery query) {
        int result = queryService.executeWMCustomQueryUpdate(query);
        LOGGER.debug("got the result {}" + result);
        return result;
    }
}
