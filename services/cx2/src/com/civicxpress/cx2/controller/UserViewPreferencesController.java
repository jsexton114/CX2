/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.civicxpress.cx2.UserViewPreferences;
import com.civicxpress.cx2.service.UserViewPreferencesService;


/**
 * Controller object for domain model class UserViewPreferences.
 * @see UserViewPreferences
 */
@RestController("cx2.UserViewPreferencesController")
@Api(value = "UserViewPreferencesController", description = "Exposes APIs to work with UserViewPreferences resource.")
@RequestMapping("/cx2/UserViewPreferences")
public class UserViewPreferencesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(UserViewPreferencesController.class);

    @Autowired
	@Qualifier("cx2.UserViewPreferencesService")
	private UserViewPreferencesService userViewPreferencesService;

	@ApiOperation(value = "Creates a new UserViewPreferences instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public UserViewPreferences createUserViewPreferences(@RequestBody UserViewPreferences userViewPreferences) {
		LOGGER.debug("Create UserViewPreferences with information: {}" , userViewPreferences);

		userViewPreferences = userViewPreferencesService.create(userViewPreferences);
		LOGGER.debug("Created UserViewPreferences with information: {}" , userViewPreferences);

	    return userViewPreferences;
	}


    @ApiOperation(value = "Returns the UserViewPreferences instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UserViewPreferences getUserViewPreferences(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting UserViewPreferences with id: {}" , id);

        UserViewPreferences foundUserViewPreferences = userViewPreferencesService.getById(id);
        LOGGER.debug("UserViewPreferences details with id: {}" , foundUserViewPreferences);

        return foundUserViewPreferences;
    }

    @ApiOperation(value = "Updates the UserViewPreferences instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UserViewPreferences editUserViewPreferences(@PathVariable("id") Integer id, @RequestBody UserViewPreferences userViewPreferences) throws EntityNotFoundException {
        LOGGER.debug("Editing UserViewPreferences with id: {}" , userViewPreferences.getId());

        userViewPreferences.setId(id);
        userViewPreferences = userViewPreferencesService.update(userViewPreferences);
        LOGGER.debug("UserViewPreferences details with id: {}" , userViewPreferences);

        return userViewPreferences;
    }

    @ApiOperation(value = "Deletes the UserViewPreferences instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteUserViewPreferences(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting UserViewPreferences with id: {}" , id);

        UserViewPreferences deletedUserViewPreferences = userViewPreferencesService.delete(id);

        return deletedUserViewPreferences != null;
    }

    @RequestMapping(value = "/userId-preferenceId", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching UserViewPreferences with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UserViewPreferences getByUserIdAndPreferenceId(@RequestParam("userId") Integer userId, @RequestParam("preferenceId") Integer preferenceId) {
        LOGGER.debug("Getting UserViewPreferences with uniques key UserIdAndPreferenceId");
        return userViewPreferencesService.getByUserIdAndPreferenceId(userId, preferenceId);
    }

    /**
     * @deprecated Use {@link #findUserViewPreferences(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of UserViewPreferences instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<UserViewPreferences> searchUserViewPreferencesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering UserViewPreferences list");
        return userViewPreferencesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of UserViewPreferences instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<UserViewPreferences> findUserViewPreferences(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering UserViewPreferences list");
        return userViewPreferencesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of UserViewPreferences instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<UserViewPreferences> filterUserViewPreferences(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering UserViewPreferences list");
        return userViewPreferencesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportUserViewPreferences(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return userViewPreferencesService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of UserViewPreferences instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countUserViewPreferences( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting UserViewPreferences");
		return userViewPreferencesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getUserViewPreferencesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return userViewPreferencesService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service UserViewPreferencesService instance
	 */
	protected void setUserViewPreferencesService(UserViewPreferencesService service) {
		this.userViewPreferencesService = service;
	}

}

