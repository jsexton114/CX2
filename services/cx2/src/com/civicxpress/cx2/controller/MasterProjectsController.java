/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/



import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.civicxpress.cx2.MasterProjects;
import com.civicxpress.cx2.service.MasterProjectsService;


/**
 * Controller object for domain model class MasterProjects.
 * @see MasterProjects
 */
@RestController("cx2.MasterProjectsController")
@Api(value = "MasterProjectsController", description = "Exposes APIs to work with MasterProjects resource.")
@RequestMapping("/cx2/MasterProjects")
public class MasterProjectsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(MasterProjectsController.class);

    @Autowired
	@Qualifier("cx2.MasterProjectsService")
	private MasterProjectsService masterProjectsService;

	@ApiOperation(value = "Creates a new MasterProjects instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public MasterProjects createMasterProjects(@RequestBody MasterProjects masterProjects) {
		LOGGER.debug("Create MasterProjects with information: {}" , masterProjects);

		masterProjects = masterProjectsService.create(masterProjects);
		LOGGER.debug("Created MasterProjects with information: {}" , masterProjects);

	    return masterProjects;
	}


    @ApiOperation(value = "Returns the MasterProjects instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public MasterProjects getMasterProjects(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting MasterProjects with id: {}" , id);

        MasterProjects foundMasterProjects = masterProjectsService.getById(id);
        LOGGER.debug("MasterProjects details with id: {}" , foundMasterProjects);

        return foundMasterProjects;
    }

    @ApiOperation(value = "Updates the MasterProjects instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public MasterProjects editMasterProjects(@PathVariable("id") Integer id, @RequestBody MasterProjects masterProjects) throws EntityNotFoundException {
        LOGGER.debug("Editing MasterProjects with id: {}" , masterProjects.getId());

        masterProjects.setId(id);
        masterProjects = masterProjectsService.update(masterProjects);
        LOGGER.debug("MasterProjects details with id: {}" , masterProjects);

        return masterProjects;
    }

    @ApiOperation(value = "Deletes the MasterProjects instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteMasterProjects(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting MasterProjects with id: {}" , id);

        MasterProjects deletedMasterProjects = masterProjectsService.delete(id);

        return deletedMasterProjects != null;
    }

    /**
     * @deprecated Use {@link #findMasterProjects(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of MasterProjects instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<MasterProjects> searchMasterProjectsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering MasterProjects list");
        return masterProjectsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of MasterProjects instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<MasterProjects> findMasterProjects(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering MasterProjects list");
        return masterProjectsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of MasterProjects instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<MasterProjects> filterMasterProjects(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering MasterProjects list");
        return masterProjectsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportMasterProjects(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return masterProjectsService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of MasterProjects instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countMasterProjects( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting MasterProjects");
		return masterProjectsService.count(query);
	}


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service MasterProjectsService instance
	 */
	protected void setMasterProjectsService(MasterProjectsService service) {
		this.masterProjectsService = service;
	}

}

