/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.civicxpress.cx2.Roles;
import com.civicxpress.cx2.service.RolesService;

/**
 * Controller object for domain model class Roles.
 * @see Roles
 */
@RestController("cx2.RolesController")
@Api(value = "RolesController", description = "Exposes APIs to work with Roles resource.")
@RequestMapping("/cx2/Roles")
public class RolesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(RolesController.class);

    @Autowired
    @Qualifier("cx2.RolesService")
    private RolesService rolesService;

    @ApiOperation(value = "Creates a new Roles instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Roles createRoles(@RequestBody Roles roles) {
        LOGGER.debug("Create Roles with information: {}", roles);
        roles = rolesService.create(roles);
        LOGGER.debug("Created Roles with information: {}", roles);
        return roles;
    }

    @ApiOperation(value = "Returns the Roles instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Roles getRoles(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Roles with id: {}", id);
        Roles foundRoles = rolesService.getById(id);
        LOGGER.debug("Roles details with id: {}", foundRoles);
        return foundRoles;
    }

    @ApiOperation(value = "Updates the Roles instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Roles editRoles(@PathVariable("id") Integer id, @RequestBody Roles roles) throws EntityNotFoundException {
        LOGGER.debug("Editing Roles with id: {}", roles.getId());
        roles.setId(id);
        roles = rolesService.update(roles);
        LOGGER.debug("Roles details with id: {}", roles);
        return roles;
    }

    @ApiOperation(value = "Deletes the Roles instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteRoles(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Roles with id: {}", id);
        Roles deletedRoles = rolesService.delete(id);
        return deletedRoles != null;
    }

    @RequestMapping(value = "/roleName-municipalityId-userId", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Roles with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Roles getByRoleNameAndMunicipalityIdAndUserId(@RequestParam(value = "null", required = true) String roleName, @RequestParam(value = "null", required = true) Integer municipalityId, @RequestParam(value = "null", required = true) Integer userId) {
        LOGGER.debug("Getting Roles with uniques key RoleNameAndMunicipalityIdAndUserId");
        return rolesService.getByRoleNameAndMunicipalityIdAndUserId(roleName, municipalityId, userId);
    }

    /**
     * @deprecated Use {@link #findRoles(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Roles instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Roles> searchRolesByQueryFilters(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Roles list");
        return rolesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of Roles instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Roles> findRoles(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Roles list");
        return rolesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportRoles(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return rolesService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of Roles instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countRoles(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Roles");
        return rolesService.count(query);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service RolesService instance
	 */
    protected void setRolesService(RolesService service) {
        this.rolesService = service;
    }
}
