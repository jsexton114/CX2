/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.civicxpress.cx2.FormTypes;
import com.civicxpress.cx2.Gisrecords;
import com.civicxpress.cx2.ManualFeeTypes;
import com.civicxpress.cx2.Municipalities;
import com.civicxpress.cx2.Roles;
import com.civicxpress.cx2.Subdivisions;
import com.civicxpress.cx2.UserSubscriptions;
import com.civicxpress.cx2.service.MunicipalitiesService;

/**
 * Controller object for domain model class Municipalities.
 * @see Municipalities
 */
@RestController("cx2.MunicipalitiesController")
@Api(value = "MunicipalitiesController", description = "Exposes APIs to work with Municipalities resource.")
@RequestMapping("/cx2/Municipalities")
public class MunicipalitiesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(MunicipalitiesController.class);

    @Autowired
    @Qualifier("cx2.MunicipalitiesService")
    private MunicipalitiesService municipalitiesService;

    @ApiOperation(value = "Creates a new Municipalities instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Municipalities createMunicipalities(@RequestBody Municipalities municipalities) {
        LOGGER.debug("Create Municipalities with information: {}", municipalities);
        municipalities = municipalitiesService.create(municipalities);
        LOGGER.debug("Created Municipalities with information: {}", municipalities);
        return municipalities;
    }

    @ApiOperation(value = "Returns the Municipalities instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Municipalities getMunicipalities(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Municipalities with id: {}", id);
        Municipalities foundMunicipalities = municipalitiesService.getById(id);
        LOGGER.debug("Municipalities details with id: {}", foundMunicipalities);
        return foundMunicipalities;
    }

    @ApiOperation(value = "Updates the Municipalities instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Municipalities editMunicipalities(@PathVariable("id") Integer id, @RequestBody Municipalities municipalities) throws EntityNotFoundException {
        LOGGER.debug("Editing Municipalities with id: {}", municipalities.getId());
        municipalities.setId(id);
        municipalities = municipalitiesService.update(municipalities);
        LOGGER.debug("Municipalities details with id: {}", municipalities);
        return municipalities;
    }

    @ApiOperation(value = "Deletes the Municipalities instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteMunicipalities(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Municipalities with id: {}", id);
        Municipalities deletedMunicipalities = municipalitiesService.delete(id);
        return deletedMunicipalities != null;
    }

    /**
     * @deprecated Use {@link #findMunicipalities(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Municipalities instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Municipalities> findMunicipalities(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Municipalities list");
        return municipalitiesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of Municipalities instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Municipalities> findMunicipalities(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Municipalities list");
        return municipalitiesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportMunicipalities(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return municipalitiesService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of Municipalities instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countMunicipalities(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Municipalities");
        return municipalitiesService.count(query);
    }

    @RequestMapping(value = "/{id}/roleses", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the roleses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Roles> findAssociatedRoleses(@PathVariable("id") Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated roleses");
        return municipalitiesService.findAssociatedRoleses(id, pageable);
    }

    @RequestMapping(value = "/{id}/manualFeeTypeses", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the manualFeeTypeses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ManualFeeTypes> findAssociatedManualFeeTypeses(@PathVariable("id") Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated manualFeeTypeses");
        return municipalitiesService.findAssociatedManualFeeTypeses(id, pageable);
    }

    @RequestMapping(value = "/{id}/formTypeses", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the formTypeses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<FormTypes> findAssociatedFormTypeses(@PathVariable("id") Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated formTypeses");
        return municipalitiesService.findAssociatedFormTypeses(id, pageable);
    }

    @RequestMapping(value = "/{id}/gisrecordses", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the gisrecordses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Gisrecords> findAssociatedGisrecordses(@PathVariable("id") Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated gisrecordses");
        return municipalitiesService.findAssociatedGisrecordses(id, pageable);
    }

    @RequestMapping(value = "/{id}/userSubscriptionses", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the userSubscriptionses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<UserSubscriptions> findAssociatedUserSubscriptionses(@PathVariable("id") Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated userSubscriptionses");
        return municipalitiesService.findAssociatedUserSubscriptionses(id, pageable);
    }

    @RequestMapping(value = "/{id}/subdivisionses", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the subdivisionses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Subdivisions> findAssociatedSubdivisionses(@PathVariable("id") Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated subdivisionses");
        return municipalitiesService.findAssociatedSubdivisionses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service MunicipalitiesService instance
	 */
    protected void setMunicipalitiesService(MunicipalitiesService service) {
        this.municipalitiesService = service;
    }
}
