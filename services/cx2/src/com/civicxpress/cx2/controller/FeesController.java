/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.civicxpress.cx2.Fees;
import com.civicxpress.cx2.MyCart;
import com.civicxpress.cx2.TransactionToFees;
import com.civicxpress.cx2.service.FeesService;


/**
 * Controller object for domain model class Fees.
 * @see Fees
 */
@RestController("cx2.FeesController")
@Api(value = "FeesController", description = "Exposes APIs to work with Fees resource.")
@RequestMapping("/cx2/Fees")
public class FeesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(FeesController.class);

    @Autowired
	@Qualifier("cx2.FeesService")
	private FeesService feesService;

	@ApiOperation(value = "Creates a new Fees instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Fees createFees(@RequestBody Fees fees) {
		LOGGER.debug("Create Fees with information: {}" , fees);

		fees = feesService.create(fees);
		LOGGER.debug("Created Fees with information: {}" , fees);

	    return fees;
	}


    @ApiOperation(value = "Returns the Fees instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Fees getFees(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Fees with id: {}" , id);

        Fees foundFees = feesService.getById(id);
        LOGGER.debug("Fees details with id: {}" , foundFees);

        return foundFees;
    }

    @ApiOperation(value = "Updates the Fees instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Fees editFees(@PathVariable("id") Integer id, @RequestBody Fees fees) throws EntityNotFoundException {
        LOGGER.debug("Editing Fees with id: {}" , fees.getId());

        fees.setId(id);
        fees = feesService.update(fees);
        LOGGER.debug("Fees details with id: {}" , fees);

        return fees;
    }

    @ApiOperation(value = "Deletes the Fees instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteFees(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Fees with id: {}" , id);

        Fees deletedFees = feesService.delete(id);

        return deletedFees != null;
    }

    /**
     * @deprecated Use {@link #findFees(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Fees instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Fees> searchFeesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Fees list");
        return feesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Fees instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Fees> findFees(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Fees list");
        return feesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Fees instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Fees> filterFees(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Fees list");
        return feesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportFees(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return feesService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Fees instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countFees( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Fees");
		return feesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getFeesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return feesService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/myCarts", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the myCarts instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<MyCart> findAssociatedMyCarts(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated myCarts");
        return feesService.findAssociatedMyCarts(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/transactionToFeeses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the transactionToFeeses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TransactionToFees> findAssociatedTransactionToFeeses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated transactionToFeeses");
        return feesService.findAssociatedTransactionToFeeses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service FeesService instance
	 */
	protected void setFeesService(FeesService service) {
		this.feesService = service;
	}

}

