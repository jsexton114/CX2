/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.civicxpress.cx2.FormStatuses;
import com.civicxpress.cx2.MasterForms;
import com.civicxpress.cx2.MunicipalityGroupMembers;
import com.civicxpress.cx2.MunicipalityGroups;
import com.civicxpress.cx2.service.MunicipalityGroupsService;


/**
 * Controller object for domain model class MunicipalityGroups.
 * @see MunicipalityGroups
 */
@RestController("cx2.MunicipalityGroupsController")
@Api(value = "MunicipalityGroupsController", description = "Exposes APIs to work with MunicipalityGroups resource.")
@RequestMapping("/cx2/MunicipalityGroups")
public class MunicipalityGroupsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(MunicipalityGroupsController.class);

    @Autowired
	@Qualifier("cx2.MunicipalityGroupsService")
	private MunicipalityGroupsService municipalityGroupsService;

	@ApiOperation(value = "Creates a new MunicipalityGroups instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public MunicipalityGroups createMunicipalityGroups(@RequestBody MunicipalityGroups municipalityGroups) {
		LOGGER.debug("Create MunicipalityGroups with information: {}" , municipalityGroups);

		municipalityGroups = municipalityGroupsService.create(municipalityGroups);
		LOGGER.debug("Created MunicipalityGroups with information: {}" , municipalityGroups);

	    return municipalityGroups;
	}


    @ApiOperation(value = "Returns the MunicipalityGroups instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public MunicipalityGroups getMunicipalityGroups(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting MunicipalityGroups with id: {}" , id);

        MunicipalityGroups foundMunicipalityGroups = municipalityGroupsService.getById(id);
        LOGGER.debug("MunicipalityGroups details with id: {}" , foundMunicipalityGroups);

        return foundMunicipalityGroups;
    }

    @ApiOperation(value = "Updates the MunicipalityGroups instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public MunicipalityGroups editMunicipalityGroups(@PathVariable("id") Integer id, @RequestBody MunicipalityGroups municipalityGroups) throws EntityNotFoundException {
        LOGGER.debug("Editing MunicipalityGroups with id: {}" , municipalityGroups.getId());

        municipalityGroups.setId(id);
        municipalityGroups = municipalityGroupsService.update(municipalityGroups);
        LOGGER.debug("MunicipalityGroups details with id: {}" , municipalityGroups);

        return municipalityGroups;
    }

    @ApiOperation(value = "Deletes the MunicipalityGroups instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteMunicipalityGroups(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting MunicipalityGroups with id: {}" , id);

        MunicipalityGroups deletedMunicipalityGroups = municipalityGroupsService.delete(id);

        return deletedMunicipalityGroups != null;
    }

    /**
     * @deprecated Use {@link #findMunicipalityGroups(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of MunicipalityGroups instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<MunicipalityGroups> searchMunicipalityGroupsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering MunicipalityGroups list");
        return municipalityGroupsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of MunicipalityGroups instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<MunicipalityGroups> findMunicipalityGroups(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering MunicipalityGroups list");
        return municipalityGroupsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of MunicipalityGroups instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<MunicipalityGroups> filterMunicipalityGroups(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering MunicipalityGroups list");
        return municipalityGroupsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportMunicipalityGroups(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return municipalityGroupsService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of MunicipalityGroups instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countMunicipalityGroups( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting MunicipalityGroups");
		return municipalityGroupsService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getMunicipalityGroupsAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return municipalityGroupsService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/formStatusesesForWriteAccess", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the formStatusesesForWriteAccess instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<FormStatuses> findAssociatedFormStatusesesForWriteAccess(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated formStatusesesForWriteAccess");
        return municipalityGroupsService.findAssociatedFormStatusesesForWriteAccess(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/formStatusesesForProcessOwners", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the formStatusesesForProcessOwners instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<FormStatuses> findAssociatedFormStatusesesForProcessOwners(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated formStatusesesForProcessOwners");
        return municipalityGroupsService.findAssociatedFormStatusesesForProcessOwners(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/masterFormses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the masterFormses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<MasterForms> findAssociatedMasterFormses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated masterFormses");
        return municipalityGroupsService.findAssociatedMasterFormses(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/municipalityGroupMemberses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the municipalityGroupMemberses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<MunicipalityGroupMembers> findAssociatedMunicipalityGroupMemberses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated municipalityGroupMemberses");
        return municipalityGroupsService.findAssociatedMunicipalityGroupMemberses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service MunicipalityGroupsService instance
	 */
	protected void setMunicipalityGroupsService(MunicipalityGroupsService service) {
		this.municipalityGroupsService = service;
	}

}

