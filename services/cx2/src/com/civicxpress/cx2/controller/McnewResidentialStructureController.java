/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.civicxpress.cx2.McnewResidentialStructure;
import com.civicxpress.cx2.service.McnewResidentialStructureService;

/**
 * Controller object for domain model class McnewResidentialStructure.
 * @see McnewResidentialStructure
 */
@RestController("cx2.McnewResidentialStructureController")
@Api(value = "McnewResidentialStructureController", description = "Exposes APIs to work with McnewResidentialStructure resource.")
@RequestMapping("/cx2/McnewResidentialStructure")
public class McnewResidentialStructureController {

    private static final Logger LOGGER = LoggerFactory.getLogger(McnewResidentialStructureController.class);

    @Autowired
    @Qualifier("cx2.McnewResidentialStructureService")
    private McnewResidentialStructureService mcnewResidentialStructureService;

    @ApiOperation(value = "Creates a new McnewResidentialStructure instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public McnewResidentialStructure createMcnewResidentialStructure(@RequestBody McnewResidentialStructure mcnewResidentialStructure) {
        LOGGER.debug("Create McnewResidentialStructure with information: {}", mcnewResidentialStructure);
        mcnewResidentialStructure = mcnewResidentialStructureService.create(mcnewResidentialStructure);
        LOGGER.debug("Created McnewResidentialStructure with information: {}", mcnewResidentialStructure);
        return mcnewResidentialStructure;
    }

    @ApiOperation(value = "Returns the McnewResidentialStructure instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public McnewResidentialStructure getMcnewResidentialStructure(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting McnewResidentialStructure with id: {}", id);
        McnewResidentialStructure foundMcnewResidentialStructure = mcnewResidentialStructureService.getById(id);
        LOGGER.debug("McnewResidentialStructure details with id: {}", foundMcnewResidentialStructure);
        return foundMcnewResidentialStructure;
    }

    @ApiOperation(value = "Updates the McnewResidentialStructure instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public McnewResidentialStructure editMcnewResidentialStructure(@PathVariable("id") Integer id, @RequestBody McnewResidentialStructure mcnewResidentialStructure) throws EntityNotFoundException {
        LOGGER.debug("Editing McnewResidentialStructure with id: {}", mcnewResidentialStructure.getId());
        mcnewResidentialStructure.setId(id);
        mcnewResidentialStructure = mcnewResidentialStructureService.update(mcnewResidentialStructure);
        LOGGER.debug("McnewResidentialStructure details with id: {}", mcnewResidentialStructure);
        return mcnewResidentialStructure;
    }

    @ApiOperation(value = "Deletes the McnewResidentialStructure instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteMcnewResidentialStructure(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting McnewResidentialStructure with id: {}", id);
        McnewResidentialStructure deletedMcnewResidentialStructure = mcnewResidentialStructureService.delete(id);
        return deletedMcnewResidentialStructure != null;
    }

    /**
     * @deprecated Use {@link #findMcnewResidentialStructures(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of McnewResidentialStructure instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<McnewResidentialStructure> searchMcnewResidentialStructuresByQueryFilters(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering McnewResidentialStructures list");
        return mcnewResidentialStructureService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of McnewResidentialStructure instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<McnewResidentialStructure> findMcnewResidentialStructures(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering McnewResidentialStructures list");
        return mcnewResidentialStructureService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportMcnewResidentialStructures(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return mcnewResidentialStructureService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of McnewResidentialStructure instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countMcnewResidentialStructures(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting McnewResidentialStructures");
        return mcnewResidentialStructureService.count(query);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service McnewResidentialStructureService instance
	 */
    protected void setMcnewResidentialStructureService(McnewResidentialStructureService service) {
        this.mcnewResidentialStructureService = service;
    }
}
