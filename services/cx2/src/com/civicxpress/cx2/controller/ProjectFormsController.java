/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/



import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.civicxpress.cx2.ProjectForms;
import com.civicxpress.cx2.service.ProjectFormsService;


/**
 * Controller object for domain model class ProjectForms.
 * @see ProjectForms
 */
@RestController("cx2.ProjectFormsController")
@Api(value = "ProjectFormsController", description = "Exposes APIs to work with ProjectForms resource.")
@RequestMapping("/cx2/ProjectForms")
public class ProjectFormsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ProjectFormsController.class);

    @Autowired
	@Qualifier("cx2.ProjectFormsService")
	private ProjectFormsService projectFormsService;

	@ApiOperation(value = "Creates a new ProjectForms instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public ProjectForms createProjectForms(@RequestBody ProjectForms projectForms) {
		LOGGER.debug("Create ProjectForms with information: {}" , projectForms);

		projectForms = projectFormsService.create(projectForms);
		LOGGER.debug("Created ProjectForms with information: {}" , projectForms);

	    return projectForms;
	}


    @ApiOperation(value = "Returns the ProjectForms instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ProjectForms getProjectForms(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting ProjectForms with id: {}" , id);

        ProjectForms foundProjectForms = projectFormsService.getById(id);
        LOGGER.debug("ProjectForms details with id: {}" , foundProjectForms);

        return foundProjectForms;
    }

    @ApiOperation(value = "Updates the ProjectForms instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ProjectForms editProjectForms(@PathVariable("id") Integer id, @RequestBody ProjectForms projectForms) throws EntityNotFoundException {
        LOGGER.debug("Editing ProjectForms with id: {}" , projectForms.getId());

        projectForms.setId(id);
        projectForms = projectFormsService.update(projectForms);
        LOGGER.debug("ProjectForms details with id: {}" , projectForms);

        return projectForms;
    }

    @ApiOperation(value = "Deletes the ProjectForms instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteProjectForms(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting ProjectForms with id: {}" , id);

        ProjectForms deletedProjectForms = projectFormsService.delete(id);

        return deletedProjectForms != null;
    }

    /**
     * @deprecated Use {@link #findProjectForms(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of ProjectForms instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ProjectForms> searchProjectFormsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering ProjectForms list");
        return projectFormsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ProjectForms instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ProjectForms> findProjectForms(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ProjectForms list");
        return projectFormsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ProjectForms instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ProjectForms> filterProjectForms(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ProjectForms list");
        return projectFormsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportProjectForms(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return projectFormsService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of ProjectForms instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countProjectForms( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting ProjectForms");
		return projectFormsService.count(query);
	}


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ProjectFormsService instance
	 */
	protected void setProjectFormsService(ProjectFormsService service) {
		this.projectFormsService = service;
	}

}

