/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.civicxpress.cx2.UserRoles;
import com.civicxpress.cx2.service.UserRolesService;

/**
 * Controller object for domain model class UserRoles.
 * @see UserRoles
 */
@RestController("cx2.UserRolesController")
@Api(value = "UserRolesController", description = "Exposes APIs to work with UserRoles resource.")
@RequestMapping("/cx2/UserRoles")
public class UserRolesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(UserRolesController.class);

    @Autowired
    @Qualifier("cx2.UserRolesService")
    private UserRolesService userRolesService;

    @ApiOperation(value = "Creates a new UserRoles instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UserRoles createUserRoles(@RequestBody UserRoles userRoles) {
        LOGGER.debug("Create UserRoles with information: {}", userRoles);
        userRoles = userRolesService.create(userRoles);
        LOGGER.debug("Created UserRoles with information: {}", userRoles);
        return userRoles;
    }

    @ApiOperation(value = "Returns the UserRoles instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UserRoles getUserRoles(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting UserRoles with id: {}", id);
        UserRoles foundUserRoles = userRolesService.getById(id);
        LOGGER.debug("UserRoles details with id: {}", foundUserRoles);
        return foundUserRoles;
    }

    @ApiOperation(value = "Updates the UserRoles instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UserRoles editUserRoles(@PathVariable("id") Integer id, @RequestBody UserRoles userRoles) throws EntityNotFoundException {
        LOGGER.debug("Editing UserRoles with id: {}", userRoles.getId());
        userRoles.setId(id);
        userRoles = userRolesService.update(userRoles);
        LOGGER.debug("UserRoles details with id: {}", userRoles);
        return userRoles;
    }

    @ApiOperation(value = "Deletes the UserRoles instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteUserRoles(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting UserRoles with id: {}", id);
        UserRoles deletedUserRoles = userRolesService.delete(id);
        return deletedUserRoles != null;
    }

    /**
     * @deprecated Use {@link #findUserRoles(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of UserRoles instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<UserRoles> findUserRoles(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering UserRoles list");
        return userRolesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of UserRoles instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<UserRoles> findUserRoles(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering UserRoles list");
        return userRolesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportUserRoles(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return userRolesService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of UserRoles instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countUserRoles(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting UserRoles");
        return userRolesService.count(query);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service UserRolesService instance
	 */
    protected void setUserRolesService(UserRolesService service) {
        this.userRolesService = service;
    }
}
