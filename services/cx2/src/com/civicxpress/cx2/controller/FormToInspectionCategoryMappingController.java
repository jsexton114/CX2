/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/



import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.civicxpress.cx2.FormToInspectionCategoryMapping;
import com.civicxpress.cx2.service.FormToInspectionCategoryMappingService;


/**
 * Controller object for domain model class FormToInspectionCategoryMapping.
 * @see FormToInspectionCategoryMapping
 */
@RestController("cx2.FormToInspectionCategoryMappingController")
@Api(value = "FormToInspectionCategoryMappingController", description = "Exposes APIs to work with FormToInspectionCategoryMapping resource.")
@RequestMapping("/cx2/FormToInspectionCategoryMapping")
public class FormToInspectionCategoryMappingController {

    private static final Logger LOGGER = LoggerFactory.getLogger(FormToInspectionCategoryMappingController.class);

    @Autowired
	@Qualifier("cx2.FormToInspectionCategoryMappingService")
	private FormToInspectionCategoryMappingService formToInspectionCategoryMappingService;

	@ApiOperation(value = "Creates a new FormToInspectionCategoryMapping instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public FormToInspectionCategoryMapping createFormToInspectionCategoryMapping(@RequestBody FormToInspectionCategoryMapping formToInspectionCategoryMapping) {
		LOGGER.debug("Create FormToInspectionCategoryMapping with information: {}" , formToInspectionCategoryMapping);

		formToInspectionCategoryMapping = formToInspectionCategoryMappingService.create(formToInspectionCategoryMapping);
		LOGGER.debug("Created FormToInspectionCategoryMapping with information: {}" , formToInspectionCategoryMapping);

	    return formToInspectionCategoryMapping;
	}


    @ApiOperation(value = "Returns the FormToInspectionCategoryMapping instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public FormToInspectionCategoryMapping getFormToInspectionCategoryMapping(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting FormToInspectionCategoryMapping with id: {}" , id);

        FormToInspectionCategoryMapping foundFormToInspectionCategoryMapping = formToInspectionCategoryMappingService.getById(id);
        LOGGER.debug("FormToInspectionCategoryMapping details with id: {}" , foundFormToInspectionCategoryMapping);

        return foundFormToInspectionCategoryMapping;
    }

    @ApiOperation(value = "Updates the FormToInspectionCategoryMapping instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public FormToInspectionCategoryMapping editFormToInspectionCategoryMapping(@PathVariable("id") Integer id, @RequestBody FormToInspectionCategoryMapping formToInspectionCategoryMapping) throws EntityNotFoundException {
        LOGGER.debug("Editing FormToInspectionCategoryMapping with id: {}" , formToInspectionCategoryMapping.getId());

        formToInspectionCategoryMapping.setId(id);
        formToInspectionCategoryMapping = formToInspectionCategoryMappingService.update(formToInspectionCategoryMapping);
        LOGGER.debug("FormToInspectionCategoryMapping details with id: {}" , formToInspectionCategoryMapping);

        return formToInspectionCategoryMapping;
    }

    @ApiOperation(value = "Deletes the FormToInspectionCategoryMapping instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteFormToInspectionCategoryMapping(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting FormToInspectionCategoryMapping with id: {}" , id);

        FormToInspectionCategoryMapping deletedFormToInspectionCategoryMapping = formToInspectionCategoryMappingService.delete(id);

        return deletedFormToInspectionCategoryMapping != null;
    }
    @RequestMapping(value = "/formTypeId-inspectionCategoryId", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching FormToInspectionCategoryMapping with given unique key values.")
    public FormToInspectionCategoryMapping getByFormTypeIdAndInspectionCategoryId(@RequestParam(name = "formTypeId") Integer formTypeId, @RequestParam(name = "inspectionCategoryId") Integer inspectionCategoryId) {
        LOGGER.debug("Getting FormToInspectionCategoryMapping with uniques key FormTypeIdAndInspectionCategoryId");
        return formToInspectionCategoryMappingService.getByFormTypeIdAndInspectionCategoryId(formTypeId, inspectionCategoryId);
    }

    /**
     * @deprecated Use {@link #findFormToInspectionCategoryMappings(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of FormToInspectionCategoryMapping instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<FormToInspectionCategoryMapping> searchFormToInspectionCategoryMappingsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering FormToInspectionCategoryMappings list");
        return formToInspectionCategoryMappingService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of FormToInspectionCategoryMapping instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<FormToInspectionCategoryMapping> findFormToInspectionCategoryMappings(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering FormToInspectionCategoryMappings list");
        return formToInspectionCategoryMappingService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of FormToInspectionCategoryMapping instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<FormToInspectionCategoryMapping> filterFormToInspectionCategoryMappings(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering FormToInspectionCategoryMappings list");
        return formToInspectionCategoryMappingService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportFormToInspectionCategoryMappings(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return formToInspectionCategoryMappingService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of FormToInspectionCategoryMapping instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countFormToInspectionCategoryMappings( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting FormToInspectionCategoryMappings");
		return formToInspectionCategoryMappingService.count(query);
	}


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service FormToInspectionCategoryMappingService instance
	 */
	protected void setFormToInspectionCategoryMappingService(FormToInspectionCategoryMappingService service) {
		this.formToInspectionCategoryMappingService = service;
	}

}

