/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/



import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.civicxpress.cx2.InspectionCategoryMapping;
import com.civicxpress.cx2.service.InspectionCategoryMappingService;


/**
 * Controller object for domain model class InspectionCategoryMapping.
 * @see InspectionCategoryMapping
 */
@RestController("cx2.InspectionCategoryMappingController")
@Api(value = "InspectionCategoryMappingController", description = "Exposes APIs to work with InspectionCategoryMapping resource.")
@RequestMapping("/cx2/InspectionCategoryMapping")
public class InspectionCategoryMappingController {

    private static final Logger LOGGER = LoggerFactory.getLogger(InspectionCategoryMappingController.class);

    @Autowired
	@Qualifier("cx2.InspectionCategoryMappingService")
	private InspectionCategoryMappingService inspectionCategoryMappingService;

	@ApiOperation(value = "Creates a new InspectionCategoryMapping instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public InspectionCategoryMapping createInspectionCategoryMapping(@RequestBody InspectionCategoryMapping inspectionCategoryMapping) {
		LOGGER.debug("Create InspectionCategoryMapping with information: {}" , inspectionCategoryMapping);

		inspectionCategoryMapping = inspectionCategoryMappingService.create(inspectionCategoryMapping);
		LOGGER.debug("Created InspectionCategoryMapping with information: {}" , inspectionCategoryMapping);

	    return inspectionCategoryMapping;
	}


    @ApiOperation(value = "Returns the InspectionCategoryMapping instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public InspectionCategoryMapping getInspectionCategoryMapping(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting InspectionCategoryMapping with id: {}" , id);

        InspectionCategoryMapping foundInspectionCategoryMapping = inspectionCategoryMappingService.getById(id);
        LOGGER.debug("InspectionCategoryMapping details with id: {}" , foundInspectionCategoryMapping);

        return foundInspectionCategoryMapping;
    }

    @ApiOperation(value = "Updates the InspectionCategoryMapping instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public InspectionCategoryMapping editInspectionCategoryMapping(@PathVariable("id") Integer id, @RequestBody InspectionCategoryMapping inspectionCategoryMapping) throws EntityNotFoundException {
        LOGGER.debug("Editing InspectionCategoryMapping with id: {}" , inspectionCategoryMapping.getId());

        inspectionCategoryMapping.setId(id);
        inspectionCategoryMapping = inspectionCategoryMappingService.update(inspectionCategoryMapping);
        LOGGER.debug("InspectionCategoryMapping details with id: {}" , inspectionCategoryMapping);

        return inspectionCategoryMapping;
    }

    @ApiOperation(value = "Deletes the InspectionCategoryMapping instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteInspectionCategoryMapping(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting InspectionCategoryMapping with id: {}" , id);

        InspectionCategoryMapping deletedInspectionCategoryMapping = inspectionCategoryMappingService.delete(id);

        return deletedInspectionCategoryMapping != null;
    }

    /**
     * @deprecated Use {@link #findInspectionCategoryMappings(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of InspectionCategoryMapping instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<InspectionCategoryMapping> searchInspectionCategoryMappingsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering InspectionCategoryMappings list");
        return inspectionCategoryMappingService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of InspectionCategoryMapping instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<InspectionCategoryMapping> findInspectionCategoryMappings(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering InspectionCategoryMappings list");
        return inspectionCategoryMappingService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of InspectionCategoryMapping instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<InspectionCategoryMapping> filterInspectionCategoryMappings(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering InspectionCategoryMappings list");
        return inspectionCategoryMappingService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportInspectionCategoryMappings(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return inspectionCategoryMappingService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of InspectionCategoryMapping instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countInspectionCategoryMappings( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting InspectionCategoryMappings");
		return inspectionCategoryMappingService.count(query);
	}


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service InspectionCategoryMappingService instance
	 */
	protected void setInspectionCategoryMappingService(InspectionCategoryMappingService service) {
		this.inspectionCategoryMappingService = service;
	}

}

