/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.civicxpress.cx2.UserSubscriptions;
import com.civicxpress.cx2.service.UserSubscriptionsService;


/**
 * Controller object for domain model class UserSubscriptions.
 * @see UserSubscriptions
 */
@RestController("cx2.UserSubscriptionsController")
@Api(value = "UserSubscriptionsController", description = "Exposes APIs to work with UserSubscriptions resource.")
@RequestMapping("/cx2/UserSubscriptions")
public class UserSubscriptionsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(UserSubscriptionsController.class);

    @Autowired
	@Qualifier("cx2.UserSubscriptionsService")
	private UserSubscriptionsService userSubscriptionsService;

	@ApiOperation(value = "Creates a new UserSubscriptions instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public UserSubscriptions createUserSubscriptions(@RequestBody UserSubscriptions userSubscriptions) {
		LOGGER.debug("Create UserSubscriptions with information: {}" , userSubscriptions);

		userSubscriptions = userSubscriptionsService.create(userSubscriptions);
		LOGGER.debug("Created UserSubscriptions with information: {}" , userSubscriptions);

	    return userSubscriptions;
	}


    @ApiOperation(value = "Returns the UserSubscriptions instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UserSubscriptions getUserSubscriptions(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting UserSubscriptions with id: {}" , id);

        UserSubscriptions foundUserSubscriptions = userSubscriptionsService.getById(id);
        LOGGER.debug("UserSubscriptions details with id: {}" , foundUserSubscriptions);

        return foundUserSubscriptions;
    }

    @ApiOperation(value = "Updates the UserSubscriptions instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UserSubscriptions editUserSubscriptions(@PathVariable("id") Integer id, @RequestBody UserSubscriptions userSubscriptions) throws EntityNotFoundException {
        LOGGER.debug("Editing UserSubscriptions with id: {}" , userSubscriptions.getId());

        userSubscriptions.setId(id);
        userSubscriptions = userSubscriptionsService.update(userSubscriptions);
        LOGGER.debug("UserSubscriptions details with id: {}" , userSubscriptions);

        return userSubscriptions;
    }

    @ApiOperation(value = "Deletes the UserSubscriptions instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteUserSubscriptions(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting UserSubscriptions with id: {}" , id);

        UserSubscriptions deletedUserSubscriptions = userSubscriptionsService.delete(id);

        return deletedUserSubscriptions != null;
    }

    @RequestMapping(value = "/municipalityId-userId", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching UserSubscriptions with given unique key values.")
    public UserSubscriptions getByMunicipalityIdAndUserId(@RequestParam("municipalityId") Integer municipalityId, @RequestParam("userId") Integer userId) {
        LOGGER.debug("Getting UserSubscriptions with uniques key MunicipalityIdAndUserId");
        return userSubscriptionsService.getByMunicipalityIdAndUserId(municipalityId, userId);
    }

    /**
     * @deprecated Use {@link #findUserSubscriptions(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of UserSubscriptions instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<UserSubscriptions> searchUserSubscriptionsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering UserSubscriptions list");
        return userSubscriptionsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of UserSubscriptions instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<UserSubscriptions> findUserSubscriptions(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering UserSubscriptions list");
        return userSubscriptionsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of UserSubscriptions instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<UserSubscriptions> filterUserSubscriptions(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering UserSubscriptions list");
        return userSubscriptionsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportUserSubscriptions(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return userSubscriptionsService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of UserSubscriptions instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countUserSubscriptions( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting UserSubscriptions");
		return userSubscriptionsService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getUserSubscriptionsAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return userSubscriptionsService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service UserSubscriptionsService instance
	 */
	protected void setUserSubscriptionsService(UserSubscriptionsService service) {
		this.userSubscriptionsService = service;
	}

}

