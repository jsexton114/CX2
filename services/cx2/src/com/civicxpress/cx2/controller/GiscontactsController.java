/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/



import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.civicxpress.cx2.Giscontacts;
import com.civicxpress.cx2.MasterForms;
import com.civicxpress.cx2.service.GiscontactsService;


/**
 * Controller object for domain model class Giscontacts.
 * @see Giscontacts
 */
@RestController("cx2.GiscontactsController")
@Api(value = "GiscontactsController", description = "Exposes APIs to work with Giscontacts resource.")
@RequestMapping("/cx2/Giscontacts")
public class GiscontactsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(GiscontactsController.class);

    @Autowired
	@Qualifier("cx2.GiscontactsService")
	private GiscontactsService giscontactsService;

	@ApiOperation(value = "Creates a new Giscontacts instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Giscontacts createGiscontacts(@RequestBody Giscontacts giscontacts) {
		LOGGER.debug("Create Giscontacts with information: {}" , giscontacts);

		giscontacts = giscontactsService.create(giscontacts);
		LOGGER.debug("Created Giscontacts with information: {}" , giscontacts);

	    return giscontacts;
	}


    @ApiOperation(value = "Returns the Giscontacts instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Giscontacts getGiscontacts(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Giscontacts with id: {}" , id);

        Giscontacts foundGiscontacts = giscontactsService.getById(id);
        LOGGER.debug("Giscontacts details with id: {}" , foundGiscontacts);

        return foundGiscontacts;
    }

    @ApiOperation(value = "Updates the Giscontacts instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Giscontacts editGiscontacts(@PathVariable("id") Integer id, @RequestBody Giscontacts giscontacts) throws EntityNotFoundException {
        LOGGER.debug("Editing Giscontacts with id: {}" , giscontacts.getId());

        giscontacts.setId(id);
        giscontacts = giscontactsService.update(giscontacts);
        LOGGER.debug("Giscontacts details with id: {}" , giscontacts);

        return giscontacts;
    }

    @ApiOperation(value = "Deletes the Giscontacts instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteGiscontacts(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Giscontacts with id: {}" , id);

        Giscontacts deletedGiscontacts = giscontactsService.delete(id);

        return deletedGiscontacts != null;
    }

    /**
     * @deprecated Use {@link #findGiscontacts(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Giscontacts instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Giscontacts> searchGiscontactsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Giscontacts list");
        return giscontactsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Giscontacts instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Giscontacts> findGiscontacts(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Giscontacts list");
        return giscontactsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Giscontacts instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Giscontacts> filterGiscontacts(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Giscontacts list");
        return giscontactsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGiscontacts(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return giscontactsService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Giscontacts instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countGiscontacts( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Giscontacts");
		return giscontactsService.count(query);
	}

    @RequestMapping(value="/{id:.+}/masterFormses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the masterFormses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<MasterForms> findAssociatedMasterFormses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated masterFormses");
        return giscontactsService.findAssociatedMasterFormses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service GiscontactsService instance
	 */
	protected void setGiscontactsService(GiscontactsService service) {
		this.giscontactsService = service;
	}

}

