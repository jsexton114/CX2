/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.civicxpress.cx2.StandardViews;
import com.civicxpress.cx2.UserViewPreferences;
import com.civicxpress.cx2.service.StandardViewsService;

/**
 * Controller object for domain model class StandardViews.
 * @see StandardViews
 */
@RestController("cx2.StandardViewsController")
@Api(value = "StandardViewsController", description = "Exposes APIs to work with StandardViews resource.")
@RequestMapping("/cx2/StandardViews")
public class StandardViewsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(StandardViewsController.class);

    @Autowired
    @Qualifier("cx2.StandardViewsService")
    private StandardViewsService standardViewsService;

    @ApiOperation(value = "Creates a new StandardViews instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StandardViews createStandardViews(@RequestBody StandardViews standardViews) {
        LOGGER.debug("Create StandardViews with information: {}", standardViews);
        standardViews = standardViewsService.create(standardViews);
        LOGGER.debug("Created StandardViews with information: {}", standardViews);
        return standardViews;
    }

    @ApiOperation(value = "Returns the StandardViews instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StandardViews getStandardViews(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting StandardViews with id: {}", id);
        StandardViews foundStandardViews = standardViewsService.getById(id);
        LOGGER.debug("StandardViews details with id: {}", foundStandardViews);
        return foundStandardViews;
    }

    @ApiOperation(value = "Updates the StandardViews instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StandardViews editStandardViews(@PathVariable("id") Integer id, @RequestBody StandardViews standardViews) throws EntityNotFoundException {
        LOGGER.debug("Editing StandardViews with id: {}", standardViews.getId());
        standardViews.setId(id);
        standardViews = standardViewsService.update(standardViews);
        LOGGER.debug("StandardViews details with id: {}", standardViews);
        return standardViews;
    }

    @ApiOperation(value = "Deletes the StandardViews instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteStandardViews(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting StandardViews with id: {}", id);
        StandardViews deletedStandardViews = standardViewsService.delete(id);
        return deletedStandardViews != null;
    }

    /**
     * @deprecated Use {@link #findStandardViews(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of StandardViews instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<StandardViews> searchStandardViewsByQueryFilters(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering StandardViews list");
        return standardViewsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of StandardViews instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<StandardViews> findStandardViews(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering StandardViews list");
        return standardViewsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportStandardViews(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return standardViewsService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of StandardViews instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countStandardViews(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting StandardViews");
        return standardViewsService.count(query);
    }

    @RequestMapping(value = "/{id}/userViewPreferenceses", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the userViewPreferenceses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<UserViewPreferences> findAssociatedUserViewPreferenceses(@PathVariable("id") Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated userViewPreferenceses");
        return standardViewsService.findAssociatedUserViewPreferenceses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service StandardViewsService instance
	 */
    protected void setStandardViewsService(StandardViewsService service) {
        this.standardViewsService = service;
    }
}
