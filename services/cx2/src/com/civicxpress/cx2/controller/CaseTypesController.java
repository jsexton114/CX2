/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.civicxpress.cx2.CaseStatuses;
import com.civicxpress.cx2.CaseTypes;
import com.civicxpress.cx2.MasterCases;
import com.civicxpress.cx2.service.CaseTypesService;


/**
 * Controller object for domain model class CaseTypes.
 * @see CaseTypes
 */
@RestController("cx2.CaseTypesController")
@Api(value = "CaseTypesController", description = "Exposes APIs to work with CaseTypes resource.")
@RequestMapping("/cx2/CaseTypes")
public class CaseTypesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CaseTypesController.class);

    @Autowired
	@Qualifier("cx2.CaseTypesService")
	private CaseTypesService caseTypesService;

	@ApiOperation(value = "Creates a new CaseTypes instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public CaseTypes createCaseTypes(@RequestBody CaseTypes caseTypes) {
		LOGGER.debug("Create CaseTypes with information: {}" , caseTypes);

		caseTypes = caseTypesService.create(caseTypes);
		LOGGER.debug("Created CaseTypes with information: {}" , caseTypes);

	    return caseTypes;
	}


    @ApiOperation(value = "Returns the CaseTypes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CaseTypes getCaseTypes(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting CaseTypes with id: {}" , id);

        CaseTypes foundCaseTypes = caseTypesService.getById(id);
        LOGGER.debug("CaseTypes details with id: {}" , foundCaseTypes);

        return foundCaseTypes;
    }

    @ApiOperation(value = "Updates the CaseTypes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CaseTypes editCaseTypes(@PathVariable("id") Integer id, @RequestBody CaseTypes caseTypes) throws EntityNotFoundException {
        LOGGER.debug("Editing CaseTypes with id: {}" , caseTypes.getId());

        caseTypes.setId(id);
        caseTypes = caseTypesService.update(caseTypes);
        LOGGER.debug("CaseTypes details with id: {}" , caseTypes);

        return caseTypes;
    }

    @ApiOperation(value = "Deletes the CaseTypes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteCaseTypes(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting CaseTypes with id: {}" , id);

        CaseTypes deletedCaseTypes = caseTypesService.delete(id);

        return deletedCaseTypes != null;
    }

    /**
     * @deprecated Use {@link #findCaseTypes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of CaseTypes instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CaseTypes> searchCaseTypesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering CaseTypes list");
        return caseTypesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CaseTypes instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CaseTypes> findCaseTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CaseTypes list");
        return caseTypesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CaseTypes instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CaseTypes> filterCaseTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CaseTypes list");
        return caseTypesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCaseTypes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return caseTypesService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of CaseTypes instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countCaseTypes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting CaseTypes");
		return caseTypesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getCaseTypesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return caseTypesService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/caseStatuseses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the caseStatuseses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CaseStatuses> findAssociatedCaseStatuseses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated caseStatuseses");
        return caseTypesService.findAssociatedCaseStatuseses(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/masterCaseses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the masterCaseses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<MasterCases> findAssociatedMasterCaseses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated masterCaseses");
        return caseTypesService.findAssociatedMasterCaseses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CaseTypesService instance
	 */
	protected void setCaseTypesService(CaseTypesService service) {
		this.caseTypesService = service;
	}

}

