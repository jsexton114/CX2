/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.civicxpress.cx2.GisTransaction;
import com.civicxpress.cx2.service.GisTransactionService;


/**
 * Controller object for domain model class GisTransaction.
 * @see GisTransaction
 */
@RestController("cx2.GisTransactionController")
@Api(value = "GisTransactionController", description = "Exposes APIs to work with GisTransaction resource.")
@RequestMapping("/cx2/GisTransaction")
public class GisTransactionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(GisTransactionController.class);

    @Autowired
	@Qualifier("cx2.GisTransactionService")
	private GisTransactionService gisTransactionService;

	@ApiOperation(value = "Creates a new GisTransaction instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public GisTransaction createGisTransaction(@RequestBody GisTransaction gisTransaction) {
		LOGGER.debug("Create GisTransaction with information: {}" , gisTransaction);

		gisTransaction = gisTransactionService.create(gisTransaction);
		LOGGER.debug("Created GisTransaction with information: {}" , gisTransaction);

	    return gisTransaction;
	}


    @ApiOperation(value = "Returns the GisTransaction instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public GisTransaction getGisTransaction(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting GisTransaction with id: {}" , id);

        GisTransaction foundGisTransaction = gisTransactionService.getById(id);
        LOGGER.debug("GisTransaction details with id: {}" , foundGisTransaction);

        return foundGisTransaction;
    }

    @ApiOperation(value = "Updates the GisTransaction instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public GisTransaction editGisTransaction(@PathVariable("id") Integer id, @RequestBody GisTransaction gisTransaction) throws EntityNotFoundException {
        LOGGER.debug("Editing GisTransaction with id: {}" , gisTransaction.getId());

        gisTransaction.setId(id);
        gisTransaction = gisTransactionService.update(gisTransaction);
        LOGGER.debug("GisTransaction details with id: {}" , gisTransaction);

        return gisTransaction;
    }

    @ApiOperation(value = "Deletes the GisTransaction instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteGisTransaction(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting GisTransaction with id: {}" , id);

        GisTransaction deletedGisTransaction = gisTransactionService.delete(id);

        return deletedGisTransaction != null;
    }

    /**
     * @deprecated Use {@link #findGisTransactions(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of GisTransaction instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<GisTransaction> searchGisTransactionsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering GisTransactions list");
        return gisTransactionService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of GisTransaction instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<GisTransaction> findGisTransactions(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering GisTransactions list");
        return gisTransactionService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of GisTransaction instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<GisTransaction> filterGisTransactions(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering GisTransactions list");
        return gisTransactionService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportGisTransactions(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return gisTransactionService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of GisTransaction instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countGisTransactions( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting GisTransactions");
		return gisTransactionService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getGisTransactionAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return gisTransactionService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service GisTransactionService instance
	 */
	protected void setGisTransactionService(GisTransactionService service) {
		this.gisTransactionService = service;
	}

}

