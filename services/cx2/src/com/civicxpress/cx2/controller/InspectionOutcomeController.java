/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.civicxpress.cx2.InspectionOutcome;
import com.civicxpress.cx2.InspectionOutcomeFee;
import com.civicxpress.cx2.MasterInspections;
import com.civicxpress.cx2.service.InspectionOutcomeService;

/**
 * Controller object for domain model class InspectionOutcome.
 * @see InspectionOutcome
 */
@RestController("cx2.InspectionOutcomeController")
@Api(value = "InspectionOutcomeController", description = "Exposes APIs to work with InspectionOutcome resource.")
@RequestMapping("/cx2/InspectionOutcome")
public class InspectionOutcomeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(InspectionOutcomeController.class);

    @Autowired
    @Qualifier("cx2.InspectionOutcomeService")
    private InspectionOutcomeService inspectionOutcomeService;

    @ApiOperation(value = "Creates a new InspectionOutcome instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public InspectionOutcome createInspectionOutcome(@RequestBody InspectionOutcome inspectionOutcome) {
        LOGGER.debug("Create InspectionOutcome with information: {}", inspectionOutcome);
        inspectionOutcome = inspectionOutcomeService.create(inspectionOutcome);
        LOGGER.debug("Created InspectionOutcome with information: {}", inspectionOutcome);
        return inspectionOutcome;
    }

    @ApiOperation(value = "Returns the InspectionOutcome instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public InspectionOutcome getInspectionOutcome(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting InspectionOutcome with id: {}", id);
        InspectionOutcome foundInspectionOutcome = inspectionOutcomeService.getById(id);
        LOGGER.debug("InspectionOutcome details with id: {}", foundInspectionOutcome);
        return foundInspectionOutcome;
    }

    @ApiOperation(value = "Updates the InspectionOutcome instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public InspectionOutcome editInspectionOutcome(@PathVariable("id") Integer id, @RequestBody InspectionOutcome inspectionOutcome) throws EntityNotFoundException {
        LOGGER.debug("Editing InspectionOutcome with id: {}", inspectionOutcome.getId());
        inspectionOutcome.setId(id);
        inspectionOutcome = inspectionOutcomeService.update(inspectionOutcome);
        LOGGER.debug("InspectionOutcome details with id: {}", inspectionOutcome);
        return inspectionOutcome;
    }

    @ApiOperation(value = "Deletes the InspectionOutcome instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteInspectionOutcome(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting InspectionOutcome with id: {}", id);
        InspectionOutcome deletedInspectionOutcome = inspectionOutcomeService.delete(id);
        return deletedInspectionOutcome != null;
    }

    /**
     * @deprecated Use {@link #findInspectionOutcomes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of InspectionOutcome instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<InspectionOutcome> searchInspectionOutcomesByQueryFilters(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering InspectionOutcomes list");
        return inspectionOutcomeService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of InspectionOutcome instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<InspectionOutcome> findInspectionOutcomes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering InspectionOutcomes list");
        return inspectionOutcomeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportInspectionOutcomes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return inspectionOutcomeService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of InspectionOutcome instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countInspectionOutcomes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting InspectionOutcomes");
        return inspectionOutcomeService.count(query);
    }

    @RequestMapping(value = "/{id:.+}/inspectionOutcomeFees", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the inspectionOutcomeFees instance associated with the given id.")
    public Page<InspectionOutcomeFee> findAssociatedInspectionOutcomeFees(@PathVariable("id") Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated inspectionOutcomeFees");
        return inspectionOutcomeService.findAssociatedInspectionOutcomeFees(id, pageable);
    }

    @RequestMapping(value = "/{id}/masterInspectionses", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the masterInspectionses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<MasterInspections> findAssociatedMasterInspectionses(@PathVariable("id") Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated masterInspectionses");
        return inspectionOutcomeService.findAssociatedMasterInspectionses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service InspectionOutcomeService instance
	 */
    protected void setInspectionOutcomeService(InspectionOutcomeService service) {
        this.inspectionOutcomeService = service;
    }
}
