/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.civicxpress.cx2.InspectionHistory;
import com.civicxpress.cx2.InspectionOutcome;
import com.civicxpress.cx2.InspectionOutcomeFee;
import com.civicxpress.cx2.LetterTemplateToInspectionOutcome;
import com.civicxpress.cx2.MasterInspections;
import com.civicxpress.cx2.service.InspectionOutcomeService;


/**
 * Controller object for domain model class InspectionOutcome.
 * @see InspectionOutcome
 */
@RestController("cx2.InspectionOutcomeController")
@Api(value = "InspectionOutcomeController", description = "Exposes APIs to work with InspectionOutcome resource.")
@RequestMapping("/cx2/InspectionOutcome")
public class InspectionOutcomeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(InspectionOutcomeController.class);

    @Autowired
	@Qualifier("cx2.InspectionOutcomeService")
	private InspectionOutcomeService inspectionOutcomeService;

	@ApiOperation(value = "Creates a new InspectionOutcome instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public InspectionOutcome createInspectionOutcome(@RequestBody InspectionOutcome inspectionOutcome) {
		LOGGER.debug("Create InspectionOutcome with information: {}" , inspectionOutcome);

		inspectionOutcome = inspectionOutcomeService.create(inspectionOutcome);
		LOGGER.debug("Created InspectionOutcome with information: {}" , inspectionOutcome);

	    return inspectionOutcome;
	}


    @ApiOperation(value = "Returns the InspectionOutcome instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public InspectionOutcome getInspectionOutcome(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting InspectionOutcome with id: {}" , id);

        InspectionOutcome foundInspectionOutcome = inspectionOutcomeService.getById(id);
        LOGGER.debug("InspectionOutcome details with id: {}" , foundInspectionOutcome);

        return foundInspectionOutcome;
    }

    @ApiOperation(value = "Updates the InspectionOutcome instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public InspectionOutcome editInspectionOutcome(@PathVariable("id") Integer id, @RequestBody InspectionOutcome inspectionOutcome) throws EntityNotFoundException {
        LOGGER.debug("Editing InspectionOutcome with id: {}" , inspectionOutcome.getId());

        inspectionOutcome.setId(id);
        inspectionOutcome = inspectionOutcomeService.update(inspectionOutcome);
        LOGGER.debug("InspectionOutcome details with id: {}" , inspectionOutcome);

        return inspectionOutcome;
    }

    @ApiOperation(value = "Deletes the InspectionOutcome instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteInspectionOutcome(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting InspectionOutcome with id: {}" , id);

        InspectionOutcome deletedInspectionOutcome = inspectionOutcomeService.delete(id);

        return deletedInspectionOutcome != null;
    }

    @RequestMapping(value = "/inspectDesignId-outcomeOrder", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching InspectionOutcome with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public InspectionOutcome getByInspectDesignIdAndOutcomeOrder(@RequestParam("inspectDesignId") Integer inspectDesignId, @RequestParam("outcomeOrder") Integer outcomeOrder) {
        LOGGER.debug("Getting InspectionOutcome with uniques key InspectDesignIdAndOutcomeOrder");
        return inspectionOutcomeService.getByInspectDesignIdAndOutcomeOrder(inspectDesignId, outcomeOrder);
    }

    /**
     * @deprecated Use {@link #findInspectionOutcomes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of InspectionOutcome instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<InspectionOutcome> searchInspectionOutcomesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering InspectionOutcomes list");
        return inspectionOutcomeService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of InspectionOutcome instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<InspectionOutcome> findInspectionOutcomes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering InspectionOutcomes list");
        return inspectionOutcomeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of InspectionOutcome instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<InspectionOutcome> filterInspectionOutcomes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering InspectionOutcomes list");
        return inspectionOutcomeService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportInspectionOutcomes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return inspectionOutcomeService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of InspectionOutcome instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countInspectionOutcomes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting InspectionOutcomes");
		return inspectionOutcomeService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getInspectionOutcomeAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return inspectionOutcomeService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/inspectionHistoriesForNewOutcomeId", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the inspectionHistoriesForNewOutcomeId instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<InspectionHistory> findAssociatedInspectionHistoriesForNewOutcomeId(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated inspectionHistoriesForNewOutcomeId");
        return inspectionOutcomeService.findAssociatedInspectionHistoriesForNewOutcomeId(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/inspectionHistoriesForOldOutcomeId", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the inspectionHistoriesForOldOutcomeId instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<InspectionHistory> findAssociatedInspectionHistoriesForOldOutcomeId(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated inspectionHistoriesForOldOutcomeId");
        return inspectionOutcomeService.findAssociatedInspectionHistoriesForOldOutcomeId(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/inspectionOutcomeFees", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the inspectionOutcomeFees instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<InspectionOutcomeFee> findAssociatedInspectionOutcomeFees(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated inspectionOutcomeFees");
        return inspectionOutcomeService.findAssociatedInspectionOutcomeFees(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/letterTemplateToInspectionOutcomes", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the letterTemplateToInspectionOutcomes instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LetterTemplateToInspectionOutcome> findAssociatedLetterTemplateToInspectionOutcomes(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated letterTemplateToInspectionOutcomes");
        return inspectionOutcomeService.findAssociatedLetterTemplateToInspectionOutcomes(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/masterInspectionses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the masterInspectionses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<MasterInspections> findAssociatedMasterInspectionses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated masterInspectionses");
        return inspectionOutcomeService.findAssociatedMasterInspectionses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service InspectionOutcomeService instance
	 */
	protected void setInspectionOutcomeService(InspectionOutcomeService service) {
		this.inspectionOutcomeService = service;
	}

}

