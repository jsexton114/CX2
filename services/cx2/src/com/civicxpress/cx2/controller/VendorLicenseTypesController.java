/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/



import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.civicxpress.cx2.VendorLicenseTypes;
import com.civicxpress.cx2.VendorLicenses;
import com.civicxpress.cx2.service.VendorLicenseTypesService;


/**
 * Controller object for domain model class VendorLicenseTypes.
 * @see VendorLicenseTypes
 */
@RestController("cx2.VendorLicenseTypesController")
@Api(value = "VendorLicenseTypesController", description = "Exposes APIs to work with VendorLicenseTypes resource.")
@RequestMapping("/cx2/VendorLicenseTypes")
public class VendorLicenseTypesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VendorLicenseTypesController.class);

    @Autowired
	@Qualifier("cx2.VendorLicenseTypesService")
	private VendorLicenseTypesService vendorLicenseTypesService;

	@ApiOperation(value = "Creates a new VendorLicenseTypes instance.")
	@RequestMapping(method = RequestMethod.POST)
        @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public VendorLicenseTypes createVendorLicenseTypes(@RequestBody VendorLicenseTypes vendorLicenseTypes) {
		LOGGER.debug("Create VendorLicenseTypes with information: {}" , vendorLicenseTypes);

		vendorLicenseTypes = vendorLicenseTypesService.create(vendorLicenseTypes);
		LOGGER.debug("Created VendorLicenseTypes with information: {}" , vendorLicenseTypes);

	    return vendorLicenseTypes;
	}


    @ApiOperation(value = "Returns the VendorLicenseTypes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VendorLicenseTypes getVendorLicenseTypes(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting VendorLicenseTypes with id: {}" , id);

        VendorLicenseTypes foundVendorLicenseTypes = vendorLicenseTypesService.getById(id);
        LOGGER.debug("VendorLicenseTypes details with id: {}" , foundVendorLicenseTypes);

        return foundVendorLicenseTypes;
    }

    @ApiOperation(value = "Updates the VendorLicenseTypes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VendorLicenseTypes editVendorLicenseTypes(@PathVariable("id") Integer id, @RequestBody VendorLicenseTypes vendorLicenseTypes) throws EntityNotFoundException {
        LOGGER.debug("Editing VendorLicenseTypes with id: {}" , vendorLicenseTypes.getId());

        vendorLicenseTypes.setId(id);
        vendorLicenseTypes = vendorLicenseTypesService.update(vendorLicenseTypes);
        LOGGER.debug("VendorLicenseTypes details with id: {}" , vendorLicenseTypes);

        return vendorLicenseTypes;
    }

    @ApiOperation(value = "Deletes the VendorLicenseTypes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVendorLicenseTypes(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting VendorLicenseTypes with id: {}" , id);

        VendorLicenseTypes deletedVendorLicenseTypes = vendorLicenseTypesService.delete(id);

        return deletedVendorLicenseTypes != null;
    }

    /**
     * @deprecated Use {@link #findVendorLicenseTypes(String, Pageable)} instead.
     */
    @Deprecated
	@ApiOperation(value = "Returns the list of VendorLicenseTypes instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<VendorLicenseTypes> findVendorLicenseTypes( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering VendorLicenseTypes list");
		return vendorLicenseTypesService.findAll(queryFilters, pageable);
	}

    @ApiOperation(value = "Returns the list of VendorLicenseTypes instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VendorLicenseTypes> findVendorLicenseTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VendorLicenseTypes list");
    	return vendorLicenseTypesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVendorLicenseTypes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return vendorLicenseTypesService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of VendorLicenseTypes instances.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVendorLicenseTypes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting VendorLicenseTypes");
		return vendorLicenseTypesService.count(query);
	}

    @RequestMapping(value="/{id:.+}/vendorLicenseses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the vendorLicenseses instance associated with the given id.")
    public Page<VendorLicenses> findAssociatedVendorLicenseses(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated vendorLicenseses");
        return vendorLicenseTypesService.findAssociatedVendorLicenseses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VendorLicenseTypesService instance
	 */
	protected void setVendorLicenseTypesService(VendorLicenseTypesService service) {
		this.vendorLicenseTypesService = service;
	}

}

