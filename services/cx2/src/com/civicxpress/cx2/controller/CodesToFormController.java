/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/



import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.civicxpress.cx2.CodesToForm;
import com.civicxpress.cx2.service.CodesToFormService;


/**
 * Controller object for domain model class CodesToForm.
 * @see CodesToForm
 */
@RestController("cx2.CodesToFormController")
@Api(value = "CodesToFormController", description = "Exposes APIs to work with CodesToForm resource.")
@RequestMapping("/cx2/CodesToForm")
public class CodesToFormController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CodesToFormController.class);

    @Autowired
	@Qualifier("cx2.CodesToFormService")
	private CodesToFormService codesToFormService;

	@ApiOperation(value = "Creates a new CodesToForm instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public CodesToForm createCodesToForm(@RequestBody CodesToForm codesToForm) {
		LOGGER.debug("Create CodesToForm with information: {}" , codesToForm);

		codesToForm = codesToFormService.create(codesToForm);
		LOGGER.debug("Created CodesToForm with information: {}" , codesToForm);

	    return codesToForm;
	}


    @ApiOperation(value = "Returns the CodesToForm instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CodesToForm getCodesToForm(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting CodesToForm with id: {}" , id);

        CodesToForm foundCodesToForm = codesToFormService.getById(id);
        LOGGER.debug("CodesToForm details with id: {}" , foundCodesToForm);

        return foundCodesToForm;
    }

    @ApiOperation(value = "Updates the CodesToForm instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public CodesToForm editCodesToForm(@PathVariable("id") Integer id, @RequestBody CodesToForm codesToForm) throws EntityNotFoundException {
        LOGGER.debug("Editing CodesToForm with id: {}" , codesToForm.getId());

        codesToForm.setId(id);
        codesToForm = codesToFormService.update(codesToForm);
        LOGGER.debug("CodesToForm details with id: {}" , codesToForm);

        return codesToForm;
    }

    @ApiOperation(value = "Deletes the CodesToForm instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteCodesToForm(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting CodesToForm with id: {}" , id);

        CodesToForm deletedCodesToForm = codesToFormService.delete(id);

        return deletedCodesToForm != null;
    }

    /**
     * @deprecated Use {@link #findCodesToForms(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of CodesToForm instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CodesToForm> searchCodesToFormsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering CodesToForms list");
        return codesToFormService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CodesToForm instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CodesToForm> findCodesToForms(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CodesToForms list");
        return codesToFormService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of CodesToForm instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<CodesToForm> filterCodesToForms(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering CodesToForms list");
        return codesToFormService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportCodesToForms(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return codesToFormService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of CodesToForm instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countCodesToForms( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting CodesToForms");
		return codesToFormService.count(query);
	}


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service CodesToFormService instance
	 */
	protected void setCodesToFormService(CodesToFormService service) {
		this.codesToFormService = service;
	}

}

