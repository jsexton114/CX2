/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/



import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.civicxpress.cx2.MyCart;
import com.civicxpress.cx2.service.MyCartService;


/**
 * Controller object for domain model class MyCart.
 * @see MyCart
 */
@RestController("cx2.MyCartController")
@Api(value = "MyCartController", description = "Exposes APIs to work with MyCart resource.")
@RequestMapping("/cx2/MyCart")
public class MyCartController {

    private static final Logger LOGGER = LoggerFactory.getLogger(MyCartController.class);

    @Autowired
	@Qualifier("cx2.MyCartService")
	private MyCartService myCartService;

	@ApiOperation(value = "Creates a new MyCart instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public MyCart createMyCart(@RequestBody MyCart myCart) {
		LOGGER.debug("Create MyCart with information: {}" , myCart);

		myCart = myCartService.create(myCart);
		LOGGER.debug("Created MyCart with information: {}" , myCart);

	    return myCart;
	}


    @ApiOperation(value = "Returns the MyCart instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public MyCart getMyCart(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting MyCart with id: {}" , id);

        MyCart foundMyCart = myCartService.getById(id);
        LOGGER.debug("MyCart details with id: {}" , foundMyCart);

        return foundMyCart;
    }

    @ApiOperation(value = "Updates the MyCart instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public MyCart editMyCart(@PathVariable("id") Integer id, @RequestBody MyCart myCart) throws EntityNotFoundException {
        LOGGER.debug("Editing MyCart with id: {}" , myCart.getId());

        myCart.setId(id);
        myCart = myCartService.update(myCart);
        LOGGER.debug("MyCart details with id: {}" , myCart);

        return myCart;
    }

    @ApiOperation(value = "Deletes the MyCart instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteMyCart(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting MyCart with id: {}" , id);

        MyCart deletedMyCart = myCartService.delete(id);

        return deletedMyCart != null;
    }
    @RequestMapping(value = "/feeId-userId", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching MyCart with given unique key values.")
    public MyCart getByFeeIdAndUserId(@RequestParam(name = "feeId") Integer feeId, @RequestParam(name = "userId") Integer userId) {
        LOGGER.debug("Getting MyCart with uniques key FeeIdAndUserId");
        return myCartService.getByFeeIdAndUserId(feeId, userId);
    }

    /**
     * @deprecated Use {@link #findMyCarts(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of MyCart instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<MyCart> searchMyCartsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering MyCarts list");
        return myCartService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of MyCart instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<MyCart> findMyCarts(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering MyCarts list");
        return myCartService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of MyCart instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<MyCart> filterMyCarts(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering MyCarts list");
        return myCartService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportMyCarts(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return myCartService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of MyCart instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countMyCarts( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting MyCarts");
		return myCartService.count(query);
	}


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service MyCartService instance
	 */
	protected void setMyCartService(MyCartService service) {
		this.myCartService = service;
	}

}

