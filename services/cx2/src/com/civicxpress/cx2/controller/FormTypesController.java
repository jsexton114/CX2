/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.civicxpress.cx2.FormStatuses;
import com.civicxpress.cx2.FormTypes;
import com.civicxpress.cx2.SfnewElectricConnection;
import com.civicxpress.cx2.SfnewResidentialStructure;
import com.civicxpress.cx2.service.FormTypesService;

/**
 * Controller object for domain model class FormTypes.
 * @see FormTypes
 */
@RestController("cx2.FormTypesController")
@Api(value = "FormTypesController", description = "Exposes APIs to work with FormTypes resource.")
@RequestMapping("/cx2/FormTypes")
public class FormTypesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(FormTypesController.class);

    @Autowired
    @Qualifier("cx2.FormTypesService")
    private FormTypesService formTypesService;

    @ApiOperation(value = "Creates a new FormTypes instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public FormTypes createFormTypes(@RequestBody FormTypes formTypes) {
        LOGGER.debug("Create FormTypes with information: {}", formTypes);
        formTypes = formTypesService.create(formTypes);
        LOGGER.debug("Created FormTypes with information: {}", formTypes);
        return formTypes;
    }

    @ApiOperation(value = "Returns the FormTypes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public FormTypes getFormTypes(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting FormTypes with id: {}", id);
        FormTypes foundFormTypes = formTypesService.getById(id);
        LOGGER.debug("FormTypes details with id: {}", foundFormTypes);
        return foundFormTypes;
    }

    @ApiOperation(value = "Updates the FormTypes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public FormTypes editFormTypes(@PathVariable("id") Integer id, @RequestBody FormTypes formTypes) throws EntityNotFoundException {
        LOGGER.debug("Editing FormTypes with id: {}", formTypes.getId());
        formTypes.setId(id);
        formTypes = formTypesService.update(formTypes);
        LOGGER.debug("FormTypes details with id: {}", formTypes);
        return formTypes;
    }

    @ApiOperation(value = "Deletes the FormTypes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteFormTypes(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting FormTypes with id: {}", id);
        FormTypes deletedFormTypes = formTypesService.delete(id);
        return deletedFormTypes != null;
    }

    /**
     * @deprecated Use {@link #findFormTypes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of FormTypes instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<FormTypes> findFormTypes(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering FormTypes list");
        return formTypesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of FormTypes instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<FormTypes> findFormTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering FormTypes list");
        return formTypesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportFormTypes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return formTypesService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of FormTypes instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countFormTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting FormTypes");
        return formTypesService.count(query);
    }

    @RequestMapping(value = "/{id}/sfnewElectricConnections", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the sfnewElectricConnections instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SfnewElectricConnection> findAssociatedSfnewElectricConnections(@PathVariable("id") Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated sfnewElectricConnections");
        return formTypesService.findAssociatedSfnewElectricConnections(id, pageable);
    }

    @RequestMapping(value = "/{id}/sfnewResidentialStructures", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the sfnewResidentialStructures instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<SfnewResidentialStructure> findAssociatedSfnewResidentialStructures(@PathVariable("id") Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated sfnewResidentialStructures");
        return formTypesService.findAssociatedSfnewResidentialStructures(id, pageable);
    }

    @RequestMapping(value = "/{id}/formStatuseses", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the formStatuseses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<FormStatuses> findAssociatedFormStatuseses(@PathVariable("id") Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated formStatuseses");
        return formTypesService.findAssociatedFormStatuseses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service FormTypesService instance
	 */
    protected void setFormTypesService(FormTypesService service) {
        this.formTypesService = service;
    }
}
