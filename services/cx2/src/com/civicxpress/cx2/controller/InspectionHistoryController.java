/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/



import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.civicxpress.cx2.InspectionHistory;
import com.civicxpress.cx2.service.InspectionHistoryService;


/**
 * Controller object for domain model class InspectionHistory.
 * @see InspectionHistory
 */
@RestController("cx2.InspectionHistoryController")
@Api(value = "InspectionHistoryController", description = "Exposes APIs to work with InspectionHistory resource.")
@RequestMapping("/cx2/InspectionHistory")
public class InspectionHistoryController {

    private static final Logger LOGGER = LoggerFactory.getLogger(InspectionHistoryController.class);

    @Autowired
	@Qualifier("cx2.InspectionHistoryService")
	private InspectionHistoryService inspectionHistoryService;

	@ApiOperation(value = "Creates a new InspectionHistory instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public InspectionHistory createInspectionHistory(@RequestBody InspectionHistory inspectionHistory) {
		LOGGER.debug("Create InspectionHistory with information: {}" , inspectionHistory);

		inspectionHistory = inspectionHistoryService.create(inspectionHistory);
		LOGGER.debug("Created InspectionHistory with information: {}" , inspectionHistory);

	    return inspectionHistory;
	}


    @ApiOperation(value = "Returns the InspectionHistory instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public InspectionHistory getInspectionHistory(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting InspectionHistory with id: {}" , id);

        InspectionHistory foundInspectionHistory = inspectionHistoryService.getById(id);
        LOGGER.debug("InspectionHistory details with id: {}" , foundInspectionHistory);

        return foundInspectionHistory;
    }

    @ApiOperation(value = "Updates the InspectionHistory instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public InspectionHistory editInspectionHistory(@PathVariable("id") Integer id, @RequestBody InspectionHistory inspectionHistory) throws EntityNotFoundException {
        LOGGER.debug("Editing InspectionHistory with id: {}" , inspectionHistory.getId());

        inspectionHistory.setId(id);
        inspectionHistory = inspectionHistoryService.update(inspectionHistory);
        LOGGER.debug("InspectionHistory details with id: {}" , inspectionHistory);

        return inspectionHistory;
    }

    @ApiOperation(value = "Deletes the InspectionHistory instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteInspectionHistory(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting InspectionHistory with id: {}" , id);

        InspectionHistory deletedInspectionHistory = inspectionHistoryService.delete(id);

        return deletedInspectionHistory != null;
    }

    /**
     * @deprecated Use {@link #findInspectionHistories(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of InspectionHistory instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<InspectionHistory> searchInspectionHistoriesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering InspectionHistories list");
        return inspectionHistoryService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of InspectionHistory instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<InspectionHistory> findInspectionHistories(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering InspectionHistories list");
        return inspectionHistoryService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of InspectionHistory instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<InspectionHistory> filterInspectionHistories(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering InspectionHistories list");
        return inspectionHistoryService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportInspectionHistories(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return inspectionHistoryService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of InspectionHistory instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countInspectionHistories( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting InspectionHistories");
		return inspectionHistoryService.count(query);
	}


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service InspectionHistoryService instance
	 */
	protected void setInspectionHistoryService(InspectionHistoryService service) {
		this.inspectionHistoryService = service;
	}

}

