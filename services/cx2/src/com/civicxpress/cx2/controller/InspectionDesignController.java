/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.civicxpress.cx2.InspectionDesign;
import com.civicxpress.cx2.InspectionOutcome;
import com.civicxpress.cx2.InspectionSequence;
import com.civicxpress.cx2.MasterInspections;
import com.civicxpress.cx2.service.InspectionDesignService;

/**
 * Controller object for domain model class InspectionDesign.
 * @see InspectionDesign
 */
@RestController("cx2.InspectionDesignController")
@Api(value = "InspectionDesignController", description = "Exposes APIs to work with InspectionDesign resource.")
@RequestMapping("/cx2/InspectionDesign")
public class InspectionDesignController {

    private static final Logger LOGGER = LoggerFactory.getLogger(InspectionDesignController.class);

    @Autowired
    @Qualifier("cx2.InspectionDesignService")
    private InspectionDesignService inspectionDesignService;

    @ApiOperation(value = "Creates a new InspectionDesign instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public InspectionDesign createInspectionDesign(@RequestBody InspectionDesign inspectionDesign) {
        LOGGER.debug("Create InspectionDesign with information: {}", inspectionDesign);
        inspectionDesign = inspectionDesignService.create(inspectionDesign);
        LOGGER.debug("Created InspectionDesign with information: {}", inspectionDesign);
        return inspectionDesign;
    }

    @ApiOperation(value = "Returns the InspectionDesign instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public InspectionDesign getInspectionDesign(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting InspectionDesign with id: {}", id);
        InspectionDesign foundInspectionDesign = inspectionDesignService.getById(id);
        LOGGER.debug("InspectionDesign details with id: {}", foundInspectionDesign);
        return foundInspectionDesign;
    }

    @ApiOperation(value = "Updates the InspectionDesign instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public InspectionDesign editInspectionDesign(@PathVariable("id") Integer id, @RequestBody InspectionDesign inspectionDesign) throws EntityNotFoundException {
        LOGGER.debug("Editing InspectionDesign with id: {}", inspectionDesign.getId());
        inspectionDesign.setId(id);
        inspectionDesign = inspectionDesignService.update(inspectionDesign);
        LOGGER.debug("InspectionDesign details with id: {}", inspectionDesign);
        return inspectionDesign;
    }

    @ApiOperation(value = "Deletes the InspectionDesign instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteInspectionDesign(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting InspectionDesign with id: {}", id);
        InspectionDesign deletedInspectionDesign = inspectionDesignService.delete(id);
        return deletedInspectionDesign != null;
    }

    /**
     * @deprecated Use {@link #findInspectionDesigns(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of InspectionDesign instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<InspectionDesign> searchInspectionDesignsByQueryFilters(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering InspectionDesigns list");
        return inspectionDesignService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of InspectionDesign instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<InspectionDesign> findInspectionDesigns(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering InspectionDesigns list");
        return inspectionDesignService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportInspectionDesigns(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return inspectionDesignService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of InspectionDesign instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countInspectionDesigns(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting InspectionDesigns");
        return inspectionDesignService.count(query);
    }

    @RequestMapping(value = "/{id}/inspectionOutcomes", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the inspectionOutcomes instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<InspectionOutcome> findAssociatedInspectionOutcomes(@PathVariable("id") Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated inspectionOutcomes");
        return inspectionDesignService.findAssociatedInspectionOutcomes(id, pageable);
    }

    @RequestMapping(value = "/{id}/inspectionSequences", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the inspectionSequences instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<InspectionSequence> findAssociatedInspectionSequences(@PathVariable("id") Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated inspectionSequences");
        return inspectionDesignService.findAssociatedInspectionSequences(id, pageable);
    }

    @RequestMapping(value = "/{id}/masterInspectionses", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the masterInspectionses instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<MasterInspections> findAssociatedMasterInspectionses(@PathVariable("id") Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated masterInspectionses");
        return inspectionDesignService.findAssociatedMasterInspectionses(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service InspectionDesignService instance
	 */
    protected void setInspectionDesignService(InspectionDesignService service) {
        this.inspectionDesignService = service;
    }
}
