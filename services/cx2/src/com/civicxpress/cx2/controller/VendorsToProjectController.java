/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.civicxpress.cx2.VendorsToProject;
import com.civicxpress.cx2.service.VendorsToProjectService;


/**
 * Controller object for domain model class VendorsToProject.
 * @see VendorsToProject
 */
@RestController("cx2.VendorsToProjectController")
@Api(value = "VendorsToProjectController", description = "Exposes APIs to work with VendorsToProject resource.")
@RequestMapping("/cx2/VendorsToProject")
public class VendorsToProjectController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VendorsToProjectController.class);

    @Autowired
	@Qualifier("cx2.VendorsToProjectService")
	private VendorsToProjectService vendorsToProjectService;

	@ApiOperation(value = "Creates a new VendorsToProject instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public VendorsToProject createVendorsToProject(@RequestBody VendorsToProject vendorsToProject) {
		LOGGER.debug("Create VendorsToProject with information: {}" , vendorsToProject);

		vendorsToProject = vendorsToProjectService.create(vendorsToProject);
		LOGGER.debug("Created VendorsToProject with information: {}" , vendorsToProject);

	    return vendorsToProject;
	}


    @ApiOperation(value = "Returns the VendorsToProject instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VendorsToProject getVendorsToProject(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting VendorsToProject with id: {}" , id);

        VendorsToProject foundVendorsToProject = vendorsToProjectService.getById(id);
        LOGGER.debug("VendorsToProject details with id: {}" , foundVendorsToProject);

        return foundVendorsToProject;
    }

    @ApiOperation(value = "Updates the VendorsToProject instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VendorsToProject editVendorsToProject(@PathVariable("id") Integer id, @RequestBody VendorsToProject vendorsToProject) throws EntityNotFoundException {
        LOGGER.debug("Editing VendorsToProject with id: {}" , vendorsToProject.getId());

        vendorsToProject.setId(id);
        vendorsToProject = vendorsToProjectService.update(vendorsToProject);
        LOGGER.debug("VendorsToProject details with id: {}" , vendorsToProject);

        return vendorsToProject;
    }

    @ApiOperation(value = "Deletes the VendorsToProject instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVendorsToProject(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting VendorsToProject with id: {}" , id);

        VendorsToProject deletedVendorsToProject = vendorsToProjectService.delete(id);

        return deletedVendorsToProject != null;
    }

    @RequestMapping(value = "/projectGuid-vendorId", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching VendorsToProject with given unique key values.")
    public VendorsToProject getByProjectGuidAndVendorId(@RequestParam("projectGuid") String projectGuid, @RequestParam("vendorId") Integer vendorId) {
        LOGGER.debug("Getting VendorsToProject with uniques key ProjectGuidAndVendorId");
        return vendorsToProjectService.getByProjectGuidAndVendorId(projectGuid, vendorId);
    }

    /**
     * @deprecated Use {@link #findVendorsToProjects(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of VendorsToProject instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VendorsToProject> searchVendorsToProjectsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering VendorsToProjects list");
        return vendorsToProjectService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VendorsToProject instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VendorsToProject> findVendorsToProjects(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VendorsToProjects list");
        return vendorsToProjectService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VendorsToProject instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VendorsToProject> filterVendorsToProjects(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VendorsToProjects list");
        return vendorsToProjectService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVendorsToProjects(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return vendorsToProjectService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of VendorsToProject instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVendorsToProjects( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting VendorsToProjects");
		return vendorsToProjectService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVendorsToProjectAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return vendorsToProjectService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VendorsToProjectService instance
	 */
	protected void setVendorsToProjectService(VendorsToProjectService service) {
		this.vendorsToProjectService = service;
	}

}

