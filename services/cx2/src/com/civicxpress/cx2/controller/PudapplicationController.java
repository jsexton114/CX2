/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/



import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.civicxpress.cx2.Pudapplication;
import com.civicxpress.cx2.service.PudapplicationService;


/**
 * Controller object for domain model class Pudapplication.
 * @see Pudapplication
 */
@RestController("cx2.PudapplicationController")
@Api(value = "PudapplicationController", description = "Exposes APIs to work with Pudapplication resource.")
@RequestMapping("/cx2/Pudapplication")
public class PudapplicationController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PudapplicationController.class);

    @Autowired
	@Qualifier("cx2.PudapplicationService")
	private PudapplicationService pudapplicationService;

	@ApiOperation(value = "Creates a new Pudapplication instance.")
	@RequestMapping(method = RequestMethod.POST)
        @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Pudapplication createPudapplication(@RequestBody Pudapplication pudapplication) {
		LOGGER.debug("Create Pudapplication with information: {}" , pudapplication);

		pudapplication = pudapplicationService.create(pudapplication);
		LOGGER.debug("Created Pudapplication with information: {}" , pudapplication);

	    return pudapplication;
	}


    @ApiOperation(value = "Returns the Pudapplication instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Pudapplication getPudapplication(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Pudapplication with id: {}" , id);

        Pudapplication foundPudapplication = pudapplicationService.getById(id);
        LOGGER.debug("Pudapplication details with id: {}" , foundPudapplication);

        return foundPudapplication;
    }

    @ApiOperation(value = "Updates the Pudapplication instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Pudapplication editPudapplication(@PathVariable("id") Integer id, @RequestBody Pudapplication pudapplication) throws EntityNotFoundException {
        LOGGER.debug("Editing Pudapplication with id: {}" , pudapplication.getId());

        pudapplication.setId(id);
        pudapplication = pudapplicationService.update(pudapplication);
        LOGGER.debug("Pudapplication details with id: {}" , pudapplication);

        return pudapplication;
    }

    @ApiOperation(value = "Deletes the Pudapplication instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deletePudapplication(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Pudapplication with id: {}" , id);

        Pudapplication deletedPudapplication = pudapplicationService.delete(id);

        return deletedPudapplication != null;
    }

    /**
     * @deprecated Use {@link #findPudapplications(String, Pageable)} instead.
     */
    @Deprecated
	@ApiOperation(value = "Returns the list of Pudapplication instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Pudapplication> findPudapplications( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering Pudapplications list");
		return pudapplicationService.findAll(queryFilters, pageable);
	}

    @ApiOperation(value = "Returns the list of Pudapplication instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Pudapplication> findPudapplications(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Pudapplications list");
    	return pudapplicationService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPudapplications(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return pudapplicationService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Pudapplication instances.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countPudapplications( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Pudapplications");
		return pudapplicationService.count(query);
	}


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PudapplicationService instance
	 */
	protected void setPudapplicationService(PudapplicationService service) {
		this.pudapplicationService = service;
	}

}

