/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/



import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.civicxpress.cx2.VendorLicenses;
import com.civicxpress.cx2.service.VendorLicensesService;


/**
 * Controller object for domain model class VendorLicenses.
 * @see VendorLicenses
 */
@RestController("cx2.VendorLicensesController")
@Api(value = "VendorLicensesController", description = "Exposes APIs to work with VendorLicenses resource.")
@RequestMapping("/cx2/VendorLicenses")
public class VendorLicensesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VendorLicensesController.class);

    @Autowired
	@Qualifier("cx2.VendorLicensesService")
	private VendorLicensesService vendorLicensesService;

	@ApiOperation(value = "Creates a new VendorLicenses instance.")
	@RequestMapping(method = RequestMethod.POST)
        @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public VendorLicenses createVendorLicenses(@RequestBody VendorLicenses vendorLicenses) {
		LOGGER.debug("Create VendorLicenses with information: {}" , vendorLicenses);

		vendorLicenses = vendorLicensesService.create(vendorLicenses);
		LOGGER.debug("Created VendorLicenses with information: {}" , vendorLicenses);

	    return vendorLicenses;
	}


    @ApiOperation(value = "Returns the VendorLicenses instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VendorLicenses getVendorLicenses(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting VendorLicenses with id: {}" , id);

        VendorLicenses foundVendorLicenses = vendorLicensesService.getById(id);
        LOGGER.debug("VendorLicenses details with id: {}" , foundVendorLicenses);

        return foundVendorLicenses;
    }

    @ApiOperation(value = "Updates the VendorLicenses instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VendorLicenses editVendorLicenses(@PathVariable("id") Integer id, @RequestBody VendorLicenses vendorLicenses) throws EntityNotFoundException {
        LOGGER.debug("Editing VendorLicenses with id: {}" , vendorLicenses.getId());

        vendorLicenses.setId(id);
        vendorLicenses = vendorLicensesService.update(vendorLicenses);
        LOGGER.debug("VendorLicenses details with id: {}" , vendorLicenses);

        return vendorLicenses;
    }

    @ApiOperation(value = "Deletes the VendorLicenses instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVendorLicenses(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting VendorLicenses with id: {}" , id);

        VendorLicenses deletedVendorLicenses = vendorLicensesService.delete(id);

        return deletedVendorLicenses != null;
    }

    /**
     * @deprecated Use {@link #findVendorLicenses(String, Pageable)} instead.
     */
    @Deprecated
	@ApiOperation(value = "Returns the list of VendorLicenses instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<VendorLicenses> findVendorLicenses( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering VendorLicenses list");
		return vendorLicensesService.findAll(queryFilters, pageable);
	}

    @ApiOperation(value = "Returns the list of VendorLicenses instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VendorLicenses> findVendorLicenses(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VendorLicenses list");
    	return vendorLicensesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVendorLicenses(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return vendorLicensesService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of VendorLicenses instances.")
	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVendorLicenses( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting VendorLicenses");
		return vendorLicensesService.count(query);
	}


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VendorLicensesService instance
	 */
	protected void setVendorLicensesService(VendorLicensesService service) {
		this.vendorLicensesService = service;
	}

}

