/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.civicxpress.cx2.LetterElement;
import com.civicxpress.cx2.LetterElementId;
import com.civicxpress.cx2.service.LetterElementService;


/**
 * Controller object for domain model class LetterElement.
 * @see LetterElement
 */
@RestController("cx2.LetterElementController")
@Api(value = "LetterElementController", description = "Exposes APIs to work with LetterElement resource.")
@RequestMapping("/cx2/LetterElement")
public class LetterElementController {

    private static final Logger LOGGER = LoggerFactory.getLogger(LetterElementController.class);

    @Autowired
	@Qualifier("cx2.LetterElementService")
	private LetterElementService letterElementService;

	@ApiOperation(value = "Creates a new LetterElement instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public LetterElement createLetterElement(@RequestBody LetterElement letterElement) {
		LOGGER.debug("Create LetterElement with information: {}" , letterElement);

		letterElement = letterElementService.create(letterElement);
		LOGGER.debug("Created LetterElement with information: {}" , letterElement);

	    return letterElement;
	}

    @ApiOperation(value = "Returns the LetterElement instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LetterElement getLetterElement(@RequestParam("id") Integer id,@RequestParam("letterSectionId") Integer letterSectionId,@RequestParam("fontSize") Integer fontSize,@RequestParam("lineHeight") Integer lineHeight,@RequestParam("justification") String justification,@RequestParam("isBold") Boolean isBold,@RequestParam("text") String text) throws EntityNotFoundException {

        LetterElementId letterelementId = new LetterElementId();
        letterelementId.setId(id);
        letterelementId.setLetterSectionId(letterSectionId);
        letterelementId.setFontSize(fontSize);
        letterelementId.setLineHeight(lineHeight);
        letterelementId.setJustification(justification);
        letterelementId.setIsBold(isBold);
        letterelementId.setText(text);

        LOGGER.debug("Getting LetterElement with id: {}" , letterelementId);
        LetterElement letterElement = letterElementService.getById(letterelementId);
        LOGGER.debug("LetterElement details with id: {}" , letterElement);

        return letterElement;
    }



    @ApiOperation(value = "Updates the LetterElement instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public LetterElement editLetterElement(@RequestParam("id") Integer id,@RequestParam("letterSectionId") Integer letterSectionId,@RequestParam("fontSize") Integer fontSize,@RequestParam("lineHeight") Integer lineHeight,@RequestParam("justification") String justification,@RequestParam("isBold") Boolean isBold,@RequestParam("text") String text, @RequestBody LetterElement letterElement) throws EntityNotFoundException {

        letterElement.setId(id);
        letterElement.setLetterSectionId(letterSectionId);
        letterElement.setFontSize(fontSize);
        letterElement.setLineHeight(lineHeight);
        letterElement.setJustification(justification);
        letterElement.setIsBold(isBold);
        letterElement.setText(text);

        LOGGER.debug("LetterElement details with id is updated with: {}" , letterElement);

        return letterElementService.update(letterElement);
    }


    @ApiOperation(value = "Deletes the LetterElement instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteLetterElement(@RequestParam("id") Integer id,@RequestParam("letterSectionId") Integer letterSectionId,@RequestParam("fontSize") Integer fontSize,@RequestParam("lineHeight") Integer lineHeight,@RequestParam("justification") String justification,@RequestParam("isBold") Boolean isBold,@RequestParam("text") String text) throws EntityNotFoundException {

        LetterElementId letterelementId = new LetterElementId();
        letterelementId.setId(id);
        letterelementId.setLetterSectionId(letterSectionId);
        letterelementId.setFontSize(fontSize);
        letterelementId.setLineHeight(lineHeight);
        letterelementId.setJustification(justification);
        letterelementId.setIsBold(isBold);
        letterelementId.setText(text);

        LOGGER.debug("Deleting LetterElement with id: {}" , letterelementId);
        LetterElement letterElement = letterElementService.delete(letterelementId);

        return letterElement != null;
    }


    /**
     * @deprecated Use {@link #findLetterElements(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of LetterElement instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LetterElement> searchLetterElementsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering LetterElements list");
        return letterElementService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of LetterElement instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LetterElement> findLetterElements(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering LetterElements list");
        return letterElementService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of LetterElement instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LetterElement> filterLetterElements(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering LetterElements list");
        return letterElementService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportLetterElements(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return letterElementService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of LetterElement instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countLetterElements( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting LetterElements");
		return letterElementService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getLetterElementAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return letterElementService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service LetterElementService instance
	 */
	protected void setLetterElementService(LetterElementService service) {
		this.letterElementService = service;
	}

}

