/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.civicxpress.cx2.Inspections;
import com.civicxpress.cx2.service.InspectionsService;

/**
 * Controller object for domain model class Inspections.
 * @see Inspections
 */
@RestController("cx2.InspectionsController")
@Api(value = "InspectionsController", description = "Exposes APIs to work with Inspections resource.")
@RequestMapping("/cx2/Inspections")
public class InspectionsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(InspectionsController.class);

    @Autowired
    @Qualifier("cx2.InspectionsService")
    private InspectionsService inspectionsService;

    @ApiOperation(value = "Creates a new Inspections instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Inspections createInspections(@RequestBody Inspections inspections) {
        LOGGER.debug("Create Inspections with information: {}", inspections);
        inspections = inspectionsService.create(inspections);
        LOGGER.debug("Created Inspections with information: {}", inspections);
        return inspections;
    }

    @ApiOperation(value = "Returns the Inspections instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Inspections getInspections(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Inspections with id: {}", id);
        Inspections foundInspections = inspectionsService.getById(id);
        LOGGER.debug("Inspections details with id: {}", foundInspections);
        return foundInspections;
    }

    @ApiOperation(value = "Updates the Inspections instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Inspections editInspections(@PathVariable("id") Integer id, @RequestBody Inspections inspections) throws EntityNotFoundException {
        LOGGER.debug("Editing Inspections with id: {}", inspections.getId());
        inspections.setId(id);
        inspections = inspectionsService.update(inspections);
        LOGGER.debug("Inspections details with id: {}", inspections);
        return inspections;
    }

    @ApiOperation(value = "Deletes the Inspections instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteInspections(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Inspections with id: {}", id);
        Inspections deletedInspections = inspectionsService.delete(id);
        return deletedInspections != null;
    }

    /**
     * @deprecated Use {@link #findInspections(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Inspections instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Inspections> searchInspectionsByQueryFilters(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Inspections list");
        return inspectionsService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the list of Inspections instances matching the search criteria.")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Inspections> findInspections(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Inspections list");
        return inspectionsService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data.")
    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportInspections(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        return inspectionsService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns the total count of Inspections instances.")
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Long countInspections(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
        LOGGER.debug("counting Inspections");
        return inspectionsService.count(query);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service InspectionsService instance
	 */
    protected void setInspectionsService(InspectionsService service) {
        this.inspectionsService = service;
    }
}
