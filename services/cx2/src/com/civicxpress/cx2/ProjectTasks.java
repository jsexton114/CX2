/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Objects;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.annotations.GenericGenerator;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

/**
 * ProjectTasks generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`ProjectTasks`")
public class ProjectTasks implements Serializable {

    private String pmid;
    private String relatedProjectGuid;
    private String type;
    private String description;
    private Date startAt;
    private Integer assignedTo;
    private Integer percentComplete;
    private String predecessor;
    private String name;
    private Date endAt;
    private Integer createdBy;
    private Date createdAt;
    private Projects projects;
    private ProjectTasks projectTasksByPredecessor;
    private Users users;
    private List<ProjectTasks> projectTasksesForPredecessor = new ArrayList<>();

    @Id
    @GenericGenerator(name = "generator", strategy = "guid", parameters = {})
    @GeneratedValue(generator = "generator")
    @Column(name = "`PMId`", nullable = false, length = 255)
    public String getPmid() {
        return this.pmid;
    }

    public void setPmid(String pmid) {
        this.pmid = pmid;
    }

    @Column(name = "`RelatedProjectGUID`", nullable = true, length = 32)
    public String getRelatedProjectGuid() {
        return this.relatedProjectGuid;
    }

    public void setRelatedProjectGuid(String relatedProjectGuid) {
        this.relatedProjectGuid = relatedProjectGuid;
    }

    @Column(name = "`Type`", nullable = true, length = 255)
    public String getType() {
        return this.type;
    }

    public void setType(String type) {
        this.type = type;
    }

    @Column(name = "`Description`", nullable = true, length = 2147483647)
    public String getDescription() {
        return this.description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "`StartAt`", nullable = true)
    public Date getStartAt() {
        return this.startAt;
    }

    public void setStartAt(Date startAt) {
        this.startAt = startAt;
    }

    @Column(name = "`AssignedTo`", nullable = true, scale = 0, precision = 10)
    public Integer getAssignedTo() {
        return this.assignedTo;
    }

    public void setAssignedTo(Integer assignedTo) {
        this.assignedTo = assignedTo;
    }

    @Column(name = "`PercentComplete`", nullable = true, scale = 0, precision = 10)
    public Integer getPercentComplete() {
        return this.percentComplete;
    }

    public void setPercentComplete(Integer percentComplete) {
        this.percentComplete = percentComplete;
    }

    @Column(name = "`Predecessor`", nullable = true, length = 255)
    public String getPredecessor() {
        return this.predecessor;
    }

    public void setPredecessor(String predecessor) {
        this.predecessor = predecessor;
    }

    @Column(name = "`Name`", nullable = true, length = 255)
    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "`EndAt`", nullable = true)
    public Date getEndAt() {
        return this.endAt;
    }

    public void setEndAt(Date endAt) {
        this.endAt = endAt;
    }

    @Column(name = "`CreatedBy`", nullable = true, scale = 0, precision = 10)
    public Integer getCreatedBy() {
        return this.createdBy;
    }

    public void setCreatedBy(Integer createdBy) {
        this.createdBy = createdBy;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "`CreatedAt`", nullable = true)
    public Date getCreatedAt() {
        return this.createdAt;
    }

    public void setCreatedAt(Date createdAt) {
        this.createdAt = createdAt;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`RelatedProjectGUID`", referencedColumnName = "`ProjectGUID`", insertable = false, updatable = false)
    public Projects getProjects() {
        return this.projects;
    }

    public void setProjects(Projects projects) {
        if(projects != null) {
            this.relatedProjectGuid = projects.getProjectGuid();
        }

        this.projects = projects;
    }

    // ignoring self relation properties to avoid circular loops.
    @JsonIgnoreProperties({"projectTasksByPredecessor", "projectTasksesForPredecessor"})
    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`Predecessor`", referencedColumnName = "`PMId`", insertable = false, updatable = false)
    public ProjectTasks getProjectTasksByPredecessor() {
        return this.projectTasksByPredecessor;
    }

    public void setProjectTasksByPredecessor(ProjectTasks projectTasksByPredecessor) {
        if(projectTasksByPredecessor != null) {
            this.predecessor = projectTasksByPredecessor.getPmid();
        }

        this.projectTasksByPredecessor = projectTasksByPredecessor;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`AssignedTo`", referencedColumnName = "`ID`", insertable = false, updatable = false)
    public Users getUsers() {
        return this.users;
    }

    public void setUsers(Users users) {
        if(users != null) {
            this.assignedTo = users.getId();
        }

        this.users = users;
    }

    // ignoring self relation properties to avoid circular loops.
    @JsonIgnoreProperties({"projectTasksByPredecessor", "projectTasksesForPredecessor"})
    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.REMOVE, mappedBy = "projectTasksByPredecessor")
    public List<ProjectTasks> getProjectTasksesForPredecessor() {
        return this.projectTasksesForPredecessor;
    }

    public void setProjectTasksesForPredecessor(List<ProjectTasks> projectTasksesForPredecessor) {
        this.projectTasksesForPredecessor = projectTasksesForPredecessor;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ProjectTasks)) return false;
        final ProjectTasks projectTasks = (ProjectTasks) o;
        return Objects.equals(getPmid(), projectTasks.getPmid());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getPmid());
    }
}

