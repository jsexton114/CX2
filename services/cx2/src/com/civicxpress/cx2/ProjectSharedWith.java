/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.Date;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

/**
 * ProjectSharedWith generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`ProjectSharedWith`", uniqueConstraints = {
        @UniqueConstraint(columnNames = {"`RelatedProjectGUID`", "`ProjectSharedWithUser`"})})
public class ProjectSharedWith implements Serializable {

    private Integer id;
    private String relatedProjectGuid;
    private Integer projectSharedWithUser;
    private Date projectSharedOn;
    private Integer projectSharedBy;
    private Users usersByProjectSharedBy;
    private Projects projects;
    private Users usersByProjectSharedWithUser;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`ID`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`RelatedProjectGUID`", nullable = true, length = 255)
    public String getRelatedProjectGuid() {
        return this.relatedProjectGuid;
    }

    public void setRelatedProjectGuid(String relatedProjectGuid) {
        this.relatedProjectGuid = relatedProjectGuid;
    }

    @Column(name = "`ProjectSharedWithUser`", nullable = true, scale = 0, precision = 10)
    public Integer getProjectSharedWithUser() {
        return this.projectSharedWithUser;
    }

    public void setProjectSharedWithUser(Integer projectSharedWithUser) {
        this.projectSharedWithUser = projectSharedWithUser;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "`ProjectSharedOn`", nullable = true)
    public Date getProjectSharedOn() {
        return this.projectSharedOn;
    }

    public void setProjectSharedOn(Date projectSharedOn) {
        this.projectSharedOn = projectSharedOn;
    }

    @Column(name = "`ProjectSharedBy`", nullable = true, scale = 0, precision = 10)
    public Integer getProjectSharedBy() {
        return this.projectSharedBy;
    }

    public void setProjectSharedBy(Integer projectSharedBy) {
        this.projectSharedBy = projectSharedBy;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`ProjectSharedBy`", referencedColumnName = "`ID`", insertable = false, updatable = false)
    public Users getUsersByProjectSharedBy() {
        return this.usersByProjectSharedBy;
    }

    public void setUsersByProjectSharedBy(Users usersByProjectSharedBy) {
        if(usersByProjectSharedBy != null) {
            this.projectSharedBy = usersByProjectSharedBy.getId();
        }

        this.usersByProjectSharedBy = usersByProjectSharedBy;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`RelatedProjectGUID`", referencedColumnName = "`ProjectGUID`", insertable = false, updatable = false)
    public Projects getProjects() {
        return this.projects;
    }

    public void setProjects(Projects projects) {
        if(projects != null) {
            this.relatedProjectGuid = projects.getProjectGuid();
        }

        this.projects = projects;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`ProjectSharedWithUser`", referencedColumnName = "`ID`", insertable = false, updatable = false)
    public Users getUsersByProjectSharedWithUser() {
        return this.usersByProjectSharedWithUser;
    }

    public void setUsersByProjectSharedWithUser(Users usersByProjectSharedWithUser) {
        if(usersByProjectSharedWithUser != null) {
            this.projectSharedWithUser = usersByProjectSharedWithUser.getId();
        }

        this.usersByProjectSharedWithUser = usersByProjectSharedWithUser;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof ProjectSharedWith)) return false;
        final ProjectSharedWith projectSharedWith = (ProjectSharedWith) o;
        return Objects.equals(getId(), projectSharedWith.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}

