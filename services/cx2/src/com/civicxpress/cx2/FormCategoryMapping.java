/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.civicxpress.cx2;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

/**
 * FormCategoryMapping generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`FormCategoryMapping`")
public class FormCategoryMapping implements Serializable {

    private Integer id;
    private Integer formTypeId;
    private Integer formCategories;
    private FormCategories formCategoriesByFormCategories;
    private FormTypes formTypes;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`ID`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`FormTypeId`", nullable = true, scale = 0, precision = 10)
    public Integer getFormTypeId() {
        return this.formTypeId;
    }

    public void setFormTypeId(Integer formTypeId) {
        this.formTypeId = formTypeId;
    }

    @Column(name = "`FormCategories`", nullable = true, scale = 0, precision = 10)
    public Integer getFormCategories() {
        return this.formCategories;
    }

    public void setFormCategories(Integer formCategories) {
        this.formCategories = formCategories;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`FormCategories`", referencedColumnName = "`ID`", insertable = false, updatable = false)
    public FormCategories getFormCategoriesByFormCategories() {
        return this.formCategoriesByFormCategories;
    }

    public void setFormCategoriesByFormCategories(FormCategories formCategoriesByFormCategories) {
        if(formCategoriesByFormCategories != null) {
            this.formCategories = formCategoriesByFormCategories.getId();
        }

        this.formCategoriesByFormCategories = formCategoriesByFormCategories;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`FormTypeId`", referencedColumnName = "`ID`", insertable = false, updatable = false)
    public FormTypes getFormTypes() {
        return this.formTypes;
    }

    public void setFormTypes(FormTypes formTypes) {
        if(formTypes != null) {
            this.formTypeId = formTypes.getId();
        }

        this.formTypes = formTypes;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof FormCategoryMapping)) return false;
        final FormCategoryMapping formCategoryMapping = (FormCategoryMapping) o;
        return Objects.equals(getId(), formCategoryMapping.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}

