/**This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
package com.civicxpress.cxpasswordresetservice.controller;

import com.civicxpress.cxpasswordresetservice.CXPasswordResetService;
import java.lang.String;
import javax.servlet.http.HttpServletRequest;
import org.springframework.web.bind.annotation.*;
import org.springframework.http.MediaType;
import org.springframework.beans.factory.annotation.Autowired;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

@RestController
@RequestMapping(value = "/cXPasswordReset")
public class CXPasswordResetController {

    @Autowired
    private CXPasswordResetService cXPasswordResetService;

    @RequestMapping(value = "/generateAndSendPasswordTokenForUser", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public boolean generateAndSendPasswordTokenForUser(@RequestParam(value = "userID", required = false) int userID) {
        return cXPasswordResetService.generateAndSendPasswordTokenForUser(userID);
    }

    @RequestMapping(value = "/generateUUID", produces = "application/json", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public String generateUUID() {
        return cXPasswordResetService.generateUUID();
    }

    @RequestMapping(value = "/resetPasswordUsingToken", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public boolean resetPasswordUsingToken(@RequestParam(value = "token", required = false) String token, @RequestParam(value = "newPassword", required = false) String newPassword) {
        return cXPasswordResetService.resetPasswordUsingToken(token, newPassword);
    }

    @RequestMapping(value = "/sampleJavaOperation", produces = "application/json", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public String sampleJavaOperation(@RequestParam(value = "name", required = false) String name, HttpServletRequest request) {
        return cXPasswordResetService.sampleJavaOperation(name, request);
    }

    @RequestMapping(value = "/validateSignupToken", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public boolean validateSignupToken(@RequestParam(value = "token", required = false) String token) {
        return cXPasswordResetService.validateSignupToken(token);
    }
}
